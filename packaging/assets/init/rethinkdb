#!/bin/sh
# Copyright 2012 RethinkDB.
# Portions from Frank Trampe and Novell used with permission.

# This file targets Ubuntu and is not in line with the Linux specification. Move runlevel 2 from Default-Start to Default-Stop for compliance.

### BEGIN INIT INFO
# Provides:          rethinkdb
# Required-Start: $remote_fs 
# Required-Stop: $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: This starts a set of rethinkdb server instances.
# Description:       This looks in /etc/rethinkdb/instances.d for rethinkdb config files and launches, stops, or examines each instance described there.
### END INIT INFO

itask="$1"

rtdbbin=/usr/bin/rethinkdb ;
rtdbconfigdir=/etc/rethinkdb ;

ini_section () {
    local _t1="${1#\[}"
    local _t2="${_t1%]}"
    if [ "$_t1" = "$1" -o "$_t2" = "$_t1" ]; then
        false
    else
        read -r $2 <<EOF
`echo $_t2`
EOF
    fi
}

ini_setting () {
    local _val="${1#*:}"
    local _key="${1%%:*}"
    if [ "$_key" = "" ]; then
        false
    else
        read -r $2 <<EOF
`echo $_key`
EOF
        read -r $3 <<EOF
${_val# }
EOF
    fi
}

ini_read () {
    local section=""
    local dict="#"
    local n=1
    local line sect key val
    while read -r line; do
        line=${line%%#*}
        if ini_section "$line" sect; then
            section=$sect
        elif ini_setting "$line" key val; then
            if [ "$section" = "" ]; then
                dict="$dict$key=$val#"
            else
                dict="$dict$section.$key=$val#"
            fi
        elif [ "`echo -n $line`" != "" ]; then
            echo ini_read: $1: parse error on line $n >&2
            return 1
        fi
        n=$((n + 1))
    done < $1 && read -r $2 <<EOF
$dict
EOF
}

ini_data_get () {
    local valp="${1#*#$2=}"
    local val="${valp%%#*}"
    if [ "$valp" = "$1" ]; then
        return 1
    else
        read -r $3 <<EOF
$val
EOF
    fi
}


if [ "$itask" = "" ] ;
then
	echo "Usage: /etc/init.d/rethinkdb COMMAND" ;
else
	# We check for active configurations .
	if [ -e "$rtdbconfigdir"/instances.d/*.conf ] ;
	then
		for rtdbconffile in "$rtdbconfigdir"/instances.d/*.conf ;
		do
			# We check for instructions about which user and group ought to run the service .
			runuser="" ;
			rungroup="" ;
			if [ -e "$rtdbconffile" ] ;
			then
				runuser="`cat "$rtdbconffile" | grep '^[ \t]*runuser[ \t]*\=' | head -n 1 | sed -e 's/^\([ \ta-zA-Z0-9]\|[-]\)*\=[ \t]*//g'`" ;
				rungroup="`cat "$rtdbconffile" | grep '^[ \t]*rungroup[ \t]*\=' | head -n 1 | sed -e 's/^\([ \ta-zA-Z0-9]\|[-]\)*\=[ \t]*//g'`" ;
			fi ;
			useropt="" ;
			if [ "$runuser" != "" ] ;
			then
				useropt="--chuid" ;
			fi ;
			groupopt="" ;
			if [ "$runuser" != "" ] ;
			then
				groupopt="--group" ;
			fi ;
			# We seek the pid-file .
			rtdbpidfile="`cat "$rtdbconffile" | grep '^[ \t]*pid-file[ \t]*\=' | head -n 1 | sed -e 's/^\([ \ta-zA-Z0-9]\|[-]\)*\=[ \t]*//g'`" ;
			if [ "$itask" = "stop" ] || [ "$itask" = "restart" ] || [ "$itask" = "reload" ] || [ "$itask" = "force-reload" ] ;
			then
				if [ ! -e "$rtdbpidfile" ] ;
				then
					echo "rethinkdb:""$rtdbconffile"": The instance is not running (there is no pid file)" ;
				else
					start-stop-daemon --stop --pidfile "$rtdbpidfile" --signal INT "$useropt" "$runuser" "$groupopt" "$rungroup" ;
				fi ;
			fi ;
			if [ "$itask" = "start" ] || [ "$itask" = "restart" ] || [ "$itask" = "reload" ] || [ "$itask" = "force-reload" ] ;
			then
				if [ -e /var/run ] && [ "`echo "$rtdbpidfile" | grep '^/var/run'`" != "" ] ;
				then
					mkdir -p "`dirname "$rtdbpidfile"`" ;
				fi ;
				if [ -e "$rtdbpidfile" ] ;
				then
					echo "rethinkdb:""$rtdbconffile"": The instance has already started" ;
					echo "rethinkdb: To force the instance to start, delete \`$rtdbpidfile'" ;
				else
					start-stop-daemon --start --pidfile "$rtdbpidfile" "$useropt" "$runuser" "$groupopt" "$rungroup" --startas "$rtdbbin" --background -- --config-file="$rtdbconffile" ;
				fi ;
			fi ;
			if [ "$itask" = "status" ] ;
			then
				if [ -e "$rtdbpidfile" ] ;
				then
					if [ "`ps -Af | awk 'BEGIN { inited = 0 ; pidpos = 0 ; } { if ( inited == 0 ) { count1 = 0 ; while ( count1 < NF ) { count1 ++ ; if ( $count1 ~ /^[Pp][Ii][Dd]$/ ) { pidpos = count1 ; inited = 1 ; } } } else { printf "%s\n" , $pidpos ; } }' | grep '^'"\`cat \"$rtdbpidfile\"\`"'$'`" = "" ] ;
					then
						echo "rethinkdb:""$rtdbconffile"" stop/crashed" ;
					else
						echo "rethinkdb:""$rtdbconffile"" start/running, pid `cat $rtdbpidfile | grep '^[0-9]*$'`" ;
					fi ;
				else
					echo "rethinkdb:""$rtdbconffile"" stop/waiting" ;
				fi ;
			fi ;
		done ;
	else
		echo "rethinkdb: 0 instances in ""$rtdbconfigdir""/instances.d"
		echo "rethinkdb: See http://www.rethinkdb.com/docs/guides/startup/ for more information" ;
	fi ;
fi ;
