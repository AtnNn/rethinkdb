Issue
  { issueClosedAt = Just 2014 (-11) (-07) 01 : 37 : 08 UTC
  , issueUpdatedAt = 2015 (-01) (-02) 21 : 16 : 43 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/2890/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/2890"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "0052cc"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:ReQL_proposal"
          , labelName = "tp:ReQL_proposal"
          }
      ]
  , issueNumber = 2890
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 316661
        , simpleUserLogin = N "timmaxw"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/316661?v=3"
        , simpleUserUrl = "https://api.github.com/users/timmaxw"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Expose UUIDs in more places"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/2890"
  , issueCreatedAt = 2014 (-08) (-12) 00 : 26 : 08 UTC
  , issueBody =
      Just
        "If people are going to build tools on top of the ReQL admin API, they'll probably want to use server and table UUIDs instead of names, because then it's much easier to write tools that work correctly when names are changed. To facilitate this, we should expose UUIDs:\r\n\r\n* We already have a `uuid` field in every row in `rethinkdb.table_config`, `rethinkdb.table_status`, and `rethinkdb.server_status`. This is a good start.\r\n\r\n* We should return the generated UUID from `table_create()`. Perhaps it could return a document of the form `{\"created\": 1, \"generated_keys\": [\"<uuid>\"]}` for consistency with `r.table(...).insert()`.\r\n\r\n* Any function that accepts a table name or server name should also accept a UUID. For example, it should be possible to pass a UUID to `r.table_drop()`, ideally. However, we should think about what happens if the user calls `r.db(...).table_drop(uuid)` and the UUID refers to a table not in that database. Should `r.table_drop(uuid)` work for any table, or only tables in the connection's current database?\r\n\r\n* Should we expose database UUIDs? If we have a `r.db(\"rethinkdb\").table(\"db_config\")` table, then it makes sense to expose database UUIDs there.\r\n\r\n* We should log a server's UUID every time it starts up.\r\n\r\n* Exception: `rethinkdb.table_config` should only allow server names to be inserted into it, not server UUIDs. This is because magically turning UUIDs into server names on a persisted document is too weird."
  , issueState = "closed"
  , issueId = Id 40014193
  , issueComments = 41
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Just 2015 (-01) (-23) 08 : 00 : 00 UTC
          , milestoneOpenIssues = 0
          , milestoneNumber = 81
          , milestoneClosedIssues = 321
          , milestoneDescription = Just ""
          , milestoneTitle = "1.16"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/81"
          , milestoneCreatedAt = 2014 (-09) (-04) 04 : 49 : 30 UTC
          , milestoneState = "closed"
          }
  }