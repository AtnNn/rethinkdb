IssueComment
  { issueCommentUpdatedAt = 2013 (-04) (-30) 00 : 27 : 17 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/17203218"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/714#issuecomment-17203218"
  , issueCommentCreatedAt = 2013 (-04) (-30) 00 : 27 : 17 UTC
  , issueCommentBody =
      "@atnnn : That interface is neat, but it seems a little complicated to me.  Also it's kinda unnatural in Ruby (where RQL functions are usually specified as blocks rather than lambda expressions).\r\n\r\nThis seems like a more natural interface to me:\r\n```ruby\r\nr.run_with_batches(array_of_rows) {|batch|\r\n  r.table('test').insert(batch)\r\n}\r\n```\r\n\r\nThe problem with all of these is that they require users to think and use a different primitive than they normally do.  I think that most users will be inserting by just calling `r.table(...).insert(...)`, so if we could make that case not suck that would probably be good.\r\n\r\nI agree that we're getting back into the business of implementing complicated logic in the drivers, which is bad.  I'm not sure whether the other options are better though.\r\n\r\n(Also, @atnnn: what's an example of a more complicated insert query that people want to run a lot?  You might be thinking of a case I haven't considered.)\r\n"
  , issueCommentId = 17203218
  }