Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2014 (-05) (-22) 06 : 29 : 01 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/2207/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/2207"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "e10c02"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/pr:high"
          , labelName = "pr:high"
          }
      , IssueLabel
          { labelColor = "e102d8"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:bug"
          , labelName = "tp:bug"
          }
      ]
  , issueNumber = 2207
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 258437
        , simpleUserLogin = N "srh"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/258437?v=3"
        , simpleUserUrl = "https://api.github.com/users/srh"
        , simpleUserType = OwnerUser
        }
  , issueTitle =
      "Problems with higher planes of Unicode, and surrogate pairs."
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/2207"
  , issueCreatedAt = 2014 (-04) (-02) 07 : 18 : 14 UTC
  , issueBody =
      Just
        "Problems:\r\n\r\n- The JS driver can insert a document on the server that the Ruby driver (or the Ruby language) cannot deal with.\r\n\r\n- The JS driver can insert a document such that, if the Python driver downloads it and reuploads it unchanged, and then the Python client downloads it again, the value will be different the second time.\r\n\r\n- The Python and Ruby clients can upload documents that appear to have a different value on the JS client.\r\n\r\nThis happens when the JS client uploads a document containing a surrogate pair, or when Python or Ruby uploads a document with a valid non-BMP Unicode character (with value at least 0x1000).\r\n\r\nMore  details:\r\n\r\nWhen I tried storing a string with a character `\\U00012345` inside of RethinkDB using Python, I got back the right value in the Python and Ruby drivers, but in the Data Explorer, I saw a string having char code 0x2345.\r\n\r\nWhen I insert the surrogate pair `'\\ud808\\udf45'` in the data explorer, I see a string with a little box character that renders \"012345\" in the data explorer: \74565.  And the actual string as handled by Javascript contains a surrogate pair, with two characters of contribution to the .length of the string, and charCodeAt returning 0xd808 and 0xdf45, respectively.  Then, when reading the document back in Python, I get `u'\\ud808\\udf45'`.  Reading back the document in Ruby (say, with `r.table('foo').run`), I get `RethinkDB::RqlRuntimeError: Connection closed by server!`\r\n\r\nThe server prints the following warning in any case, with that surrogate pair present:\r\n\r\n```\r\nlibprotobuf ERROR google/protobuf/wire_format.cc:1059] Encountered string containing invalid UTF-8 data while serializing protocol buffer. Strings must contain only UTF-8; use the 'bytes' type for raw bytes.\r\n```\r\n\r\nHere's what would happen if I manually tried to insert that surrogate pair in Ruby:\r\n\r\n```\r\nirb(main):021:0> r.table('foo').insert({a:\"\\u{d808}\\u{df45}\"}).run\r\nArgumentError: string value is not valid utf-8\r\n\tfrom /usr/local/lib/ruby/gems/2.0.0/gems/ruby-protocol-buffers-1.5.0/lib/protocol_buffers/runtime/field.rb:310:in `check_value'\r\n\tfrom /usr/local/lib/ruby/gems/2.0.0/gems/ruby-protocol-buffers-1.5.0/lib/protocol_buffers/runtime/field.rb:220:in `check_valid'\r\n\tfrom /usr/local/lib/ruby/gems/2.0.0/gems/ruby-protocol-buffers-1.5.0/lib/protocol_buffers/runtime/field.rb:173:in `r_str='\r\n\tfrom /usr/local/lib/ruby/gems/2.0.0/gems/rethinkdb-1.12.0.1/lib/shim.rb:117:in `native_to_datum_term'\r\n\tfrom /usr/local/lib/ruby/gems/2.0.0/gems/rethinkdb-1.12.0.1/lib/shim.rb:141:in `any_to_pb'\r\n\tfrom /usr/local/lib/ruby/gems/2.0.0/gems/rethinkdb-1.12.0.1/lib/shim.rb:220:in `expr'\r\n\tfrom /usr/local/lib/ruby/gems/2.0.0/gems/rethinkdb-1.12.0.1/lib/func.rb:93:in `block (3 levels) in <class:RQL>'\r\n\tfrom /usr/local/lib/ruby/gems/2.0.0/gems/rethinkdb-1.12.0.1/lib/func.rb:93:in `map'\r\n\tfrom /usr/local/lib/ruby/gems/2.0.0/gems/rethinkdb-1.12.0.1/lib/func.rb:93:in `block (2 levels) in <class:RQL>'\r\n\tfrom (irb):21\r\n\tfrom /usr/local/bin/irb:12:in `<main>'\r\n```\r\n\r\nRuby does weird stuff when you try to use surrogate pair characters in a string:\r\n\r\n```\r\nirb(main):033:0> \"\\u{d808}\\u{df45}\"\r\n=> \"\\xED\\xA0\\x88\\xED\\xBD\\x85\"\r\nirb(main):038:0> \"\\u{d808}\\u{df45}\".length\r\n=> 6\r\nirb(main):035:0> \"\\u{12345}\"\r\n=> \"\74565\"\r\nirb(main):036:0> \"\\u{12345}\".length\r\n=> 1\r\n```\r\n\r\nWhen we try to insert a surrogate pair in Python, it inserts the replacement unicode character:\r\n\r\n```\r\n>>> r.table('foo').insert({'a':u'\\ud808\\udf45'}).run()\r\n{u'errors': 0, u'deleted': 0, u'generated_keys': [u'17761a0e-c9b9-4c50-ad92-b4eed0de3814'], u'unchanged': 0, u'skipped': 0, u'replaced': 0, u'inserted': 1}\r\n>>> r.table('foo').run()\r\n<rethinkdb.net.Cursor object at 0x259ca90>\r\n>>> list(r.table('foo').run())\r\n[{u'a': u'\\U00012345', u'id': u'17761a0e-c9b9-4c50-ad92-b4eed0de3814'}]\r\n```\r\n\r\nRuby sees it too:\r\n\r\n```\r\nirb(main):044:0> r.table('foo').run\r\n=> #<RethinkDB::Cursor:69864676762320 (enumerable): r.table(\"foo\")\r\n[{\"a\"=>\"\74565\", \"id\"=>\"17761a0e-c9b9-4c50-ad92-b4eed0de3814\"}]>\r\n```\r\n\r\nAnd the data explorer sees 0x2345.\r\n\r\nI can't seem to trick the Python client into getting a lone surrogate pair character on the server.\r\n\r\nSometimes some of these values might be going through JSON serialization and then protocol buffers serialization.  At least part of this problem is related to protocol buffers serialization/deserialization, based on error messages and stack traces.  Also there's the fact that we can have documents with surrogate pair character codes that Ruby just refuses to represent.\r\n\r\nThere might also be a difference in how cJSON treats a surrogate pair with `\\uXXXX` escape codes, versus some UTF-8 represented surrogate pair."
  , issueState = "open"
  , issueId = Id 30664445
  , issueComments = 3
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 883
          , milestoneNumber = 2
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone are not an immediate priority, and will be periodically revisited. When we decide to work on an issue in backlog, we'll move it to next."
          , milestoneTitle = "backlog"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/2"
          , milestoneCreatedAt = 2012 (-11) (-11) 14 : 16 : 11 UTC
          , milestoneState = "open"
          }
  }