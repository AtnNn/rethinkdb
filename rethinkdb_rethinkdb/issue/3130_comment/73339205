IssueComment
  { issueCommentUpdatedAt = 2015 (-02) (-07) 00 : 33 : 35 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/73339205"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3130#issuecomment-73339205"
  , issueCommentCreatedAt = 2015 (-02) (-07) 00 : 33 : 35 UTC
  , issueCommentBody =
      "Actually, based on our discussion of `r.db` in #3663, one option would be to say that `table` (and `db`) return lazy references rather than looking up the table right away.  Then if you tried to run `r.table('non_existent')`, the error would be something like \"Could not convert table reference `non_existent` to stream -- table `non_existent` does not exist.\"  (except presumably better worded).  That still seems ugly to me, but it's less of a blatant exception to our evaluation model.\r\n\r\n(So, I guess I'm saying if everyone else really likes `.db.create`, `.table.create` and `.index.create`, I think the way we should do it is by making `.db`, `.table` and `.index` return lazy references and to throw the \"no such {db,table,index}\" error when you try to implicitly convert them into something real, e.g. by reading from them or calling `config` on them.)"
  , issueCommentId = 73339205
  }