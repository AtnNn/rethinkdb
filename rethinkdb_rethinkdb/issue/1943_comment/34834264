IssueComment
  { issueCommentUpdatedAt = 2014 (-02) (-12) 03 : 06 : 25 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/34834264"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1943#issuecomment-34834264"
  , issueCommentCreatedAt = 2014 (-02) (-12) 02 : 59 : 52 UTC
  , issueCommentBody =
      "So the size after which secondary indexes are truncated is defined in function `datum_t::max_trunc_size()`, which currently evaluates to `250 \8722 128 - 8 - 2 = 112`.\r\n\r\nWhat I don't understand is why searching for a longer string is faster than searching for a shorter one. \r\n\r\nMaybe the code (incorrectly) assumes that the shorter one is short only because it has been truncated, and then searches for a range that is too large?\r\nSo when querying for \"aaa29\", it might think that it should actually query for everything between \"aaa29\" and \"aaa2:\" (':' is the next character after '9' in ASCII) and then do post-filtering?"
  , issueCommentId = 34834264
  }