Issue
  { issueClosedAt = Just 2014 (-04) (-25) 22 : 30 : 04 UTC
  , issueUpdatedAt = 2014 (-04) (-26) 03 : 00 : 54 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/384/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/384"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "02d7e1"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/cp:reql"
          , labelName = "cp:reql"
          }
      ]
  , issueNumber = 384
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "ReQL testing todo"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/384"
  , issueCreatedAt = 2013 (-02) (-27) 03 : 12 : 18 UTC
  , issueBody =
      Just
        "I have the following todos in the ReQL test suite and will be replacing them with tests. If you think something else needs to be tested that the suite is missing, comment here. We'll close this issue once 1.4 ships.\n\n```\naggregation.yaml:    # TODO: check that r.row works\naggregation.yaml:    # TODO: check what happens if one of the functions returns undefined\naggregation.yaml:    # TODO: proper test for seq.count()\ncontrol.yaml:    # TODO: add r.js() tests\ncontrol.yaml:    # TODO: add r.error() tests\ncontrol.yaml:    # TODO: add positive and negative forEach tests (including\ndatum/array.yaml:    # TODO: errors, etc.\njoins.yaml:    # TODO: test an actual inner-join condition (where inner-join differs from outer-join)\njoins.yaml:    # TODO: test an actual outer-join condition (where outer-join differs from inner-join)\njoins.yaml:    # TODO: test for table where id isn't a primary key\nmeta/table.yaml:    # TODO: test options to table_create (e.g. primary_key,\nmutation/delete.yaml:    # TODO: test deletion on a non-deletable object\nmutation/replace.yaml:    # TODO: Between is buggy on the CPP server right now and this doesn't work\nmutation/replace.yaml:    # TODO: static value syntax\nmutation/replace.yaml:    # TODO: replace a non-replacable object\nmutation/replace.yaml:    # TODO: test atomicity constraints\nmutation/replace.yaml:    # TODO: test trying to change pkey of a document\nmutation/replace.yaml:    # TODO: test not passing a pkey in the first place. What should happen?\nmutation/insert.yaml:    # TODO: test upsert option\nmutation/insert.yaml:    # TODO: test auto pkey generation\nmutation/insert.yaml:    # TODO: test auto pkey generation when pkey other than id is passed to table_create\nmutation/insert.yaml:    # TODO: test pkey clash error case\nmutation/insert.yaml:    # TODO: test what happens if one tries to insert into a non-insertable object\nmutation/insert.yaml:    # TODO: in all data modification operations (insert, update,\nmutation/update.yaml:    # TODO: test static value syntax\nmutation/update.yaml:    # TODO: test what happens if one tries to update a non-updatable object\nmutation/update.yaml:    # TODO: test atomicity constraints (positive and negative test)\nmutation/update.yaml:    # TODO: test seq.filter(...).filter(...).update\nmutation/update.yaml:    # TODO: test trying to change pkey of a document\nselection.yaml:    # TODO: test missing db \nselection.yaml:    # TODO: test missing table\nselection.yaml:    # TODO: test accessing a table from default db\nselection.yaml:    # TODO: GET a document that exists\nselection.yaml:    # TODO: GET a document that doesn't exist\nselection.yaml:    # TODO: does GET still support an attribute specification?\nselection.yaml:    # TODO: test GET for table where id isn't a primary key\nselection.yaml:    # TODO: test between without the first argument\nselection.yaml:    # TODO: test between without the second argument\nselection.yaml:    # TODO: test between that has a wider range than the one in the db\nselection.yaml:    # TODO: does between still support attribute specification?\nselection.yaml:    # TODO: test between on non-selections\nselection.yaml:    # TODO: test between table where id isn't a primary key\nselection.yaml:    # TODO: test static value syntax for filter\nselection.yaml:    # TODO: test seq.filter.filter\nselection.yaml:    # TODO: test not returning a boolean\ntransformation.yaml:        # TODO: Implicit var support buggy on CPP server\ntransformation.yaml:        # TODO: Implicit var support buggy on CPP server\ntransformation.yaml:    # TODO: add tests for skip (positive, negative numbers, non-numbers)\ntransformation.yaml:    # TODO: add tests for limit (positive, negative numbers, non-numbers)\ntransformation.yaml:    # TODO: add tests for slice (positive, negative numbers, non-numbers)\ntransformation.yaml:    # TODO: add tests for nth (positive, negative numbers, non-numbers)\ntransformation.yaml:    # TODO: pluck\ntransformation.yaml:    # TODO: without\ntransformation.yaml:    # TODO: make sure all is properly polymorphic\n```\n"
  , issueState = "closed"
  , issueId = Id 11440122
  , issueComments = 11
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 706854
                , simpleUserLogin = N "AtnNn"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/706854?v=3"
                , simpleUserUrl = "https://api.github.com/users/AtnNn"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 0
          , milestoneNumber = 64
          , milestoneClosedIssues = 228
          , milestoneDescription =
              Just
                "These issues are no longer relevant to the current version of RethinkDB"
          , milestoneTitle = "outdated"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/64"
          , milestoneCreatedAt = 2014 (-03) (-28) 00 : 17 : 40 UTC
          , milestoneState = "closed"
          }
  }