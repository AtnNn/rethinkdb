IssueComment
  { issueCommentUpdatedAt = 2014 (-06) (-25) 18 : 04 : 35 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 78930
        , simpleUserLogin = N "apendleton"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/78930?v=3"
        , simpleUserUrl = "https://api.github.com/users/apendleton"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/47137188"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1118#issuecomment-47137188"
  , issueCommentCreatedAt = 2014 (-06) (-25) 18 : 04 : 35 UTC
  , issueCommentBody =
      "Our applications often use map-reduce to build complex summary structures with various kinds of aggregates about a particular kind of data, including things that aren't reversible (top-ten lists by multiple criteria, start and stop dates for various kinds of activity, etc.).  Aside from being much easier for developers to reason about, not requiring a reverse function makes this feature much more useful, since I think lots of things people use map-reduce for aren't trivially reversible.  It also seems like it's not necessarily O(n) storage; there are various decisions you could make about whether to store the results of all intermediate maps and reduces, or only some or all of the reduces, at the expense of having to do a bit more recomputation upon change (e.g., rerunning the map operation on the leaves of the subtree that changed).  But I think you could end up with O(log n) storage depending on what you decided there."
  , issueCommentId = 47137188
  }