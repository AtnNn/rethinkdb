IssueComment
  { issueCommentUpdatedAt = 2016 (-06) (-10) 22 : 54 : 31 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/225314819"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1118#issuecomment-225314819"
  , issueCommentCreatedAt = 2016 (-06) (-10) 22 : 54 : 12 UTC
  , issueCommentBody =
      ">  I guess it feels kind of wrong to me to require something extra when you're doing `.changes` vs. a normal query.\r\n\r\nThe way I think of it is that this is like needing to have the `{index: ...}` optarg for `orderBy` if you want to have a changefeed on it. I can see that this is slightly different because the `reverse` option will not have any effect unless you open a changefeed, but I don't feel like that's a big issue.\r\n\r\nI don't like the first syntax because it seems limiting and different from what we do anywhere else. \r\n\r\nWhat if in the future we allow changefeeds on queries that contain multiple `reduce` operations (for example within a subquery)? Specifying the function in `changes` would not work for that.\r\n\r\nOr what if you have a query that looks like this: `tbl.reduce(...).do(...).changes()`? Ignoring the fact that we currently don't support `do` in changefeeds (which we totally should), it becomes much less obvious what the `reverse` argument to `changes` actually applies to and how it works. Does it get applied to the value after or before the `do`?"
  , issueCommentId = 225314819
  }