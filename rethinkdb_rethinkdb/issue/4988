Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2016 (-04) (-29) 22 : 24 : 16 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4988/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/4988"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "444444"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:performance"
          , labelName = "tp:performance"
          }
      ]
  , issueNumber = 4988
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 284476
        , simpleUserLogin = N "jasonkuhrt"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/284476?v=3"
        , simpleUserUrl = "https://api.github.com/users/jasonkuhrt"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Feature request: Intelligent prefetching"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4988"
  , issueCreatedAt = 2015 (-10) (-23) 00 : 54 : 11 UTC
  , issueBody =
      Just
        "Consider the following:\n\n``` js\nconst getDevice = (r, id) => (\n  r\n  .table('devices')\n  .get(id) /* 1 */\n  .merge({\n     relations: {\n/* 2 */ observing: r.table('relations').getAll(id, { index: 'observer' }).coerceTo('array'),\n/* 3 */ observers: r.table('relations').getAll(id, { index: 'subject' }).coerceTo('array'),\n    }\n  })\n)\n```\n\nIt is a join-based query that is able to execute queries `1` / `2` / `3` in parallel (I believe). Say the document it returns is a `device`. If we want to batch-query `devices` then the RQL request may be:\n\n``` js\nconst getDevices = (r, ids) => (\n  r\n  .table('devices')\n  .getAll(r.args(ids)) /* 1 */\n  .merge((device) => ({\n     relations: {\n/* 2 */ observing: r.table('relations').getAll(device('id'), { index: 'observer' }).coerceTo('array'),\n/* 3 */ observers: r.table('relations').getAll(device('id'), { index: 'subject' }).coerceTo('array'),\n    }\n  }))\n)\n```\n\nThis new RQL has lost a degree of parallelism because each inner `getAll`s waits for its outer `getAll` to complete its fetch. To help communicate that this dependency is arbitrary and not technically necessary _in this case_, here is another RQL leading toward the same result:\n\n``` js\nconst getDevicesFullyParallel = (r, ids) => (\n  Promise.all([\n/* 1 */ r.table('devices').getAll(r.args(ids)), \n/* 2 */ Promise.all(ids.map((id) => r.table('relations').getAll(id, { index: 'observer' }) )), \n/* 3 */ Promise.all(ids.map((id) => r.table('relations').getAll(id, { index: 'subject' }) )), \n  ])\n  .then(/* ...ouch */)\n)\n```\n\nOf course this variation is not satisfactory since:\n1. We are now making 3 client requests (2 more than before)\n2. The logic in the `.then(...)` callback is going to be painful. We've lost the very useful leveraging of RQL to stitch our document schemas together.\n\nSo, assuming I've clearly explained the issue, the feature request is some sort of intelligent pre-fetching when possible or otherwise some new/other RQL function to explicitly do it.\n\nPrior discussion with `Michael Lucy` / `Henrik Andersson` / `Daniel Mewes` that led to this issue with can be traced back from here: https://groups.google.com/forum/?fromgroups=#!topic/rethinkdb/mvrMyqpyPPY.\n\nThanks!\n"
  , issueState = "open"
  , issueId = Id 112920380
  , issueComments = 1
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 882
          , milestoneNumber = 2
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone are not an immediate priority, and will be periodically revisited. When we decide to work on an issue in backlog, we'll move it to next."
          , milestoneTitle = "backlog"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/2"
          , milestoneCreatedAt = 2012 (-11) (-11) 14 : 16 : 11 UTC
          , milestoneState = "open"
          }
  }