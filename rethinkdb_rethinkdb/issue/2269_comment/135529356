IssueComment
  { issueCommentUpdatedAt = 2015 (-08) (-27) 19 : 24 : 09 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/135529356"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2269#issuecomment-135529356"
  , issueCommentCreatedAt = 2015 (-08) (-27) 19 : 24 : 09 UTC
  , issueCommentBody =
      "I think we should handle this by extending `default` to handle `INF` and `NaN` errors.  The simplest thing to do would be to just say that we consider these errors non-existence errors, but that doesn't quite make sense so I would also be open to introducing a new error type `foo` and saying that default handles both non-existence errors and `foo` errors.\r\n\r\nI'm not sure we should do this on the first pass, but I think `default` should be able to handle arbitrary errors.  We could do this with an optarg `handle` which is an array of strings specifying what error classes `default` should catch.  (In this case we should also make the function passed to `default` optionally take a second argument specifying the error type.)"
  , issueCommentId = 135529356
  }