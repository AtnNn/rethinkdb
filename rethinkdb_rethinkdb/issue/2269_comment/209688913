IssueComment
  { issueCommentUpdatedAt = 2016 (-04) (-13) 23 : 29 : 56 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 877936
        , simpleUserLogin = N "marshall007"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/877936?v=3"
        , simpleUserUrl = "https://api.github.com/users/marshall007"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/209688913"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2269#issuecomment-209688913"
  , issueCommentCreatedAt = 2016 (-04) (-13) 23 : 29 : 56 UTC
  , issueCommentBody =
      "Just realized my proposal in [#5661 (comment)](https://github.com/rethinkdb/rethinkdb/issues/5661#issuecomment-209595470) is pretty much identical to the long-term solution brought up in this issue. I think extending `default` to accept error types makes more sense than adding a new term as I was suggesting. That said, I'd prefer specifying the error type as the first argument rather than an optarg as well as support for passing actual `Error` types in addition to strings. That way it reads more like a traditional `try/catch`.\r\n\r\n```js\r\nexpr.default('Math', 'NonExistence', 0)\r\n\r\nexpr.default(r.Error.ReqlMathError, r.Error.ReqlNonExistenceError, 0)\r\n\r\nexpr.default(r.Error.ReqlMathError, 0)\r\n    .default(r.Error.ReqlNonExistenceError, 0)\r\n```"
  , issueCommentId = 209688913
  }