IssueComment
  { issueCommentUpdatedAt = 2015 (-09) (-01) 17 : 58 : 40 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1366
        , simpleUserLogin = N "deontologician"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1366?v=3"
        , simpleUserUrl = "https://api.github.com/users/deontologician"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/136812628"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2269#issuecomment-136812628"
  , issueCommentCreatedAt = 2015 (-09) (-01) 17 : 58 : 40 UTC
  , issueCommentBody =
      "I am leaning towards only `ZeroDivisionError` handled by `default` since it's the common case.\r\n\r\nIf I see a query like `r(1e200).div(x).default(0)`, do I expect this to handle precision related numeric errors?\r\n\r\nPros: People are likely to not think about edge cases in floating point math, so explicit errors would be nice. If you're testing, you'll get an informative blowup instead of having strangely incorrect results.\r\n\r\nCons: If you have a floating point edge case possible, and you don't think about it, your program could crash in production if we throw a special exception. These errors probably only happen rarely so unthorough testing might not catch it. We could \"help\" these applications not fail by swallowing these rarer errors in `default`, even though they were probably only expecting to catch zero division errors."
  , issueCommentId = 136812628
  }