IssueComment
  { issueCommentUpdatedAt = 2012 (-12) (-15) 02 : 24 : 36 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/11398911"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/157#issuecomment-11398911"
  , issueCommentCreatedAt = 2012 (-12) (-15) 02 : 24 : 36 UTC
  , issueCommentBody =
      "This aspect of reduce has confused basically everybody who's seen it.  This makes 3 (or possibly 4?) people *who work here* who have thought that reduce is broken because of its unexpected semantics.  It's probably even worse for users.\r\n\r\nI don't think we can change reduce to have more natural semantics without hurting performance, but we could add better error reporting.\r\n\r\nI think that before we run a reduce query we should call the reduce function on two copies of the base case, and make sure that we get the base case back (or else error with an appropriate message).\r\n\r\nThat would catch cases like this (1+1 != 1), and would catch the other common misunderstanding we've seen (where people write something like `r.table('ppl').reduce(0) {|a,b| a + b[:score]}`) with a type error."
  , issueCommentId = 11398911
  }