IssueComment
  { issueCommentUpdatedAt = 2012 (-12) (-17) 21 : 47 : 20 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 646357
        , simpleUserLogin = N "wmrowan"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/646357?v=3"
        , simpleUserUrl = "https://api.github.com/users/wmrowan"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/11463160"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/157#issuecomment-11463160"
  , issueCommentCreatedAt = 2012 (-12) (-17) 21 : 47 : 20 UTC
  , issueCommentBody =
      "Your right that the weak point in my proposal is in the zero element case. My point here is that such exceptional cases aren't new and appear all over the place, e.x.\r\n\r\n```python\r\n>>> (r(1) / r([]).length()).run()\r\nRuntimeError(...)\r\n```\r\n\r\nI would prefer to have a general solution for these cases or rely on traditional error handling methods than to special case reduce in this way. Should `/` take an optional value to return in case we get a divide by 0 error?\r\n\r\nMaybe we can add something like `errorExpr.catch(defaultValue)` to handle these cases (in this case reduce on a zero element stream would throw an error).\r\n\r\nI just want to really explore our alternatives before we commit to an optional argument to handle this case. It's not generally how we handle error producing edge cases and I'd like to avoid it if possible."
  , issueCommentId = 11463160
  }