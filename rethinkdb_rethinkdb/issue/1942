Issue
  { issueClosedAt = Just 2015 (-08) (-19) 20 : 44 : 48 UTC
  , issueUpdatedAt = 2015 (-08) (-19) 20 : 44 : 52 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/1942/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/1942"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "444444"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:performance"
          , labelName = "tp:performance"
          }
      ]
  , issueNumber = 1942
  , issueAssignee =
      Just
        SimpleUser
          { simpleUserId = Id 505365
          , simpleUserLogin = N "danielmewes"
          , simpleUserAvatarUrl =
              "https://avatars.githubusercontent.com/u/505365?v=3"
          , simpleUserUrl = "https://api.github.com/users/danielmewes"
          , simpleUserType = OwnerUser
          }
  , issueUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Slow groupedMapReduce on empty selection"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/1942"
  , issueCreatedAt = 2014 (-02) (-12) 00 : 14 : 55 UTC
  , issueBody =
      Just
        "@wojons pointed out that his query as posted here https://gist.github.com/wojons/bfa4c47d1cdacaae2063#file-sysmetrics-js is taking a relatively long time (up to 500ms), even if the `between()` doesn't match any rows.\r\n\r\nI can reproduce it on newton and get about 250 ms for the query with an empty between() result.\r\nIf I insert a `coerceTo('ARRAY')` right after the `between()`, query execution time goes down to about 80 ms. The same happens if I replace the `between()` by a `limit(0)`.\r\n\r\nIn the profile output, the time is attributed to the \"Perform read.\" entry. However all of the \"Perform read on shard.\" subtasks are fast, and there is no other subtask.\r\n\r\nMy suspicion is that we have a high overhead just for sending and/or dispatching a query this huge to a shard. One indication for this is that deserializing the mailbox message on the shards takes 30-40 ms per (hash-) shard."
  , issueState = "closed"
  , issueId = Id 27399435
  , issueComments = 7
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 706854
                , simpleUserLogin = N "AtnNn"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/706854?v=3"
                , simpleUserUrl = "https://api.github.com/users/AtnNn"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 0
          , milestoneNumber = 64
          , milestoneClosedIssues = 228
          , milestoneDescription =
              Just
                "These issues are no longer relevant to the current version of RethinkDB"
          , milestoneTitle = "outdated"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/64"
          , milestoneCreatedAt = 2014 (-03) (-28) 00 : 17 : 40 UTC
          , milestoneState = "closed"
          }
  }