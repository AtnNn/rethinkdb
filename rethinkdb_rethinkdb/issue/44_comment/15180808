IssueComment
  { issueCommentUpdatedAt = 2013 (-03) (-20) 15 : 01 : 50 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 26405
        , simpleUserLogin = N "malthe"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/26405?v=3"
        , simpleUserUrl = "https://api.github.com/users/malthe"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/15180808"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/44#issuecomment-15180808"
  , issueCommentCreatedAt = 2013 (-03) (-20) 15 : 01 : 26 UTC
  , issueCommentBody =
      "I have ported the protobufs libray to Python 3: https://github.com/malthe/google-protobuf.\r\n\r\nIt seems to work on the ``rethinkdb`` client driver although I had to make the following changes:\r\n\r\n    diff --git a/drivers/python/rethinkdb/__init__.py b/drivers/python/rethinkdb/__init__.py\r\n    index 0174258..185f911 100644\r\n    --- a/drivers/python/rethinkdb/__init__.py\r\n    +++ b/drivers/python/rethinkdb/__init__.py\r\n    @@ -1,5 +1,5 @@\r\n     # This file includes all public facing Python API functions\r\n    -from net import connect, Connection, Cursor\r\n    -from query import expr, js, error, do, row, table, db, db_create, db_drop, db_list, branch, count, sum, avg, asc, desc, eq, ne, le, ge, lt, gt, any, \r\n    -from errors import RqlError, RqlClientError, RqlCompileError, RqlRuntimeError, RqlDriverError\r\n    -from ast import RqlQuery\r\n    +from .net import connect, Connection, Cursor\r\n    +from .query import expr, js, error, do, row, table, db, db_create, db_drop, db_list, branch, count, sum, avg, asc, desc, eq, ne, le, ge, lt, gt, any,\r\n    +from .errors import RqlError, RqlClientError, RqlCompileError, RqlRuntimeError, RqlDriverError\r\n    +from .ast import RqlQuery\r\n    diff --git a/drivers/python/rethinkdb/ast.py b/drivers/python/rethinkdb/ast.py\r\n    index a4841cc..b8f84ee 100644\r\n    --- a/drivers/python/rethinkdb/ast.py\r\n    +++ b/drivers/python/rethinkdb/ast.py\r\n    @@ -1,8 +1,15 @@\r\n    -import ql2_pb2 as p\r\n    +from rethinkdb import ql2_pb2 as p\r\n     import types\r\n     import sys\r\n    -from errors import *\r\n    -from net import Connection\r\n    +from .errors import *\r\n    +from .net import Connection\r\n    +\r\n    +if sys.version_info[0] == 3:\r\n    +    number = (int, float)\r\n    +    stringtypes = (str, )\r\n    +else:\r\n    +    number = (int, long, float)\r\n    +    stringtypes = (str, unicode)\r\n\r\n     class RqlQuery(object):\r\n\r\n    @@ -314,10 +321,10 @@ class Datum(RqlQuery):\r\n             elif isinstance(self.data, bool):\r\n                 term.datum.type = p.Datum.R_BOOL\r\n                 term.datum.r_bool = self.data\r\n    -        elif isinstance(self.data, int) or isinstance(self.data, float) or isinstance(self.data, long):\r\n    +        elif isinstance(self.data, number):\r\n                 term.datum.type = p.Datum.R_NUM\r\n                 term.datum.r_num = self.data\r\n    -        elif isinstance(self.data, types.StringTypes):\r\n    +        elif isinstance(self.data, stringtypes):\r\n                 term.datum.type = p.Datum.R_STR\r\n                 term.datum.r_str = self.data\r\n             else:\r\n    @@ -664,7 +671,7 @@ def func_wrap(val):\r\n                 return True\r\n             if any([ivar_scan(arg) for arg in node.args]):\r\n                 return True\r\n    -        if any([ivar_scan(arg) for k,arg in node.optargs.iteritems()]):\r\n    +        if any([ivar_scan(arg) for k,arg in node.optargs.items()]):\r\n                 return True\r\n             return False\r\n\r\n    @@ -700,4 +707,4 @@ class Desc(RqlTopLevelQuery):\r\n         tt = p.Term.DESC\r\n         st = 'desc'\r\n\r\n    -from query import expr\r\n    +from .query import expr\r\n    diff --git a/drivers/python/rethinkdb/errors.py b/drivers/python/rethinkdb/errors.py\r\n    index cf4c3d0..0d73aba 100644\r\n    --- a/drivers/python/rethinkdb/errors.py\r\n    +++ b/drivers/python/rethinkdb/errors.py\r\n    @@ -1,4 +1,4 @@\r\n    -import ql2_pb2 as p\r\n    +from rethinkdb import ql2_pb2 as p\r\n\r\n     class RqlError(Exception):\r\n         def __init__(self, message, term, frames):\r\n    diff --git a/drivers/python/rethinkdb/net.py b/drivers/python/rethinkdb/net.py\r\n    index 6bd5ba3..e98ea46 100644\r\n    --- a/drivers/python/rethinkdb/net.py\r\n    +++ b/drivers/python/rethinkdb/net.py\r\n    @@ -5,9 +5,9 @@ __all__ = ['connect', 'Connection', 'Cursor']\r\n     import socket\r\n     import struct\r\n\r\n    -import ql2_pb2 as p\r\n    +from rethinkdb import ql2_pb2 as p\r\n\r\n    -from errors import *\r\n    +from .errors import *\r\n\r\n     class Cursor(object):\r\n         def __init__(self, conn, query, term, chunk, complete):\r\n    @@ -99,7 +99,7 @@ class Connection(object):\r\n                 if self.db:\r\n                    global_opt_args['db'] = self.db\r\n\r\n    -        for k,v in global_opt_args.iteritems():\r\n    +        for k,v in global_opt_args.items():\r\n                 pair = query.global_optargs.add()\r\n                 pair.key = k\r\n                 expr(v).build(pair.val)\r\n    @@ -174,5 +174,5 @@ class Connection(object):\r\n     def connect(host='localhost', port=28015, db='test'):\r\n         return Connection(host, port, db)\r\n\r\n    -from ast import Datum, DB\r\n    -from query import expr\r\n    +from .ast import Datum, DB\r\n    +from .query import expr\r\n    diff --git a/drivers/python/rethinkdb/query.py b/drivers/python/rethinkdb/query.py\r\n    index 1dae0f6..7000c6d 100644\r\n    --- a/drivers/python/rethinkdb/query.py\r\n    +++ b/drivers/python/rethinkdb/query.py\r\n    @@ -1,5 +1,5 @@\r\n    -from ast import *\r\n    -import ql2_pb2 as p\r\n    +from .ast import *\r\n    +from rethinkdb import ql2_pb2 as p\r\n\r\n     \"\"\"\r\n     All top level functions defined here are the starting points for RQL queries\r\n\r\nThat said, Google's protobufs implementation isn't the only game in town and it might be interesting to look at something like [upb](https://github.com/haberman/upb)."
  , issueCommentId = 15180808
  }