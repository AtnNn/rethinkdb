Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2016 (-08) (-13) 21 : 03 : 30 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5996/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/5996"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "fef2c0"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/Java"
          , labelName = "Java"
          }
      ]
  , issueNumber = 5996
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 1824859
        , simpleUserLogin = N "venantius"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1824859?v=3"
        , simpleUserUrl = "https://api.github.com/users/venantius"
        , simpleUserType = OwnerUser
        }
  , issueTitle =
      "Permit access to raw response object for Java client library"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5996"
  , issueCreatedAt = 2016 (-07) (-24) 23 : 00 : 49 UTC
  , issueBody =
      Just
        "I've been tinkering with working on a Clojure driver that would wrap the existing official Java driver (I'm already aware of https://github.com/apa512/clj-rethinkdb). I'm far enough along that I have a functioning prototype, but all queries currently respond with core Java types (e.g. an instance of `java.util.ArrayList`, etc.). \r\n\r\nIn my mind, it would be great if the `com.rethinkdb.net.Connection` class offered me a way to handle the query response myself so that I could directly cast the response into the appropriate Clojure data structure (whether that ended up being an instance of `clojure.lang.PersistentVector` or something more like a `core.async` channel, as appropriate). \r\n\r\nI think the simplest way to go about this would probably just be to make `sendQuery` public, but if we wanted to we could also keep it private and open up a different public method interface to support this use case. \r\n\r\nAnyways, figured I'd open an issue up for discussion \128516 "
  , issueState = "open"
  , issueId = Id 167259453
  , issueComments = 6
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 268
          , milestoneNumber = 41
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone will be revisited after each major release during the planning stage for the major release after it. They will be moved to a specific release milestone if chosen for that release."
          , milestoneTitle = "subsequent"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/41"
          , milestoneCreatedAt = 2013 (-06) (-30) 07 : 32 : 52 UTC
          , milestoneState = "open"
          }
  }