IssueComment
  { issueCommentUpdatedAt = 2015 (-01) (-28) 20 : 41 : 44 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1366
        , simpleUserLogin = N "deontologician"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1366?v=3"
        , simpleUserUrl = "https://api.github.com/users/deontologician"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/71911731"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3298#issuecomment-71911731"
  , issueCommentCreatedAt = 2015 (-01) (-28) 20 : 41 : 44 UTC
  , issueCommentBody =
      "We should definitely pick some underlying ioloop, rather than try to\r\nimplement our own. There are a ton of them (tornado, twisted, greenlet),\r\nthey're implemented in C, and they handle cross-platform decisions like\r\nepoll/kqueue\r\n\r\nOn Wed, Jan 28, 2015 at 12:21 PM, Daniel Mewes <notifications@github.com>\r\nwrote:\r\n\r\n> @larkost <https://github.com/larkost> What I don't understand about the\r\n> get_nowait model is how you would be waiting on multiple changefeeds\r\n> without busy waiting, which isn't really a good option.\r\n>\r\n> Maybe we can do a combination of your suggestion and the on/poll\r\n> interface. Namely we could keep the poll, but use a non-blocking next (or\r\n> get_nowait()) instead of callbacks / on:\r\n>\r\n> while True\r\n>   feedA = r.table('a').changes().run(conn)\r\n>   feedB = r.table('b').changes().run(conn)\r\n>   try:\r\n>       print(a.next(wait=False))\r\n>   except Empty: pass\r\n>   try:\r\n>       print(b.next(wait=False))\r\n>   except Empty: pass\r\n>\r\n>   # Wait for something to happen. The next time we loop either a or b should have data.\r\n>   conn.poll()\r\n>\r\n> \8212\r\n> Reply to this email directly or view it on GitHub\r\n> <https://github.com/rethinkdb/rethinkdb/issues/3298#issuecomment-71908425>\r\n> .\r\n>"
  , issueCommentId = 71911731
  }