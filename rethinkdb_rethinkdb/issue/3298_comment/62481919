IssueComment
  { issueCommentUpdatedAt = 2014 (-11) (-11) 00 : 27 : 49 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/62481919"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3298#issuecomment-62481919"
  , issueCommentCreatedAt = 2014 (-11) (-11) 00 : 27 : 05 UTC
  , issueCommentBody =
      "All callback systems I've ever used (and many I haven't used) *always* call the callback function in the context of the original thread. Windows event system, glib (gnome system), qt, python twisted, and node.js all do it this way. I'm having trouble thinking of a single callback system that doesn't.\r\n\r\nThe obvious problem with calling the user's callback functions in a different thread is synchronization. If we force users to synchronize access to variables the system becomes very hard to use. If we synchronize thread access for them, it doesn't play nicely if they spin up their own threads and find them be synchronized when they didn't expect it. In practice people get around that by hooking into a well-defined evented system (e.g. Twisted), but that makes the driver unusable in other contexts."
  , issueCommentId = 62481919
  }