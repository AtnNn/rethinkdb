IssueComment
  { issueCommentUpdatedAt = 2015 (-02) (-05) 08 : 30 : 37 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/73011053"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3298#issuecomment-73011053"
  , issueCommentCreatedAt = 2015 (-02) (-05) 08 : 30 : 37 UTC
  , issueCommentBody =
      "I think not to implementing `asyncio` for 2.0/v1, and just adding `r.join` (with a better name) to allow reading from multiple feeds/cursors is a great solution. It would probably take care of 99% of early use cases (if not more), and we can always add full blown `asyncio` support later if demand arises.\r\n\r\nIf we wanted to get fancy, we could even do this:\r\n\r\n```py\r\nfeedA = ...\r\nfeedB = ...\r\nx = r.join(feedA, feedB)\r\n\r\nfeedC = ...\r\nfeedD = ...\r\ny = r.join(feedC, feedD)\r\n\r\nz = r.join(x, y)\r\nfor change in z:\r\n  ...\r\n```\r\n\r\nWe could also do the following as @danielmewes suggested:\r\n\r\n```py\r\nfeedE = ...\r\nz.add(feedE)\r\nz.remove(feedA)\r\n```\r\n\r\nThis seems like a very powerful API to me. I would stick with it and ignore `asyncio` for the first implementation, unless there is a *really* compelling reason not to."
  , issueCommentId = 73011053
  }