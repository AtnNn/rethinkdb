IssueComment
  { issueCommentUpdatedAt = 2014 (-11) (-08) 02 : 34 : 58 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/62242171"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3298#issuecomment-62242171"
  , issueCommentCreatedAt = 2014 (-11) (-08) 02 : 34 : 58 UTC
  , issueCommentBody =
      "As far as I understand, there are some technical difficulties with implementing callbacks in Python unless you assume a specific non-standard framework/extension.\r\n(@larkost please correct me if I'm representing anything incorrectly here).\r\nAssuming there is no standard way to do the network i/o in a callback based way in Python, we would have to do reading from the socket in a separate thread. But then we would still have to call the user's callback on the original thread if a changefeed update comes in over the network. And this requires an event queue on the original thread.\r\n\r\nIt's probably reasonable to have different sets of features as far as concurrent queries are concerned in the standard drivers for node.js, Ruby and Python respectively. We have to figure out which features actually make sense given the way people typically structure concurrent applications in those languages.\r\n\r\nIn any case we can still provide special extended drivers for some of the async frameworks that exist for Python, that work with callbacks or whatever else fits best into the corresponding paradigms."
  , issueCommentId = 62242171
  }