IssueComment
  { issueCommentUpdatedAt = 2013 (-08) (-14) 16 : 16 : 48 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 78237
        , simpleUserLogin = N "rolftimmermans"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/78237?v=3"
        , simpleUserUrl = "https://api.github.com/users/rolftimmermans"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/22621204"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/348#issuecomment-22621204"
  , issueCommentCreatedAt = 2013 (-08) (-14) 08 : 21 : 24 UTC
  , issueCommentBody =
      "I'm being bitten by this when working with secondary indexes that I know only contain unique values. What I want to do is:\r\n\r\n    selection.nth(0).update({ attr: val }, { returnVals: true })\r\n    // or maybe this (which could return sequence of return values)\r\n    selection.update({ attr: val }, { returnVals: true })\r\n\r\nBecause both of the above are errors, I'm forced to do something like this instead:\r\n\r\n    selection.forEach(table.get(r.row(\"id\")).update({ attr: val }, { returnVals: true }))\r\n\r\nWhich returns the following result:\r\n\r\n    { unchanged: 0,\r\n      skipped: 0,\r\n      replaced: 1,\r\n      old_val: \r\n       { id: '9adb8505-883a-4886-bb62-14c744f06edf',\r\n         ... },\r\n      new_val: \r\n       { id: '9adb8505-883a-4886-bb62-14c744f06edf',\r\n         ... },\r\n      inserted: 0,\r\n      errors: 0,\r\n      deleted: 0 }\r\n"
  , issueCommentId = 22621204
  }