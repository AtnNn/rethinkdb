IssueComment
  { issueCommentUpdatedAt = 2012 (-11) (-15) 01 : 36 : 16 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 43867
        , simpleUserLogin = N "jdoliner"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/43867?v=3"
        , simpleUserUrl = "https://api.github.com/users/jdoliner"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/10394189"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/52#issuecomment-10394189"
  , issueCommentCreatedAt = 2012 (-11) (-15) 01 : 36 : 16 UTC
  , issueCommentBody =
      "Alright more progress for the interested: the problem is that this causes block to be looked up which the index doesn't know about. Here's the backtrace of where the faulty call is issued:\r\n\r\n    lazy_backtrace_t - backtrace.cc:251\r\n    mc_inner_buf_t - buffer_cache/mirrored/mirrored.cc:202\r\n    mc_buf_lock_t - buffer_cache/mirrored/mirrored.cc:523\r\n    scc_buf_lock_t - ./buffer_cache/semantic_checking.tcc:154\r\n    void find_keyvalue_location_for_write<rdb_value_t>(scc_transaction_t<mc_cache_t>*, superblock_t*, btree_key_t const*, keyvalue_location_t<rdb_value_t>*, eviction_priority_t*, btree_stats_t*) - ./btree/operations.tcc:62\r\n    rdb_set(store_key_t const&, boost::shared_ptr<scoped_cJSON_t>, bool, btree_slice_t*, repli_timestamp_t, scc_transaction_t<mc_cache_t>*, superblock_t*, rdb_protocol_t::point_write_response_t*) - rdb_protocol/btree.cc:207\r\n    operator() - rdb_protocol/protocol.cc:802\r\n    internal_visit<const rdb_protocol_t::backfill_chunk_t::key_value_pair_t> - /usr/local/include/boost/variant/variant.hpp:859\r\n    visitation_impl_invoke_impl<boost::detail::variant::invoke_visitor<const {anonymous}::receive_backfill_visitor_t>, const void*, rdb_protocol_t::backfill_chunk_t::key_value_pair_t> - /usr/local/include/boost/variant/detail/visitation_impl.hpp:145\r\n    visitation_impl_invoke<boost::detail::variant::invoke_visitor<const {anonymous}::receive_backfill_visitor_t>, const void*, rdb_protocol_t::backfill_chunk_t::key_value_pair_t, boost::variant<rdb_protocol_t::backfill_chunk_t::delete_range_t, rdb_protocol_t::backfill_chunk_t::delete_key_t, rdb_protocol_t::backfill_chunk_t::key_value_pair_t>::has_fallback_type_> - /usr/local/include/boost/variant/detail/visitation_impl.hpp:174\r\n    visitation_impl<mpl_::int_<0>, boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<3l>, rdb_protocol_t::backfill_chunk_t::delete_range_t, boost::mpl::l_item<mpl_::long_<2l>, rdb_protocol_t::backfill_chunk_t::delete_key_t, boost::mpl::l_item<mpl_::long_<1l>, rdb_protocol_t::backfill_chunk_t::key_value_pair_t, boost::mpl::l_end> > > >, boost::mpl::l_iter<boost::mpl::l_end> >, boost::detail::variant::invoke_visitor<const {anonymous}::receive_backfill_visitor_t>, const void*, boost::variant<rdb_protocol_t::backfill_chunk_t::delete_range_t, rdb_protocol_t::backfill_chunk_t::delete_key_t, rdb_protocol_t::backfill_chunk_t::key_value_pair_t>::has_fallback_type_> - /usr/local/include/boost/variant/detail/visitation_impl.hpp:260\r\n    internal_apply_visitor_impl<boost::detail::variant::invoke_visitor<const {anonymous}::receive_backfill_visitor_t>, const void*> - /usr/local/include/boost/variant/variant.hpp:1803\r\n    internal_apply_visitor<boost::detail::variant::invoke_visitor<const {anonymous}::receive_backfill_visitor_t> > - /usr/local/include/boost/variant/variant.hpp:1825\r\n    apply_visitor<const {anonymous}::receive_backfill_visitor_t> - /usr/local/include/boost/variant/variant.hpp:1847\r\n    apply_visitor<{anonymous}::receive_backfill_visitor_t, const boost::variant<rdb_protocol_t::backfill_chunk_t::delete_range_t, rdb_protocol_t::backfill_chunk_t::delete_key_t, rdb_protocol_t::backfill_chunk_t::key_value_pair_t> > - /usr/local/include/boost/variant/detail/apply_visitor_unary.hpp:77\r\n    rdb_protocol_t::store_t::protocol_receive_backfill(btree_slice_t*, scc_transaction_t<mc_cache_t>*, superblock_t*, signal_t*, rdb_protocol_t::backfill_chunk_t const&) - rdb_protocol/protocol.cc:833\r\n    btree_store_t<rdb_protocol_t>::receive_backfill(rdb_protocol_t::backfill_chunk_t const&, object_buffer_t<fifo_enforcer_sink_t::exit_write_t>*, signal_t*) - btree/btree_store.cc:146\r\n    store_subview_t<rdb_protocol_t>::receive_backfill(rdb_protocol_t::backfill_chunk_t const&, object_buffer_t<fifo_enforcer_sink_t::exit_write_t>*, signal_t*) - ./protocol_api.hpp:547\r\n    store_subview_t<rdb_protocol_t>::receive_backfill(rdb_protocol_t::backfill_chunk_t const&, object_buffer_t<fifo_enforcer_sink_t::exit_write_t>*, signal_t*) - ./protocol_api.hpp:547\r\n    chunk_callback_t<rdb_protocol_t>::apply_backfill_chunk(fifo_enforcer_write_token_t, rdb_protocol_t::backfill_chunk_t const&, signal_t*) - clustering/immediate_consistency/branch/backfillee.cc:58\r\n    chunk_callback_t<rdb_protocol_t>::coro_pool_callback(backfill_queue_entry_t<rdb_protocol_t>, signal_t*) - clustering/immediate_consistency/branch/backfillee.cc:83\r\n    coro_pool_t<backfill_queue_entry_t<rdb_protocol_t> >::worker_run(backfill_queue_entry_t<rdb_protocol_t>, auto_drainer_t::lock_t) - ./concurrency/coro_pool.hpp:69\r\n    boost::_mfi::mf2<void, coro_pool_t<backfill_queue_entry_t<rdb_protocol_t> >, backfill_queue_entry_t<rdb_protocol_t>, auto_drainer_t::lock_t>::operator()(coro_pool_t<backfill_queue_entry_t<rdb_protocol_t> >*, backfill_queue_entry_t<rdb_protocol_t>, auto_drainer_t::lock_t) const - /usr/local/include/boost/bind/mem_fn_template.hpp:280\r\n    void boost::_bi::list3<boost::_bi::value<coro_pool_t<backfill_queue_entry_t<rdb_protocol_t> >*>, boost::_bi::value<backfill_queue_entry_t<rdb_protocol_t> >, boost::_bi::value<auto_drainer_t::lock_t> >::operator()<boost::_mfi::mf2<void, coro_pool_t<backfill_queue_entry_t<rdb_protocol_t> >, backfill_queue_entry_t<rdb_protocol_t>, auto_drainer_t::lock_t>, boost::_bi::list0>(boost::_bi::type<void>, boost::_mfi::mf2<void,coro_pool_t<backfill_queue_entry_t<rdb_protocol_t> >, backfill_queue_entry_t<rdb_protocol_t>, auto_drainer_t::lock_t>&, boost::_bi::list0&, int) - /usr/local/include/boost/bind/bind.hpp:392\r\n    boost::_bi::bind_t<void, boost::_mfi::mf2<void, coro_pool_t<backfill_queue_entry_t<rdb_protocol_t> >, backfill_queue_entry_t<rdb_protocol_t>, auto_drainer_t::lock_t>, boost::_bi::list3<boost::_bi::value<coro_pool_t<backfill_queue_entry_t<rdb_protocol_t> >*>, boost::_bi::value<backfill_queue_entry_t<rdb_protocol_t> >, boost::_bi::value<auto_drainer_t::lock_t> > >::operator()() - /usr/local/include/boost/bind/bind_template.hpp:21\r\n    callable_action_instance_t<boost::_bi::bind_t<void, boost::_mfi::mf2<void, coro_pool_t<backfill_queue_entry_t<rdb_protocol_t> >, backfill_queue_entry_t<rdb_protocol_t>, auto_drainer_t::lock_t>, boost::_bi::list3<boost::_bi::value<coro_pool_t<backfill_queue_entry_t<rdb_protocol_t> >*>, boost::_bi::value<backfill_queue_entry_t<rdb_protocol_t> >, boost::_bi::value<auto_drainer_t::lock_t> > > >::run_action() - ./arch/runtime/runtime_utils.hpp:57\r\n    callable_action_wrapper_t::run() - arch/runtime/runtime_utils.cc:58\r\n    coro_t::run() - arch/runtime/coroutines.cc:178\r\n\r\n\r\nAs we can see it's coming from backfilling which makes me hopeful that we may be able to recreate this with a unit test."
  , issueCommentId = 10394189
  }