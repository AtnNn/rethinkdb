IssueComment
  { issueCommentUpdatedAt = 2012 (-11) (-15) 23 : 10 : 06 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 43867
        , simpleUserLogin = N "jdoliner"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/43867?v=3"
        , simpleUserUrl = "https://api.github.com/users/jdoliner"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/10429938"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/52#issuecomment-10429938"
  , issueCommentCreatedAt = 2012 (-11) (-15) 23 : 10 : 06 UTC
  , issueCommentBody =
      "Alright some more information has been discovered, the problem arises when someone tries to read a deleted block. I have confirmed that the block does indeed get deleted before it's read.\r\n\r\nThis is the backtrace of the offending delete:\r\n\r\n\r\n1: lazy_backtrace_t::lazy_backtrace_t() at 0x1df7b81 (../build/debug/rethinkdb)\r\n2: writeback_t::local_buf_t::mark_block_id_deleted() at 0x1808b53 (../build/debug/rethinkdb)\r\n3: mc_buf_lock_t::release() at 0x17fe86f (../build/debug/rethinkdb)\r\n4: scc_buf_lock_t<mc_cache_t>::release() at 0x17bcb74 (../build/debug/rethinkdb)\r\n5: check_and_handle_underfull(value_sizer_t<void>*, scc_transaction_t<mc_cache_t>*, scc_buf_lock_t<mc_cache_t>*, scc_buf_lock_t<mc_cache_t>*, superblock_t*, btree_key_t const*) at 0x17d25de (../build/debug/rethinkdb)\r\n6: void apply_keyvalue_change<rdb_value_t>(scc_transaction_t<mc_cache_t>*, keyvalue_location_t<rdb_value_t>*, btree_key_t const*, repli_timestamp_t, bool, key_modification_callback_t<rdb_value_t>*, eviction_priority_t*) at 0x1e54a27 (../build/debug/rethinkdb)\r\n7: kv_location_set(keyvalue_location_t<rdb_value_t>*, store_key_t const&, boost::shared_ptr<scoped_cJSON_t>, btree_slice_t*, repli_timestamp_t, scc_transaction_t<mc_cache_t>*) at 0x1e51fde (../build/debug/rethinkdb)\r\n8: rdb_set(store_key_t const&, boost::shared_ptr<scoped_cJSON_t>, bool, btree_slice_t*, repli_timestamp_t, scc_transaction_t<mc_cache_t>*, superblock_t*, rdb_protocol_t::point_write_response_t*) at 0x1e5276d (../build/debug/rethinkdb) \r\n9: ../build/debug/rethinkdb() [0x1e686e6]\r\n10: ../build/debug/rethinkdb() [0x1e6e791]\r\n11: ../build/debug/rethinkdb() [0x1e6da66]\r\n12: ../build/debug/rethinkdb() [0x1e6cd37]\r\n13: ../build/debug/rethinkdb() [0x1e6bb03]\r\n14: ../build/debug/rethinkdb() [0x1e699e5]\r\n15: ../build/debug/rethinkdb() [0x1e696ba]\r\n16: ../build/debug/rethinkdb() [0x1e69298]\r\n17: ../build/debug/rethinkdb() [0x1e69033]\r\n18: rdb_protocol_t::store_t::protocol_receive_backfill(btree_slice_t*, scc_transaction_t<mc_cache_t>*, superblock_t*, signal_t*, rdb_protocol_t::backfill_chunk_t const&) at 0x1e68849 (../build/debug/rethinkdb)\r\n19: btree_store_t<rdb_protocol_t>::receive_backfill(rdb_protocol_t::backfill_chunk_t const&, object_buffer_t<fifo_enforcer_sink_t::exit_write_t>*, signal_t*) at 0x17daf97 (../build/debug/rethinkdb)\r\n20: store_subview_t<rdb_protocol_t>::receive_backfill(rdb_protocol_t::backfill_chunk_t const&, object_buffer_t<fifo_enforcer_sink_t::exit_write_t>*, signal_t*) at 0x1ad49f0 (../build/debug/rethinkdb)\r\n21: store_subview_t<rdb_protocol_t>::receive_backfill(rdb_protocol_t::backfill_chunk_t const&, object_buffer_t<fifo_enforcer_sink_t::exit_write_t>*, signal_t*) at 0x1ad49f0 (../build/debug/rethinkdb)\r\n22: chunk_callback_t<rdb_protocol_t>::apply_backfill_chunk(fifo_enforcer_write_token_t, rdb_protocol_t::backfill_chunk_t const&, signal_t*) at 0x1b96177 (../build/debug/rethinkdb)\r\n23: chunk_callback_t<rdb_protocol_t>::coro_pool_callback(backfill_queue_entry_t<rdb_protocol_t>, signal_t*) at 0x1b92937 (../build/debug/rethinkdb)\r\n24: coro_pool_t<backfill_queue_entry_t<rdb_protocol_t> >::worker_run(backfill_queue_entry_t<rdb_protocol_t>, auto_drainer_t::lock_t) at 0x1b7ff40 (../build/debug/rethinkdb)\r\n25: boost::_mfi::mf2<void, coro_pool_t<backfill_queue_entry_t<rdb_protocol_t> >, backfill_queue_entry_t<rdb_protocol_t>, auto_drainer_t::lock_t>::operator()(coro_pool_t<backfill_queue_entry_t<rdb_protocol_t> >*, backfill_queue_entry_t<rdb_protocol_t>, auto_drainer_t::lock_t) const at 0x1b9998c (../build/debug/rethinkdb) \r\n26: void boost::_bi::list3<boost::_bi::value<coro_pool_t<backfill_queue_entry_t<rdb_protocol_t> >*>, boost::_bi::value<backfill_queue_entry_t<rdb_protocol_t> >, boost::_bi::value<auto_drainer_t::lock_t> >::operator()<boost::_mfi::mf2<void, coro_pool_t<backfill_queue_entry_t<rdb_protocol_t> >, backfill_queue_entry_t<rdb_protocol_t>, auto_drainer_t::lock_t>, boost::_bi::list0>(boost::_bi::type<void>, boost::_mfi::mf2<void, coro_pool_t<backfill_queue_entry_t<rdb_protocol_t> >, backfill_queue_entry_t<rdb_protocol_t>, auto_drainer_t::lock_t>&, boost::_bi::list0&, int) at 0x1b985fa (../build/debug/rethinkdb)  \r\n27: boost::_bi::bind_t<void, boost::_mfi::mf2<void, coro_pool_t<backfill_queue_entry_t<rdb_protocol_t> >, backfill_queue_entry_t<rdb_protocol_t>, auto_drainer_t::lock_t>, boost::_bi::list3<boost::_bi::value<coro_pool_t<backfill_queue_entry_t<rdb_protocol_t> >*>, boost::_bi::value<backfill_queue_entry_t<rdb_protocol_t> >, boost::_bi::value<auto_drainer_t::lock_t> > >::operator()() at 0x1b95eb3 (../build/debug/rethinkdb)\r\n28: callable_action_instance_t<boost::_bi::bind_t<void, boost::_mfi::mf2<void, coro_pool_t<backfill_queue_entry_t<rdb_protocol_t> >, backfill_queue_entry_t<rdb_protocol_t>, auto_drainer_t::lock_t>, boost::_bi::list3<boost::_bi::value<coro_pool_t<backfill_queue_entry_t<rdb_protocol_t> >*>, boost::_bi::value<backfill_queue_entry_t<rdb_protocol_t> >, boost::_bi::value<auto_drainer_t::lock_t> > > >::run_action() at 0x1b92504 (../build/debug/rethinkdb)\r\n29: callable_action_wrapper_t::run() at 0x177c6c4 (../build/debug/rethinkdb)\r\n30: coro_t::run() at 0x17741cd (../build/debug/rethinkdb)\r\n\r\n\r\nI'm also not formatting this because it takes forever. But we can see that check_and_handle_underfull appears, at least superficially, to be the culprit."
  , issueCommentId = 10429938
  }