IssueComment
  { issueCommentUpdatedAt = 2015 (-07) (-15) 23 : 23 : 18 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 552910
        , simpleUserLogin = N "Tryneus"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/552910?v=3"
        , simpleUserUrl = "https://api.github.com/users/Tryneus"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/121774661"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3903#issuecomment-121774661"
  , issueCommentCreatedAt = 2015 (-07) (-15) 23 : 22 : 42 UTC
  , issueCommentBody =
      "I'm not sure how useful this would be in practice.  Because of how changefeeds work, this can only guarantee that the client's up-to-date view of a particular shard is consistent, but not for the table as a whole.  Because clients don't (and probably shouldn't) know which shards individual rows are hosted on, `{ state: 'consistent' }` loses a lot of its meaning.\r\n\r\nI would have to check, but this may even extend down into hash shards.  If not, users could get some useful guarantees by having an unsharded table, but I think it's unrealistic to expect this feature to be used in such a manner.  Do we have a valid use case for a consistent view in a changefeed where the consistency guarantee only extends to rows in the shard's key space (and maybe even just a hash-shard's hash space)?"
  , issueCommentId = 121774661
  }