IssueComment
  { issueCommentUpdatedAt = 2015 (-12) (-16) 01 : 16 : 49 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/164952396"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/5208#issuecomment-164952396"
  , issueCommentCreatedAt = 2015 (-12) (-16) 01 : 16 : 16 UTC
  , issueCommentBody =
      "Thanks for the suggestion @thelinuxlich .\r\n\r\nI think wrapping operations in a `table.wait()` might be the wrong way of doing this, since `wait` can be very slow. At the very least it adds additional roundtrips to all replicas of the table. When waiting for write availability, it will even do a test write to ensure that the table is ready.\r\nHaving `wait` complete also doesn't guarantee that a subsequent query succeeds, since something could go wrong in the middle. Though it will of course increase the chances.\r\n\r\nThe way I'd prefer for handling this - at least for read queries - is to fire the query first. Then, only if the query fails because of missing availability, do a `table.wait({waitFor: \"ready_for_reads\"})`. Once that finishes, try the query again and continue in a loop until the query succeeds.\r\n\r\nThis is basically https://github.com/rethinkdb/rethinkdb/issues/4331.\r\n\r\nUntil that functionality is available on the server, the error to catch for this on the client would be the `ReqlAvailabilityError`.\r\n\r\n"
  , issueCommentId = 164952396
  }