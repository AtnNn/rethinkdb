Issue
  { issueClosedAt = Just 2015 (-01) (-13) 21 : 23 : 14 UTC
  , issueUpdatedAt = 2015 (-01) (-13) 21 : 23 : 14 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/3550/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/3550"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "e102d8"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:bug"
          , labelName = "tp:bug"
          }
      ]
  , issueNumber = 3550
  , issueAssignee =
      Just
        SimpleUser
          { simpleUserId = Id 1777134
          , simpleUserLogin = N "mlucy"
          , simpleUserAvatarUrl =
              "https://avatars.githubusercontent.com/u/1777134?v=3"
          , simpleUserUrl = "https://api.github.com/users/mlucy"
          , simpleUserType = OwnerUser
          }
  , issueUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Another sindex key serialization bug"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/3550"
  , issueCreatedAt = 2015 (-01) (-13) 00 : 14 : 19 UTC
  , issueBody =
      Just
        "This one has to do with the way in which we resolve ties.  Our rule is that if two rows share the same sindex value, we resolve the tie by comparing their primary key value.  The serialized form of the key is supposed to reflect this: the serialized form of the key is:\n\n```\nsindex_key + (\\0 is key untruncated) + primary_key + tag + primary_key_offset + tag_offset\n```\n\nDo you see the bug?  If the sindex keys are of equal length, but the primary keys are of unequal length, then the ordering depends on how the tag (or primary_key_offset in the case of non-multi-indexes) compares to the later bytes of the longer key.\n\nThis is a problem because changefeeds are resolving these ties correctly, which means that `r.table('test').orderby(index: 'broken').limit(1).run` will return a different result from the initial value of `r.table('test').orderby(indx: 'broken').limit(1).changes.run`.\n"
  , issueState = "closed"
  , issueId = Id 54130005
  , issueComments = 2
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Just 2015 (-01) (-23) 08 : 00 : 00 UTC
          , milestoneOpenIssues = 0
          , milestoneNumber = 81
          , milestoneClosedIssues = 321
          , milestoneDescription = Just ""
          , milestoneTitle = "1.16"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/81"
          , milestoneCreatedAt = 2014 (-09) (-04) 04 : 49 : 30 UTC
          , milestoneState = "closed"
          }
  }