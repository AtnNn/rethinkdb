IssueComment
  { issueCommentUpdatedAt = 2015 (-09) (-28) 23 : 41 : 36 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/143902842"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/4894#issuecomment-143902842"
  , issueCommentCreatedAt = 2015 (-09) (-28) 23 : 41 : 36 UTC
  , issueCommentBody =
      "Thanks for the suggestion @Agamennon.\r\nI think we've had a similar discussion before, but I can't find it right now.\r\n\r\nIn practice, you can already do this by using `insert` instead. All you need to do is to provide the `{conflict: \"replace\"}` optional argument, and it will replace the documents if their primary key already exists, and insert them otherwise (just like this form of `replace` would probably do).\r\n```js\r\nr.table(\"posts\").insert([{}, {}, ...], {conflict: \"replace\"})\r\n```\r\n\r\nChaining operations together is one of the core design elements of ReQL, which is why `r.table(\"posts\").get(...).replace(...)` could be considered more \"ReQLish\". However I can see that the expectation - especially after having worked with `insert` first - can deviate from this.\r\n\r\nI'm going to put this up for discussion as a ReQL proposal for one of the upcoming releases."
  , issueCommentId = 143902842
  }