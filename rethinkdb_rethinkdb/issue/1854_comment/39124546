IssueComment
  { issueCommentUpdatedAt = 2014 (-03) (-31) 18 : 35 : 31 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 258437
        , simpleUserLogin = N "srh"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/258437?v=3"
        , simpleUserUrl = "https://api.github.com/users/srh"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/39124546"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1854#issuecomment-39124546"
  , issueCommentCreatedAt = 2014 (-03) (-31) 18 : 35 : 31 UTC
  , issueCommentBody =
      "Now that r.args was mentioned in 1.13 planning... Are there any methods besides `getAll` that we can imagine using `r.args` for?  It seems to me like `r.args(...)` is a mistake.  It's not merely a new command -- it's a language breaking magic syntax like `r.literal` would be.  It might also be confusing to people who would try to pass in an optarg through `r.args`.  So far I've only seen people talking about how it could be used with `getAll`.  It is weird to have a function like `r.getAll` that's both variadic and takes optargs.\r\n\r\nThe real problem with `getAll` is that it has two behaviors: it can retrieve multiple rows for multiple primary keys, or it can retrieve multiple rows that have the same secondary key (or multiple secondary keys).  I don't see any reason why `getAll` shouldn't support taking an array of keys as an argument, and dropping variadic behavior."
  , issueCommentId = 39124546
  }