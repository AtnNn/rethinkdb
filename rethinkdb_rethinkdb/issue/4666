Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2016 (-04) (-29) 22 : 14 : 57 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4666/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/4666"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "fef2c0"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/Ruby"
          , labelName = "Ruby"
          }
      , IssueLabel
          { labelColor = "02e10c"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:enhancement"
          , labelName = "tp:enhancement"
          }
      ]
  , issueNumber = 4666
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 21095
        , simpleUserLogin = N "digitalextremist"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/21095?v=3"
        , simpleUserUrl = "https://api.github.com/users/digitalextremist"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Celluloid::IO Support"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4666"
  , issueCreatedAt = 2015 (-08) (-11) 19 : 48 : 52 UTC
  , issueBody =
      Just
        "As asked on Twitter: https://twitter.com/_de/status/631172559300485120\r\n\r\nWas there any energy put into a `Celluloid::IO` based driver?\r\n\r\nIf not, what about collaborating on such a driver? There is `celluloid-redis` for example:\r\n\r\n* https://github.com/celluloid/celluloid-redis\r\n\r\nThis adds \"evented\" IO to that highly-popular database. That's much more powerful than just adding `async` capabilities to the underlying database.\r\n\r\nPeople using `0MQ` benefit from using `celluloid-zmq`, which also uses `Celluloid::IO` ... making those sockets \"evented\" also. Same for people using `Reel` or `sidekiq` ... `Celluloid` is available to the application already. Adding `Celluloid::IO` and engaging it for RethinkDB makes sense.\r\n\r\nIt would be cool to have [`celluloid-rethinkdb`](https://github.com/celluloid/celluloid-zmq) and have the underlying Ruby driver not use `EventMachine` by default... but only if alternative concurrency management frameworks are not already in use. As I reconsider MongoDB for my own systems, I could see collaborating on a RethinkDB driver if someone is interested in co-developing this in `Celluloid::IO`, but the `EventMachine` focused pieces of the existing Ruby driver would need to be spun off to another gem that is only installed if another concurrency management framework driver like it, is not there.\r\n\r\nI've created a repository to start doing this, if someone from here would like to cooperate in developing it, as I am not familiar with RethinkDB:\r\n\r\nhttps://github.com/celluloid/celluloid-rethinkdb"
  , issueState = "open"
  , issueId = Id 100393892
  , issueComments = 7
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 882
          , milestoneNumber = 2
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone are not an immediate priority, and will be periodically revisited. When we decide to work on an issue in backlog, we'll move it to next."
          , milestoneTitle = "backlog"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/2"
          , milestoneCreatedAt = 2012 (-11) (-11) 14 : 16 : 11 UTC
          , milestoneState = "open"
          }
  }