IssueComment
  { issueCommentUpdatedAt = 2013 (-12) (-20) 09 : 26 : 02 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 371348
        , simpleUserLogin = N "jakcharlton"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/371348?v=3"
        , simpleUserUrl = "https://api.github.com/users/jakcharlton"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/30997801"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1792#issuecomment-30997801"
  , issueCommentCreatedAt = 2013 (-12) (-20) 09 : 26 : 02 UTC
  , issueCommentBody =
      "Cheers - shelling out to rethinkdb admin is less than ideal, but at least\r\nit gives us a way of programmatically setting up replicas, though this will\r\nprobably be pretty fragile ... could you clarify:\r\n\r\n1) Are rethinkdb admin commands idempotent?  (as we are shelling out, it's\r\nless reliable, so are we able to just re-execute the script if it fails?)\r\n2) I can't see a few things from the documentation from --help ... is there\r\nfuller documentation anywhere? In the meantime ...\r\n\r\n- The admin commands all seem to take a Table ... but not a Database to\r\nqualify the table with ... is there a way to specify which Table or which\r\nDatabase?  (slightly odder, it seems one of the commands allocates a Table\r\nto a Database - but I have no idea how to specify which of the \"Contacts\"\r\ntables ... as there may be many, one per Database. The WebUI always groups\r\nby Database so doesn't have that issue\r\n\r\n- Can sharding be done via rethinkdb admin ?   (I cant see a way, I may be\r\nmissing it)\r\n\r\n\r\nAs to your direction, I totally understand these are critical questions to\r\nget the right answer to, but for a production system these are usually the\r\nfirst questions asked (at least by an ops team), so some viable options\r\nreally need to be in place now. Shelling out will provide a short term fix,\r\nbut obviously better options will need to be present in future\r\n\r\n\r\nAs to your suggestions/discussion points:\r\n1) Absolutely, if you can do it via the command line or WebUI, you really\r\nshould be able to do it directly\r\n2) Definitely ... this is my main 'bugbear' with Rethink, a Database seems\r\nto have almost no purpose other than as a group of tables for convenient\r\nviewing\r\n3) Possibly\r\n4) A great idea, but ... replicas should probably be configured from day\r\nzero on a database, and all future data should follow that rule.\r\n\r\nMy personal opinion is that unless Rethink has a very good reason otherwise\r\n(and some specific use cases might justify), then a table should\r\nautomatically be sharded across all available servers - this presumes that\r\nRethink is more efficient with data sharded than it is with data in one\r\nshard, I don't know if this is the case, but usually spreading the load\r\nacross servers is better.  As far as I know so far from a week looking into\r\nRethink, shards exist purely as a way to spread workload - this may be my\r\nmisperception again\r\n\r\nOther tools tend to solve these problems at a Database level ... you set\r\nthe Database to replicate, not tables or data - so everything in that\r\nDatabase is duplicated.\r\n\r\nOther products have varying strategies for the equivalent of sharding, it\r\nwould usually be called clustering in the RDBMS world for example.\r\n\r\n\r\nMy suggestions from my experience would be:\r\n- Replicas are done by Table or by Database, or by Cluster ... presumably\r\nyou could iterate all the tables in a database or iterate all the tables on\r\na cluster, even with the mechanisms you have now.  As the objective\r\n(usually) of a replica is failover, you usually want it to be an exact and\r\ncomplete mirror of another system\r\n\r\n- Sharding can be set to be \"automatically shard across all available\r\nservers in cluster\" either for specific tables, or a database, or a cluster\r\n (as the purpose of shards are performance, you almost always want to take\r\nmaximum advantage of all servers you have running)\r\n\r\n- Obviously if you set Replica/Sharding by Database for example, then any\r\nfuture tables created in that database, or moved into it, should be set to\r\nreplicate or shard according to the database rule\r\n\r\n\r\n\r\n\r\n\r\n\r\nI guess one of the underlying problems I have here is that Rethink appears\r\nto have taken some fairly common database terms, and used them for things\r\nthat are not quite the same as the generally understood term. This has lead\r\nme to lots of confusion - perhaps too much experience in the database world\r\nset too many preconceptions :) I tried to figure it all out with Michel in\r\nIRC ... still not sure it's entirely correct though ...\r\nhttps://gist.github.com/jakcharlton/8000864\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nOn Fri, Dec 20, 2013 at 7:21 PM, coffeemug <notifications@github.com> wrote:\r\n\r\n> Firstly, let me give you the solution to the problem you're running into.\r\n> You can use rethinkdb admin to programmatically control replication,\r\n> sharding, and pinning of shards to specific machines. Here is an example\r\n> session that sets the number of replicas for a table users to 1 in\r\n> datacenter US_WEST:\r\n>\r\n> rethinkdb admin -j HOST:CLUSTER_PORT\r\n> > set replicas users 1 US_WEST\r\n>\r\n> You can also do it non-interactively as follows:\r\n>\r\n> rethinkdb admin -j HOST:CLUSTER_PORT set replicas users 1 US_WEST\r\n>\r\n> Once you create a database of tables for a customer, you just execute\r\n> these commands for each table to get the replication behavior you need.\r\n> There is no need for manual intervention. You can do the same with shards,\r\n> etc. (just start the CLI admin tool and type help -- feel free to ask\r\n> questions if something is unclear).\r\n>\r\n> With the respect to the direction of the product, I agree that the overall\r\n> flow could be nicer. Here are some things we could do:\r\n>\r\n>    1. Make the admin functionality accessible from client drivers to\r\n>    avoid having to call out to a script\r\n>    2. Allow specifying settings on a database level instead of the table\r\n>    level\r\n>    3. Allow the user to specify configuration templates that can be\r\n>    applied to newly created databases/tables\r\n>    4. Add higher level tools that allow automatically adjusting\r\n>    configuration once certain criteria are met (i.e. shard a table once it\r\n>    reaches a certain size)\r\n>\r\n> We will make the experience nicer over time, but we're proceeding with\r\n> caution. Different users have very different requirements, and it's\r\n> extremely difficult to design proper abstractions. In the meantime, you\r\n> could always set things programmatically (as described above).\r\n>\r\n> If you have specific examples of how other tools solve these problems\r\n> well, please let us know, we'd love to learn from them!\r\n>\r\n> \8212\r\n> Reply to this email directly or view it on GitHub<https://github.com/rethinkdb/rethinkdb/issues/1792#issuecomment-30995111>\r\n> .\r\n>"
  , issueCommentId = 30997801
  }