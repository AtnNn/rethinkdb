IssueComment
  { issueCommentUpdatedAt = 2016 (-01) (-27) 00 : 27 : 24 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1410520
        , simpleUserLogin = N "juancampa"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1410520?v=3"
        , simpleUserUrl = "https://api.github.com/users/juancampa"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/175305251"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1716#issuecomment-175305251"
  , issueCommentCreatedAt = 2016 (-01) (-27) 00 : 08 : 40 UTC
  , issueCommentBody =
      "> The best way to get around it is to use compound primary keys and make one of the components the bit of data you'd normally store in a secondary index\r\n\r\nHmm this option sounds worth exploring (let's call it option 3). Let's say I go ahead and create a table ```user``` with primary key ```[r.row('id'), r.row('email')]```. How would I then create a robust query that checks to see if the email exists insert a new one if it doesn't? Using this approach, don't I need to know the ```id``` of the existing user to check if it exists?\r\n\r\nSo far the three options are:\r\n 1. Use a single table: consistency is compromised due to lack of atomicity.\r\n 1. Use two tables: performance is compromised due to join required and data being spread across shards. Lack of atomicity might also be a problem but a minor/recoverable one IMO.\r\n 1. Use a single table with a compound index: **?**\r\n\r\nThanks for the feedback btw. You guys are awesome"
  , issueCommentId = 175305251
  }