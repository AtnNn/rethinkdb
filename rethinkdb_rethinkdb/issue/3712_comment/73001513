IssueComment
  { issueCommentUpdatedAt = 2015 (-02) (-05) 06 : 38 : 20 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 238496
        , simpleUserLogin = N "marchon"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/238496?v=3"
        , simpleUserUrl = "https://api.github.com/users/marchon"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/73001513"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3712#issuecomment-73001513"
  , issueCommentCreatedAt = 2015 (-02) (-05) 06 : 38 : 20 UTC
  , issueCommentBody =
      "If you are doing a dimple memory allocation or object creation in boost -\nwrite a quick 10 line sample that you can compare against 2 versions of\nboost so that you can have a sample test case.  If they behave differently,\nthrow the ball at the makers of the boost library with the quick sample.\n\nIf they do behave the same - then the problem will be in your code.\n\nHope that helps.\n\nG.\n\nOn Thu, Feb 5, 2015 at 1:30 AM, Daniel Mewes <notifications@github.com>\nwrote:\n\n> Valgrind:\n>\n> ==18761== 1,064,825 bytes in 4,600 blocks are definitely lost in loss record 18 of 18\n> ==18761==    at 0x4C2B6CD: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n> ==18761==    by 0x167A714: rmalloc(unsigned long) (utils.cc:235)\n> ==18761==    by 0x156B518: shared_buf_t::create(unsigned long) (shared_buffer.cc:11)\n> ==18761==    by 0x1C2EB34: ql::datum_deserialize(read_stream_t*, ql::datum_t*) (serialize_datum.cc:694)\n> ==18761==    by 0x18A292C: archive_result_t ql::deserialize<(cluster_version_t)4>(read_stream_t*, ql::datum_t*) (serialize_datum.hpp:84)\n> ==18761==    by 0x1A994E5: archive_result_t std::deserialize<(cluster_version_t)4, ql::datum_t>(read_stream_t*, std::vector<ql::datum_t, std::allocator<ql::datum_t> >*) (stl_types.hpp:174)\n> ==18761==    by 0x1C4F366: archive_result_t deserialize<(cluster_version_t)4>(read_stream_t*, batched_insert_t*) (protocol.cc:1283)\n> ==18761==    by 0x1C5F12F: _ZN20variant_deserializerIL17cluster_version_t4ELi2EN5boost7variantI17batched_replace_t16batched_insert_t13point_write_t14point_delete_t15sindex_create_t13sindex_drop_t15sindex_rename_t6sync_t13dummy_write_tNS1_6detail7variant5void_ESE_SE_SE_SE_SE_SE_SE_SE_SE_SE_EEJS4_S5_S6_S7_S8_S9_SA_SB_SE_SE_SE_SE_SE_SE_SE_SE_SE_SE_SE_EE19deserialize_variantEiP13read_stream_tPSF_ (boost_types.hpp:93)\n> ==18761==    by 0x1C5F088: _ZN20variant_deserializerIL17cluster_version_t4ELi1EN5boost7variantI17batched_replace_t16batched_insert_t13point_write_t14point_delete_t15sindex_create_t13sindex_drop_t15sindex_rename_t6sync_t13dummy_write_tNS1_6detail7variant5void_ESE_SE_SE_SE_SE_SE_SE_SE_SE_SE_EEJS3_S4_S5_S6_S7_S8_S9_SA_SB_SE_SE_SE_SE_SE_SE_SE_SE_SE_SE_SE_EE19deserialize_variantEiP13read_stream_tPSF_ (boost_types.hpp:99)\n> ==18761==    by 0x1C57C93: archive_result_t deserialize<(cluster_version_t)4, batched_replace_t, batched_insert_t, point_write_t, point_delete_t, sindex_create_t, sindex_drop_t, sindex_rename_t, sync_t, dummy_write_t, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_>(read_stream_t*, boost::variant<batched_replace_t, batched_insert_t, point_write_t, point_delete_t, sindex_create_t, sindex_drop_t, sindex_rename_t, sync_t, dummy_write_t, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::deta\n>  il::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_>*) (boost_types.hpp:117)\n> ==18761==    by 0x1C4F9B6: archive_result_t deserialize<(cluster_version_t)4>(read_stream_t*, write_t*) (protocol.cc:1298)\n> ==18761==    by 0x19EB616: archive_result_t deserialize<(cluster_version_t)4>(read_stream_t*, master_business_card_t::write_request_t*) (metadata.cc:14)\n>\n> The number of lost bytes seems to grow the longer I'm running the inserts\n> (this was after just ~4500 inserts).\n> I don't get this on v1.15.x, so it's likely a regression.\n> I do however get this even with Boost 1.55.0 (at least on Linux), so I'm\n> not sure how this relates to the Boost version.\n>\n> \8212\n> Reply to this email directly or view it on GitHub\n> <https://github.com/rethinkdb/rethinkdb/issues/3712#issuecomment-73000834>\n> .\n>\n\n\n\n-- \nP THINK BEFORE PRINTING: is it really necessary?\n\nThis e-mail and its attachments are confidential and solely for the\nintended addressee(s). Do not share or use them without approval. If\nreceived in error, contact the sender\nand delete them.\n"
  , issueCommentId = 73001513
  }