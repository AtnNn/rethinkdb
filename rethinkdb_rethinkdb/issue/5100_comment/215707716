IssueComment
  { issueCommentUpdatedAt = 2016 (-04) (-29) 13 : 14 : 47 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 107182
        , simpleUserLogin = N "XayOn"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/107182?v=3"
        , simpleUserUrl = "https://api.github.com/users/XayOn"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/215707716"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/5100#issuecomment-215707716"
  , issueCommentCreatedAt = 2016 (-04) (-29) 13 : 14 : 47 UTC
  , issueCommentBody =
      "Subscribing to this.\r\n\r\n> And yes, the idea was to implement both asynchronous iteration (__aiter__) as well as asynchronous context managers (__aenter__ and __aexit__) .\r\n\r\nThat's really needed right now. I wonder how that'll behave with python3.4's decorated-style coroutines\r\n\r\n> However, since doing nothing to the existing class worked, I'm curious to see of seeing if setting __await__ = __iter__ does the trick.\r\n\r\nI'd avoid this kind of things, they're obscure and make bugs hard to debug."
  , issueCommentId = 215707716
  }