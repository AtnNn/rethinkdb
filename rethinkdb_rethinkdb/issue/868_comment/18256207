IssueComment
  { issueCommentUpdatedAt = 2013 (-05) (-22) 03 : 58 : 11 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1461947
        , simpleUserLogin = N "neumino"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1461947?v=3"
        , simpleUserUrl = "https://api.github.com/users/neumino"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/18256207"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/868#issuecomment-18256207"
  , issueCommentCreatedAt = 2013 (-05) (-22) 03 : 58 : 11 UTC
  , issueCommentBody =
      "`insert_at` should be able to insert an array too (I think it would be useful).\r\n\r\n`delete_at` should be able to do range delete, so we could add the number of element to delete as a second parameter (default value being 1)\r\n\r\nIs it `change_at` or `set_at`? I would prefer `set_at`.\r\n\r\nFor `set_intersection` and `set_union`, what happens if I have redundant values in one array?\r\n\r\nDoes r.expr([1, 2, 3, 1]).contains(1, 1) work?\r\n\r\n`*` is useful. It's a way to return a default array with some constant value.\r\n\r\nCan `index_of` take a second parameter, which is the number of matches to skip?\r\n\r\nCan `count` take a lambda function?\r\n`r.expr([1,2,3,4]).count( function(val) { return val.gt(2) } )` which is sugar for a `filter().count()` too.\r\n\r\nI'm also not a big fan of `push_front` and `push_back`. It sounds like a double queue. Python use `prepend` and `append` if I am not mistaken, so we could just add `prepend` to avoid breaking the API for no obvious reason."
  , issueCommentId = 18256207
  }