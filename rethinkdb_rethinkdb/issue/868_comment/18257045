IssueComment
  { issueCommentUpdatedAt = 2013 (-05) (-22) 04 : 36 : 05 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/18257045"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/868#issuecomment-18257045"
  , issueCommentCreatedAt = 2013 (-05) (-22) 04 : 36 : 05 UTC
  , issueCommentBody =
      "@neumino -- could you explain what you mean by `*`?\r\n\r\n* How about if we add `splice_at` to splice an array into another array at a certain point?  (Making `insert_at` take an array is sort of hard because people might want to insert a literal array as an element.)\r\n* I agree on adding a second optional parameter to `delete_at`, but I think that it should be the end point of a range rather than a number do delete, so that it matches the semantics of `slice`.\r\n* I thought about `set_at`, but I didn't want there to be any confusion about the meaning of a `set` prefix (which we use elsewhere to mean \"this is an operation on a mathematical set\").\r\n* `set_intersection` and `set_union` wouldn't preserve the redundant values.  Slava was telling me earlier that we might actually want `bag_inersection` and `bag_union` as well, which people find useful in the SQL world.\r\n* `r.expr([1,2,3,1]).contains(1,1)` would return true.\r\n* I like the idea of a second argument to `index_of`, but I think it might be more generic and useful if you gave it an index to start searching at rather than a number to skip (the start would default to `0`).\r\n* Making `count` optionally take a function rather than a literal value to search for sounds like a good idea to me.\r\n* The problem with `append` is that it means different things in different languages.  In Python it appends a single element, but in Common Lisp it appends a list of elements.  I would be fine with `prepend`/`append` though; as you note breaking the API is bad."
  , issueCommentId = 18257045
  }