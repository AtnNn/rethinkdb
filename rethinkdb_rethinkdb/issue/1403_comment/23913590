IssueComment
  { issueCommentUpdatedAt = 2013 (-09) (-06) 01 : 31 : 32 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 43867
        , simpleUserLogin = N "jdoliner"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/43867?v=3"
        , simpleUserUrl = "https://api.github.com/users/jdoliner"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/23913590"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1403#issuecomment-23913590"
  , issueCommentCreatedAt = 2013 (-09) (-06) 01 : 31 : 32 UTC
  , issueCommentBody =
      "Also if you have your heart set on yajl I don't think I care as much as you\r\nso you can just pick yajl if you want.\r\nOn Sep 5, 2013 6:01 PM, \"Michael Lucy\" <notifications@github.com> wrote:\r\n\r\n> cJSON isn't just slow because we added that sscanf. Parsing an array seems\r\n> to be roughly quadratic, regardless of whether it's an array of numbers or\r\n> an array of strings (our cJSON only uses sscanf for parsing numbers).\r\n>\r\n> irb(main):3990:0> tm { r.json(([1]*1000).to_json).do(1).run }0.009060884irb(main):3991:0> tm { r.json(([1]*10000).to_json).do(1).run }0.901341708irb(main):3993:0> tm { r.json((['1']*1000).to_json).do(1).run }0.016261804irb(main):3994:0> tm { r.json((['1']*10000).to_json).do(1).run }0.908803813\r\n>\r\n> More importantly, this isn't the first issue we've had with cJSON. We've\r\n> been fixing problems with it for literally years now.\r\n>\r\n> Yajl's build system mostly seems to be there to support installing,\r\n> testing, generating docs, etc. I can compile everything with a 4-line\r\n> Makefile. Our build system is a little beyond my comprehension at this\r\n> point, but I think it would be really easy to fit in. (It's ANSI C, no\r\n> external dependencies.)\r\n>\r\n> I'm open to suggestions for other JSON parsers, but yajl seems pretty good\r\n> to me.\r\n>\r\n> It's also pretty small -- about 4k lines for all the .c and .h files,\r\n> counting the tree logic which we won't be using. That's only about twice\r\n> the size of what cJSON would be if it didn't cram multiple logical lines\r\n> into one actual line.\r\n>\r\n> \8212\r\n> Reply to this email directly or view it on GitHub<https://github.com/rethinkdb/rethinkdb/issues/1403#issuecomment-23912617>\r\n> .\r\n>"
  , issueCommentId = 23913590
  }