IssueComment
  { issueCommentUpdatedAt = 2016 (-09) (-09) 02 : 54 : 05 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 33037
        , simpleUserLogin = N "segphault"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/33037?v=3"
        , simpleUserUrl = "https://api.github.com/users/segphault"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/245804628"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/5494#issuecomment-245804628"
  , issueCommentCreatedAt = 2016 (-09) (-09) 02 : 54 : 05 UTC
  , issueCommentBody =
      "@chrisvariety yep, I'm aware of `additionalProperties`. The suggestion that I was making has to do with how it's handled. When `additionalProperties` is set to false, the default behavior of a schema validator is to say that the object is invalid. What I'd like is an option that makes it so that it will still treat the object as valid but prune the extra properties. This is similar to the data filtering feature in ajv: https://github.com/epoberezkin/ajv#filtering-data Sorry if I wasn't clear!\r\n\r\n@marshall007 that's a fair point, and I can see how using format would simplify portability. On the other hand, I think that publishing schemas that describe the psuedotypes is a more idiomatic approach for JSON schema. Schema $refs can resolve URLs, so we can put an official schema somewhere as a path on rethinkdb.com and most other implementations would hopefully be able to still seamlessly take advantage of it. Granted, I don't know how ubiquitously URL $refs are actually used in practice."
  , issueCommentId = 245804628
  }