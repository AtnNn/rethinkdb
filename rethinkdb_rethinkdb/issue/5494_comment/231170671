IssueComment
  { issueCommentUpdatedAt = 2016 (-07) (-07) 18 : 45 : 04 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 877936
        , simpleUserLogin = N "marshall007"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/877936?v=3"
        , simpleUserUrl = "https://api.github.com/users/marshall007"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/231170671"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/5494#issuecomment-231170671"
  , issueCommentCreatedAt = 2016 (-07) (-07) 18 : 45 : 04 UTC
  , issueCommentBody =
      "@mbroadst and I were discussing this in Slack. We came to the conclusion that it probably makes the most sense to implement something like the `r.schema(...)` term proposed in #5879. As a first pass, I think we should slightly modify that proposal to *only* accept a json-schema and return a function that validates an object/expression. We can perhaps flesh out a fluent API for building schemas, but after discussing things with @mbroadst I think it's better that we start by relying on an existing standard and perhaps build upon that later.\r\n\r\nWe see this as a good first step since it gives us an immediately useful and testable ReQL term. Having a schema primitive on the server also provides a clear path for incorporating schemas elsewhere (i.e. as write hooks, expiration functions, secondary indices, table schemas, etc).\r\n\r\n@danielmewes what are your thoughts on getting something like this in for 2.4.x or 2.5?"
  , issueCommentId = 231170671
  }