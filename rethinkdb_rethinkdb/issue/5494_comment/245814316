IssueComment
  { issueCommentUpdatedAt = 2016 (-09) (-09) 04 : 23 : 18 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 877936
        , simpleUserLogin = N "marshall007"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/877936?v=3"
        , simpleUserUrl = "https://api.github.com/users/marshall007"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/245814316"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/5494#issuecomment-245814316"
  , issueCommentCreatedAt = 2016 (-09) (-09) 04 : 08 : 33 UTC
  , issueCommentBody =
      "@mike-marcacci yea so the issue is that for `date`, `binary`, and `geo` types, it is rare that you'd want to perform client-side validation of the ReQL pseudotype representation. In the case of dates, you're gonna need different behavior in the browser, server-side, and database. The idea is that you should be able to use the exact same json-schema everywhere in your stack and across applications/languages.\r\n\r\n@mbroadst elaborated the point well. The user should be specifying the types they're working with in the client without worrying about how the database represents them internally. Furthermore, `$ref` does not degrade gracefully in terms of client support. You have no real guarantees that your client can side-load named schemas ahead of time or fetch remote schemas (offline, strict `Content-Security` policies, etc).\r\n\r\nBy using `format`, clients have well-defined behavior by default (no-op), unless the user explicitly implements behavior by using a client that supports doing so."
  , issueCommentId = 245814316
  }