IssueComment
  { issueCommentUpdatedAt = 2013 (-12) (-12) 06 : 16 : 09 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/30391857"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1733#issuecomment-30391857"
  , issueCommentCreatedAt = 2013 (-12) (-12) 06 : 16 : 09 UTC
  , issueCommentBody =
      "Wait, no, I was right the first time.\r\n\r\nAlright, here's the breakdown:\r\n* In release mode, e69c7fe seems to be the start of the slowdown (8eaf37a, one of its parents, is way faster).  I think the concurrent traversal code broke efficient count.  Count is about 3x slower after this merge.\r\n* In debug mode, the biggest hit to count is Daniel's change to make backtraces span coroutine boundaries.  This change results in about a 5x slowdown, but it doesn't matter because it's in debug mode.  (This is why I was confused.)\r\n\r\n@srh -- could you look into making the concurrent traversal code faster for `count`, when you get a chance?"
  , issueCommentId = 30391857
  }