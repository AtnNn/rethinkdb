IssueComment
  { issueCommentUpdatedAt = 2013 (-02) (-26) 00 : 07 : 15 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/14084703"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/375#issuecomment-14084703"
  , issueCommentCreatedAt = 2013 (-02) (-26) 00 : 07 : 15 UTC
  , issueCommentBody =
      "The best way I can describe it is that it doesn't seem very databas-y to me. For an extreme example, suppose we created a `Random` type that returned a random number every time it's evaluated. It would be perfectly reasonable to do that and store it in data structures in a programming language, but it would be very strange to store it in a database. Default dicts seem to have a similar smell to me.\r\n\r\nIn the SQL world, if you wanted to do this kind of thing, you'd specify it in the schema. In ReQL that would probably be far too restricting, but I think there may be better ways of accomplishing what we want here that are more consistent with the \"database\" feel. For example, if we allowed \"records\" (basically, user defined structs), I think it would be perfectly sensible to enable default values to construct records. But it seems oddly strange and confusing to do it with arbitrary dicts. E.g. (obviously making up syntax as I go along):\r\n\r\n```\r\nr.defrecord('user', { name: '', age: null, country: 'none' })\r\n```\r\n\r\nThis seems much nicer to me than arbitrary default dicts. \r\n\r\nJust to clarify, I'm not categorically against the idea. I just have an odd feeling about it, and I think that there is some knowledge here we might be missing that's worth exploring. "
  , issueCommentId = 14084703
  }