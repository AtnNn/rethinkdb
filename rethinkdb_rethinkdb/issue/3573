Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2016 (-04) (-29) 22 : 46 : 43 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/3573/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/3573"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "fef2c0"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/JavaScript%20/%20Coffee"
          , labelName = "JavaScript / Coffee"
          }
      , IssueLabel
          { labelColor = "fef2c0"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/Python"
          , labelName = "Python"
          }
      , IssueLabel
          { labelColor = "fef2c0"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/Ruby"
          , labelName = "Ruby"
          }
      ]
  , issueNumber = 3573
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 17879
        , simpleUserLogin = N "ravi"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/17879?v=3"
        , simpleUserUrl = "https://api.github.com/users/ravi"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Configurable timeout for queries"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/3573"
  , issueCreatedAt = 2015 (-01) (-15) 21 : 19 : 40 UTC
  , issueBody =
      Just
        "It would be nice if `r....run()` could take a timeout parameter, or have the ability to configure a query timeout parameter at connect/init time. I had a real scenario where a hosting provider's NAT table (on a switch) was periodically flushing out idle entries, and RethinkDB protocol packets were being silently dropped (arguably the switch should have sent an ICMP or IP error back, but it is what it is). In this case, TCP on the client host was attempting retransmissions with backoffs, until the retransmission attempts crossed a system threshold after minutes of retries, causing no response at the app layer. So the app sends a query, and the callback is called many, many minutes (10+) later when TCP gives up. Some way to specify a timeout (in seconds) for Rethink queries would make it easier to handle such cases.\n\nMy particular use case is JavaScript on NodeJS.\n"
  , issueState = "open"
  , issueId = Id 54505706
  , issueComments = 4
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 882
          , milestoneNumber = 2
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone are not an immediate priority, and will be periodically revisited. When we decide to work on an issue in backlog, we'll move it to next."
          , milestoneTitle = "backlog"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/2"
          , milestoneCreatedAt = 2012 (-11) (-11) 14 : 16 : 11 UTC
          , milestoneState = "open"
          }
  }