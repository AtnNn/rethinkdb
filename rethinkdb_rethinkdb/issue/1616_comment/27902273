IssueComment
  { issueCommentUpdatedAt = 2013 (-11) (-06) 18 : 56 : 55 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/27902273"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1616#issuecomment-27902273"
  , issueCommentCreatedAt = 2013 (-11) (-06) 18 : 56 : 41 UTC
  , issueCommentBody =
      "@neumino: Hmm that could play a role here. Yes, I only looked at them in the web ui.\r\nHowever if stats timed out, wouldn't both reads and writes go to 0 at the same times? This does not seem to be the case here.\r\n\r\nOn a different note, I looked at the latencies (in seconds) reported by the stress client for the different operations and the one of the x_get_all workload (query by secondary index followed by a group_by) looks pretty odd:\r\n```\r\n1383763985.259: 0.732618\r\n1383763973.446: 13.291648\r\n1383763986.738: 0.050545\r\n1383763986.790: 0.369551\r\n1383763987.161: 1.181917\r\n1383763988.344: 0.320667\r\n1383763988.665: 0.098656\r\n1383763988.765: 0.100740\r\n1383763988.867: 0.017548\r\n1383763974.460: 15.176574\r\n1383763989.638: 0.045990\r\n1383763975.294: 14.806022\r\n1383763990.108: 0.264458\r\n1383763975.537: 15.620439\r\n1383763976.509: 14.693131\r\n1383763977.769: 14.386821\r\n1383763981.740: 14.033709\r\n1383763995.775: 0.064910\r\n1383763995.842: 0.104394\r\n1383763995.947: 0.030863\r\n```\r\nThe other types of operations seem ok relative to this, even though point reads seem a big slow as well (~40 ms). They were definitely faster when I first started running the workload."
  , issueCommentId = 27902273
  }