Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2016 (-03) (-11) 00 : 52 : 37 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/2692/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/2692"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "e10c02"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/pr:high"
          , labelName = "pr:high"
          }
      , IssueLabel
          { labelColor = "0052cc"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:ReQL_proposal"
          , labelName = "tp:ReQL_proposal"
          }
      ]
  , issueNumber = 2692
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueTitle =
      "ReQL semi-proposal: extending selections to objects"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/2692"
  , issueCreatedAt = 2014 (-07) (-11) 20 : 17 : 13 UTC
  , issueBody =
      Just
        "There is a whole class of document manipulation tasks that are extremely frustrating to perform in ReQL. Consider the following example document:\n\n``` py\n{\n  # primary key, a db_name/table_name pair; named \"table\"\n  \"table\": \"db_name.table_name_1\",\n\n  # list of shards for the table\n  \"shards\": [\n    {\n      # shard name\n      name: \"shard1\",\n\n      # list of replicas; must be the same length across all shards;\n      # servers are specified by name\n      \"replicas\": [\"m1\", \"m2\"],\n\n      # priority list of directors; must be a non-empty subset of replicas;\n      # this field may be omitted, in which case the system just uses the\n      # replica list above\n      \"director_candidates\": [\"m2\"]\n    },\n    {\n      # shard name\n      name: \"shard2\",\n\n      # list of replicas; must be the same length across all shards;\n      # servers are specified by name\n      \"replicas\": [\"m1\", \"m2\"],\n\n      # priority list of directors; must be a non-empty subset of replicas;\n      # this field may be omitted, in which case the system just uses the\n      # replica list above\n      \"director_candidates\": [\"m2\"]\n    }\n  ]\n}\n```\n\nSuppose I'd like to change the second replica in `shard2` from `m2` to `m3`. Doing that in ReQL right now is really, really, really hard.\n\nI propose introducing a concept of subobject selections, that would allow performing this operation as follows:\n\n``` py\nr.table('foo')\n  .get(doc_id)('shards')\n  .filter({ 'name': 'shard2'})('replicas').nth(1)\n  .update('m3')\n```\n\nCommands like `get_field`, `pluck`, `nth`, and `filter` (called on selections of objects or arrays) would return subobject selections that could then be modified via `update`, `delete`, and `replace` directly. This is absolutely beautiful because I could incrementally build up a query for precisely the element I want, and then change it by tacking on a mutable command.\n\nSome open questions I can think of:\n- How do we make this work with our type system? What are the edge cases I didn't think through?\n- This introduces a weird duality in commands -- if the object above isn't a document in the table and is passed via `r.expr`, the code to return a new object with the second replica of `shard2` modified is dramatically different (and much more complicated) from the code if the object is a document in the table. Is there anything we can do to unify these two use cases so the code looks similar?\n\nRelated to (and possibly supersedes) #2056.\n"
  , issueState = "open"
  , issueId = Id 37693664
  , issueComments = 19
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 268
          , milestoneNumber = 41
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone will be revisited after each major release during the planning stage for the major release after it. They will be moved to a specific release milestone if chosen for that release."
          , milestoneTitle = "subsequent"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/41"
          , milestoneCreatedAt = 2013 (-06) (-30) 07 : 32 : 52 UTC
          , milestoneState = "open"
          }
  }