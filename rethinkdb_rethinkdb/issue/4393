Issue
  { issueClosedAt = Just 2015 (-07) (-28) 23 : 00 : 09 UTC
  , issueUpdatedAt = 2015 (-07) (-28) 23 : 00 : 09 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4393/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/4393"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "fbda04"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/st:review"
          , labelName = "st:review"
          }
      , IssueLabel
          { labelColor = "e102d8"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:bug"
          , labelName = "tp:bug"
          }
      ]
  , issueNumber = 4393
  , issueAssignee =
      Just
        SimpleUser
          { simpleUserId = Id 1777134
          , simpleUserLogin = N "mlucy"
          , simpleUserAvatarUrl =
              "https://avatars.githubusercontent.com/u/1777134?v=3"
          , simpleUserUrl = "https://api.github.com/users/mlucy"
          , simpleUserType = OwnerUser
          }
  , issueUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Changefeed on sharded table crashes"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4393"
  , issueCreatedAt = 2015 (-06) (-12) 22 : 11 : 20 UTC
  , issueBody =
      Just
        "On `next` I created a table with a couple of documents, and then sharded it to two shards across two servers.\n\nEvery time I run `r.table(...).changes()` I'm getting this crash on the parsing server:\n\n```\nerror: Error in src/rdb_protocol/protocol.cc at line 587:\nerror: Guarantee failed: [pair.second] \nerror: Backtrace:\nerror: Fri Jun 12 15:09:42 2015\n\n       1: format_backtrace(bool) at backtrace.cc:214\n       2: report_fatal_error(char const*, int, char const*, ...) at errors.cc:83\n       3: unshard_stamps(std::vector<changefeed_stamp_response_t*, std::allocator<changefeed_stamp_response_t*> > const&, changefeed_stamp_response_t*) at protocol.cc:587\n       4: rdb_r_unshard_visitor_t::operator()(changefeed_stamp_t const&) at protocol.cc:1234\n       5: read_t::unshard(read_response_t*, unsigned long, read_response_t*, rdb_context_t*, signal_t*) const at variant.hpp:832\n       6: void table_query_client_t::dispatch_immediate_op<read_t, fifo_enforcer_sink_t::exit_read_t, read_response_t>(void (primary_query_client_t::*)(fifo_enforcer_sink_t::exit_read_t*), void (primary_query_client_t::*)(read_t const&, read_response_t*, order_token_t, fifo_enforcer_sink_t::exit_read_t*, signal_t*), read_t const&, read_response_t*, order_token_t, signal_t*) at stl_vector.h:350\n       7: table_query_client_t::read(read_t const&, read_response_t*, order_token_t, signal_t*) at table_query_client.cc:93\n       8: ql::changefeed::range_sub_t::to_stream(ql::env_t*, std::string, namespace_interface_t*, mailbox_addr_t<void (ql::changefeed::stamped_msg_t)> const&, counted_t<ql::datum_stream_t>, scoped_ptr_t<ql::changefeed::subscription_t>&&, ql::backtrace_id_t) at changefeed.cc:3097\n       9: ql::changefeed::client_t::new_stream(ql::env_t*, counted_t<ql::datum_stream_t>, ql::datum_t const&, bool, uuid_u const&, ql::backtrace_id_t, std::string const&, boost::variant<ql::changefeed::keyspec_t::range_t, ql::changefeed::keyspec_t::limit_t, ql::changefeed::keyspec_t::point_t, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_> const&) at changefeed.cc:2994\n       10: real_table_t::read_changes(ql::env_t*, counted_t<ql::datum_stream_t>, ql::datum_t const&, bool, boost::variant<ql::changefeed::keyspec_t::range_t, ql::changefeed::keyspec_t::limit_t, ql::changefeed::keyspec_t::point_t, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_>&&, ql::backtrace_id_t, std::string const&) at counted.hpp:60\n       11: ql::changes_term_t::eval_impl(ql::scope_env_t*, ql::args_t*, ql::eval_flags_t) const at vector.tcc:95\n       12: ql::op_term_t::term_eval(ql::scope_env_t*, ql::eval_flags_t) const at scoped.hpp:70\n       13: ql::runtime_term_t::eval(ql::scope_env_t*, ql::eval_flags_t) const at scoped.hpp:25\n       14: ql::query_cache_t::ref_t::run(ql::env_t*, Response*) at query_cache.cc:278\n       15: ql::query_cache_t::ref_t::fill_response(Response*) at query_cache.cc:236\n       16: ql::run(ql::query_id_t&&, ql::protob_t<Query>, Response*, ql::query_cache_t*, signal_t*) at term.cc:264\n       17: rdb_query_server_t::run_query(ql::query_id_t&&, ql::protob_t<Query> const&, Response*, ql::query_cache_t*, signal_t*) at counted.hpp:60\n       18: query_server_t::handle(http_req_t const&, http_res_t*, signal_t*) at protob.cc:759\n       19: routing_http_app_t::handle(http_req_t const&, http_res_t*, signal_t*) at basic_string.h:288\n       20: routing_http_app_t::handle(http_req_t const&, http_res_t*, signal_t*) at basic_string.h:288\n       21: http_server_t::handle_conn(scoped_ptr_t<linux_tcp_conn_descriptor_t> const&, auto_drainer_t::lock_t) at basic_string.h:542\n       22: std::_Function_handler<void (scoped_ptr_t<linux_tcp_conn_descriptor_t>&), boost::_bi::bind_t<void, boost::_mfi::mf2<void, http_server_t, scoped_ptr_t<linux_tcp_conn_descriptor_t> const&, auto_drainer_t::lock_t>, boost::_bi::list3<boost::_bi::value<http_server_t*>, boost::arg<1>, boost::_bi::value<auto_drainer_t::lock_t> > > >::_M_invoke(std::_Any_data const&, scoped_ptr_t<linux_tcp_conn_descriptor_t>&) at mem_fn_template.hpp:280\n       23: linux_nonthrowing_tcp_listener_t::handle(int) at scoped.hpp:70\n       24: coro_t::run() at coroutines.cc:214\nerror: Exiting.\n```\n"
  , issueState = "closed"
  , issueId = Id 87865093
  , issueComments = 6
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 316661
                , simpleUserLogin = N "timmaxw"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/316661?v=3"
                , simpleUserUrl = "https://api.github.com/users/timmaxw"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 0
          , milestoneNumber = 95
          , milestoneClosedIssues = 217
          , milestoneDescription =
              Just "To-do list before shipping auto-failover"
          , milestoneTitle = "2.1"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/95"
          , milestoneCreatedAt = 2015 (-03) (-04) 21 : 09 : 42 UTC
          , milestoneState = "closed"
          }
  }