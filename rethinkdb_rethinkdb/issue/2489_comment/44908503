IssueComment
  { issueCommentUpdatedAt = 2014 (-06) (-03) 00 : 47 : 26 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/44908503"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2489#issuecomment-44908503"
  , issueCommentCreatedAt = 2014 (-06) (-03) 00 : 47 : 26 UTC
  , issueCommentBody =
      "Here's some Valgrind output that doesn't look too good.\r\nIt suggests that the issue could actually be dependent on the exact data being imported. The data I'm using for this test contains a lot of Unicode characters. Maybe that's what triggers the problem.\r\n\r\n```\r\n==13564== Thread 12:\r\n==13564== Invalid write of size 1\r\n==13564==    at 0x1959129: parse_string(cJSON*, char const*) (cJSON.cc:191)\r\n==13564==    by 0x1956961: parse_value(cJSON*, char const*) (cJSON.cc:280)\r\n==13564==    by 0x19597B1: parse_object(cJSON*, char const*) (cJSON.cc:445)\r\n==13564==    by 0x1956A02: parse_value(cJSON*, char const*) (cJSON.cc:283)\r\n==13564==    by 0x1959487: parse_array(cJSON*, char const*) (cJSON.cc:327)\r\n==13564==    by 0x19569D9: parse_value(cJSON*, char const*) (cJSON.cc:282)\r\n==13564==    by 0x19567BB: cJSON_Parse (cJSON.cc:265)\r\n==13564==    by 0x19DA5A9: ql::json_term_t::eval_impl(ql::scope_env_t*, ql::eval_flags_t) (json.cc:14)\r\n==13564==    by 0x19C6431: ql::op_term_t::term_eval(ql::scope_env_t*, ql::eval_flags_t) (op.cc:234)\r\n==13564==    by 0x1B2728A: ql::term_t::eval(ql::scope_env_t*, ql::eval_flags_t) (term.cc:377)\r\n==13564==    by 0x19C5305: ql::args_t::eval_arg(ql::scope_env_t*, unsigned long, ql::eval_flags_t) (op.cc:169)\r\n==13564==    by 0x19C5E1D: ql::op_term_t::arg(ql::scope_env_t*, unsigned long, ql::eval_flags_t) (op.cc:215)\r\n==13564==  Address 0x1d1585cf is 1 bytes before a block of size 28 alloc'd\r\n==13564==    at 0x4C2B6CD: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==13564==    by 0x1BF2ED4: rmalloc(unsigned long) (utils.cc:211)\r\n==13564==    by 0x1958D62: parse_string(cJSON*, char const*) (cJSON.cc:145)\r\n==13564==    by 0x1956961: parse_value(cJSON*, char const*) (cJSON.cc:280)\r\n==13564==    by 0x19597B1: parse_object(cJSON*, char const*) (cJSON.cc:445)\r\n==13564==    by 0x1956A02: parse_value(cJSON*, char const*) (cJSON.cc:283)\r\n==13564==    by 0x1959487: parse_array(cJSON*, char const*) (cJSON.cc:327)\r\n==13564==    by 0x19569D9: parse_value(cJSON*, char const*) (cJSON.cc:282)\r\n==13564==    by 0x19567BB: cJSON_Parse (cJSON.cc:265)\r\n==13564==    by 0x19DA5A9: ql::json_term_t::eval_impl(ql::scope_env_t*, ql::eval_flags_t) (json.cc:14)\r\n==13564==    by 0x19C6431: ql::op_term_t::term_eval(ql::scope_env_t*, ql::eval_flags_t) (op.cc:234)\r\n==13564==    by 0x1B2728A: ql::term_t::eval(ql::scope_env_t*, ql::eval_flags_t) (term.cc:377)\r\n==13564== \r\n==13564== Invalid write of size 1\r\n==13564==    at 0x195915B: parse_string(cJSON*, char const*) (cJSON.cc:192)\r\n==13564==    by 0x1956961: parse_value(cJSON*, char const*) (cJSON.cc:280)\r\n==13564==    by 0x19597B1: parse_object(cJSON*, char const*) (cJSON.cc:445)\r\n==13564==    by 0x1956A02: parse_value(cJSON*, char const*) (cJSON.cc:283)\r\n==13564==    by 0x1959487: parse_array(cJSON*, char const*) (cJSON.cc:327)\r\n==13564==    by 0x19569D9: parse_value(cJSON*, char const*) (cJSON.cc:282)\r\n==13564==    by 0x19567BB: cJSON_Parse (cJSON.cc:265)\r\n==13564==    by 0x19DA5A9: ql::json_term_t::eval_impl(ql::scope_env_t*, ql::eval_flags_t) (json.cc:14)\r\n==13564==    by 0x19C6431: ql::op_term_t::term_eval(ql::scope_env_t*, ql::eval_flags_t) (op.cc:234)\r\n==13564==    by 0x1B2728A: ql::term_t::eval(ql::scope_env_t*, ql::eval_flags_t) (term.cc:377)\r\n==13564==    by 0x19C5305: ql::args_t::eval_arg(ql::scope_env_t*, unsigned long, ql::eval_flags_t) (op.cc:169)\r\n==13564==    by 0x19C5E1D: ql::op_term_t::arg(ql::scope_env_t*, unsigned long, ql::eval_flags_t) (op.cc:215)\r\n==13564==  Address 0x1d1585ce is 2 bytes before a block of size 28 alloc'd\r\n==13564==    at 0x4C2B6CD: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==13564==    by 0x1BF2ED4: rmalloc(unsigned long) (utils.cc:211)\r\n==13564==    by 0x1958D62: parse_string(cJSON*, char const*) (cJSON.cc:145)\r\n==13564==    by 0x1956961: parse_value(cJSON*, char const*) (cJSON.cc:280)\r\n==13564==    by 0x19597B1: parse_object(cJSON*, char const*) (cJSON.cc:445)\r\n==13564==    by 0x1956A02: parse_value(cJSON*, char const*) (cJSON.cc:283)\r\n==13564==    by 0x1959487: parse_array(cJSON*, char const*) (cJSON.cc:327)\r\n==13564==    by 0x19569D9: parse_value(cJSON*, char const*) (cJSON.cc:282)\r\n==13564==    by 0x19567BB: cJSON_Parse (cJSON.cc:265)\r\n==13564==    by 0x19DA5A9: ql::json_term_t::eval_impl(ql::scope_env_t*, ql::eval_flags_t) (json.cc:14)\r\n==13564==    by 0x19C6431: ql::op_term_t::term_eval(ql::scope_env_t*, ql::eval_flags_t) (op.cc:234)\r\n==13564==    by 0x1B2728A: ql::term_t::eval(ql::scope_env_t*, ql::eval_flags_t) (term.cc:377)\r\n==13564==\r\n```"
  , issueCommentId = 44908503
  }