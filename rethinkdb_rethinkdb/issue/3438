Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2014 (-12) (-18) 20 : 01 : 38 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/3438/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/3438"
  , issueClosedBy = Nothing
  , issueLabels = []
  , issueNumber = 3438
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 265071
        , simpleUserLogin = N "kofalt"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/265071?v=3"
        , simpleUserUrl = "https://api.github.com/users/kofalt"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "How to sanitize untrusted JSON?"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/3438"
  , issueCreatedAt = 2014 (-12) (-14) 21 : 53 : 59 UTC
  , issueBody =
      Just
        "Suppose I have an application (in this case using the [go-rethink](https://github.com/dancannon/gorethink) driver) that wants to let a user update arbitrary fields of a document. The server accepts a JSON object from the client and passes it off to an `Update` query, or something similar.\n\nAs the RDB protocol is also JSON, what assertions do I need to verify that untrusted input is not an RDB stanza - basically, the same problem experienced by SQL injection? According to the [wire protocol spec](http://rethinkdb.com/docs/driver-spec/) a simple query might serialize as `[COUNT, [[TABLE, ['test']]]] = [43, [[15, ['test']]]]`, which seems to indicate a creative mind could indeed get up to something malicious here.\n\nResults of some quick research:\n- A [list discussion from 2013](https://groups.google.com/d/topic/rethinkdb/nBvDq-nuR34/discussion) that has some good comments by @mlucy\n- Issue [rethinkdb/docs #117](https://github.com/rethinkdb/docs/issues/117) by @coffeemug, noting a need for just this kind of documentation :)\n\nSince I'm using a strongly-typed language, I have the option of coercing all inputs to structs, which presumably makes my job a lot easier, but makes cases like `Update` harder (where maybe some fields should not be updated, etc). This also enforces a typed schema for that table, which arguably reduces the value of a document store like rethink.\n\nSome pragmatic advice would be greatly appreciated. \n\nMaybe this warrants an `r.untrusted(object)` API call that returns a copy of the input that is safe to pass to all other RDB query functions? Hopefully with a clear set of test cases to easily determine if third-party drivers are compliant?\n"
  , issueState = "open"
  , issueId = Id 51933340
  , issueComments = 15
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 882
          , milestoneNumber = 2
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone are not an immediate priority, and will be periodically revisited. When we decide to work on an issue in backlog, we'll move it to next."
          , milestoneTitle = "backlog"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/2"
          , milestoneCreatedAt = 2012 (-11) (-11) 14 : 16 : 11 UTC
          , milestoneState = "open"
          }
  }