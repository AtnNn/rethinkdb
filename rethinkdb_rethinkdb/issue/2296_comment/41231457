IssueComment
  { issueCommentUpdatedAt = 2014 (-04) (-24) 00 : 38 : 17 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 297060
        , simpleUserLogin = N "nviennot"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/297060?v=3"
        , simpleUserUrl = "https://api.github.com/users/nviennot"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/41231457"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2296#issuecomment-41231457"
  , issueCommentCreatedAt = 2014 (-04) (-24) 00 : 38 : 17 UTC
  , issueCommentBody =
      "That would not work (it's a single global variable in Oj: https://github.com/ohler55/oj/blob/master/ext/oj/oj.c#L66)\r\n\r\nAbout the Time.to_json() hack, I would leave the method hijacked. I would test if we are in our json dump by setting a variable in the TLS `Thread.current[:rethinkdb_json_processing] = true` and testing for that in the `to_json()` method. This is sad.\r\nAlso, I'm not super happy about `to_json` in general, because lots of classes respond to it. Including application models. (User.first.to_json for example). If someone writes some RQL with User.first instead of User.first.id, the RQL will compile to JSON. But it's perhaps complete garbage.\r\nBtw, why would you use the RQL pseudo time object, when the JSON time object is sufficient?"
  , issueCommentId = 41231457
  }