IssueComment
  { issueCommentUpdatedAt = 2015 (-04) (-22) 08 : 48 : 59 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 393259
        , simpleUserLogin = N "gebrits"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/393259?v=3"
        , simpleUserUrl = "https://api.github.com/users/gebrits"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/95080255"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/4083#issuecomment-95080255"
  , issueCommentCreatedAt = 2015 (-04) (-22) 08 : 48 : 59 UTC
  , issueCommentBody =
      "hi @danielmewes. \r\n\r\nbeware: braindump ahead.\r\n\r\nYep, events would be generated by an application. In the basis storing them in 'just' as table might work. What's different of course is that events are timestamped and always need to be returned in chronological order, nothing else. Moreover they're generally small and their payloads may differ widely. Given that, perhaps storing them in a table would: \r\n\r\n* give too much overhead? Events wouldn't need to have keys, which would need to sit in RAM (if I;m correct to assume to happens with RethinkDB tables)\r\n* be not as performant as possible, since a lot of processing of course happens in indexing, etc. \r\n\r\nNot to say that it couldn't work, but could a potential eventstore perhaps feed of some lower RethinkDb construct? I.e.: the write-ahead log? In essence the write-ahead log itself (were it to store events) would by definition keep the ordered structure of events. Updating subscribers would 'simply' be replaying the write-ahead log (sequential data access etc.) Of course it's not as simple as that, but I'm just braindumping here. \r\n\r\nAs for the changefeeds, I believe I've read somewhere (an open issue?) that it may soon be possible to replay changefeeds? How would this work, could we, say, replay starting from a specific timestamp? "
  , issueCommentId = 95080255
  }