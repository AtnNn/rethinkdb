IssueComment
  { issueCommentUpdatedAt = 2015 (-07) (-22) 21 : 44 : 16 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 7431361
        , simpleUserLogin = N "larkost"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/7431361?v=3"
        , simpleUserUrl = "https://api.github.com/users/larkost"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/123783441"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/4458#issuecomment-123783441"
  , issueCommentCreatedAt = 2015 (-07) (-22) 16 : 38 : 34 UTC
  , issueCommentBody =
      "We might want a fuzzer, but I think that the first tests should be determinate cases that cover all of the cases we think need covering more deterministically. Thinking out-loud about cases we want tested:\r\n1. Simple change to replication to cause a backfill (nothing special)\r\n2. Change replication setting to backfill from two servers simultaneously.\r\n3. Same as #2 but with non-contiguous regions.\r\n4. Shard the data with each shard on a different server, confirm that they get their data ranges.\r\n5. Kill a backfilling server then start it again, ensure it completes backfilling\r\n6. Kill the backfill source server, make sure another replica picks up to complete backfill\r\n7. Change primary shardholder repeatedly during backfill\r\n8. Make a backfilling server the primary shareholder for the shard it is backfilling\r\n9. Same as all above above, but with inserts, updates, and deletions (subclass test suite)\r\n"
  , issueCommentId = 123783441
  }