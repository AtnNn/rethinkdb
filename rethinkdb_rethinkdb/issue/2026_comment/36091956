IssueComment
  { issueCommentUpdatedAt = 2014 (-02) (-26) 05 : 22 : 32 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/36091956"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2026#issuecomment-36091956"
  , issueCommentCreatedAt = 2014 (-02) (-26) 05 : 22 : 08 UTC
  , issueCommentBody =
      "Currently our rule is that functions which take objects are polymorphic on streams of objects.  We could extend this rule to apply to function which take strings, too, but I'm not 100% sure that's a good idea.\r\n\r\nAs an aside, is there a reason why we've settled on this word counting thing as our canonical mapreduce example?  It's:\r\n* Complicated (try explaining even the second query to people).\r\n* Awkward (this is the third time someone has proposed changing ReQL's semantics just to support it).\r\n* Not a normal use-case.\r\n\r\nWhy not do something simple like:\r\n```ruby\r\nr.table('games').group('user').avg('score')\r\n```\r\n\r\nThat shows off the feature, and is a much more common type of query."
  , issueCommentId = 36091956
  }