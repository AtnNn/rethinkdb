IssueComment
  { issueCommentUpdatedAt = 2015 (-12) (-14) 20 : 59 : 41 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 67937
        , simpleUserLogin = N "encryptio"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/67937?v=3"
        , simpleUserUrl = "https://api.github.com/users/encryptio"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/164557595"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/5188#issuecomment-164557595"
  , issueCommentCreatedAt = 2015 (-12) (-14) 20 : 59 : 41 UTC
  , issueCommentBody =
      "I'd rather keep them separate. Merging `add`/`initial` and `remove`/`uninitial` makes the code to switch over types unclean again; all the languages I can think of have good support for multiple `case`s going to one codepath, but very few have the ability to switch on multiple expressions at the same time.\r\n\r\nAlso, handling `uninitial` values incorrectly is something that can still happen even if we merge it with `remove`. In either case, you'll have problems with people writing code without reading the documentation and only relying on trial and error. E.g. Python code would be buggy even in the case where they really do want to handle `uninitial` as if it were `remove` with `None`, but accessing a nonexistent key in a `dict` with `[]` raises a `KeyError`.\r\n\r\nOverall, I think merging any event types is too subtle to be worth it. Having them separate makes people at least stop and consider that they _might_ want to do something different, and/or read the docs to clarify things."
  , issueCommentId = 164557595
  }