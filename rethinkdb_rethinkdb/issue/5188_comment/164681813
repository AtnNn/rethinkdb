IssueComment
  { issueCommentUpdatedAt = 2015 (-12) (-15) 08 : 22 : 49 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/164681813"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/5188#issuecomment-164681813"
  , issueCommentCreatedAt = 2015 (-12) (-15) 08 : 22 : 49 UTC
  , issueCommentBody =
      "I mean, I don't think you should be *required* to treat `old_val` and `new_val` as separate events, I just think that's the right design decision most of the time and the API should push people in that direction.  (It's that \"pit of success\" thing @coffeemug is always talking about -- they write code that treats `new_val` and `old_val` a certain way because it's easier, then it turns out to be correct later.)\r\n\r\nAnyway, after thinking about it for a bit I don't actually feel that strongly on it, but my current (weak) preference ordering is:\r\n* 5 types that default to off.\r\n* 3 types that default to on (`uninitial` is turned into `remove` and `initial` is turned into `add`).\r\n* 5 types that default to on.\r\n* 3 types that default to off (I think nobody wants this one)."
  , issueCommentId = 164681813
  }