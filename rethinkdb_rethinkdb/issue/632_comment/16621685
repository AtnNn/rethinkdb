IssueComment
  { issueCommentUpdatedAt = 2013 (-04) (-19) 00 : 40 : 06 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 646357
        , simpleUserLogin = N "wmrowan"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/646357?v=3"
        , simpleUserUrl = "https://api.github.com/users/wmrowan"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/16621685"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/632#issuecomment-16621685"
  , issueCommentCreatedAt = 2013 (-04) (-19) 00 : 40 : 06 UTC
  , issueCommentBody =
      "Is that native Ruby behavior? What does ruby do when you try to create an\r\nobject with a non-string key? I believe that JS does something like what\r\nyou're describing automatically for non-string keys while Python invokes a\r\nhashing function on whatever you give it.\r\n\r\nI'd rather implement the most restrictive behavior for RQL (simply erroring\r\non non-string keys) so that users are forced to string serialize their\r\nkeys. This reduces the chance for weird behavior relating to how different\r\nlanguages choose to serialize non-string keys.\r\n\r\n\r\nOn Thu, Apr 18, 2013 at 5:26 PM, Michael Lucy <notifications@github.com>wrote:\r\n\r\n> The Ruby driver tries to convert the keys of an object to a string by\r\n> calling to_s. So :a turns into \"a\" and 1 turns into \"1\". Anything that\r\n> doesn't support to_s will raise the appropriate exception. (We might want\r\n> more restrictive behavior here; what to you think @coffeemug<https://github.com/coffeemug>\r\n> ?)\r\n>\r\n> \8212\r\n> Reply to this email directly or view it on GitHub<https://github.com/rethinkdb/rethinkdb/issues/632#issuecomment-16621257>\r\n> .\r\n>"
  , issueCommentId = 16621685
  }