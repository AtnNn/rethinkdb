IssueComment
  { issueCommentUpdatedAt = 2013 (-03) (-29) 19 : 59 : 20 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 646357
        , simpleUserLogin = N "wmrowan"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/646357?v=3"
        , simpleUserUrl = "https://api.github.com/users/wmrowan"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/15657939"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/548#issuecomment-15657939"
  , issueCommentCreatedAt = 2013 (-03) (-29) 19 : 59 : 20 UTC
  , issueCommentBody =
      "Unfortunately (as I think I noted somewhere recently) any attempt at static type checking will both be difficult and really not buy you very much. In this instance it is possible to say that as table rows are objects and the base is a number there is clearly a type error detectable at compile time. Beyond such a case though there is nothing we can do. What if the base is an object with a count field that we then try to sum? There is a type error if the table's implicit schema doesn't contain a number field called 'count' but this we can't verify at compile time forcing us to rely on runtime checking on the server anyway.\r\n\r\nI again strongly agree with the suggestion that we get rid of the base. I still can't see how it's useful beyond the 0-length stream case and here there are at least two clear ways to deal with it.\r\n\r\n```python\r\nstream.union([base]).reduce(...)\r\nstream.reduce(...).default(base)\r\n```"
  , issueCommentId = 15657939
  }