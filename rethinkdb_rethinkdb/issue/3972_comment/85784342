IssueComment
  { issueCommentUpdatedAt = 2015 (-03) (-25) 02 : 04 : 38 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1461947
        , simpleUserLogin = N "neumino"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1461947?v=3"
        , simpleUserUrl = "https://api.github.com/users/neumino"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/85784342"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3972#issuecomment-85784342"
  , issueCommentCreatedAt = 2015 (-03) (-25) 02 : 04 : 38 UTC
  , issueCommentBody =
      "It's actually quite solid.\r\n\r\nIt's lacking new things like geospatial operations and changefeeds, but it's quite complete for all usual operations (filter, get, update, replace, delete, map, merge etc.).\r\nI think the only thing that was not polished enough was the distinction between stream and sequence, but that's kind of an advanced consideration, and it will go away with https://github.com/rethinkdb/rethinkdb/issues/2721\r\n\r\nTo hook it with meteor, you basically just need to add a `changes()` at the end of the query. Last time I talked with @Slava, it was really little work to hook the thing together (but then I went on polishing more reqlite instead).\r\n\r\n@pinouchon -- if you are familiar with meteorjs and can hook reqlite, rethinkdb, I can prioritize reqlite over thinky/rethinkdbdash but as for now, the implementation is quite enough to be on par (and actually more powerful) than what meteor does with Mongo."
  , issueCommentId = 85784342
  }