IssueComment
  { issueCommentUpdatedAt = 2014 (-08) (-12) 23 : 19 : 40 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/51991074"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2868#issuecomment-51991074"
  , issueCommentCreatedAt = 2014 (-08) (-12) 23 : 19 : 40 UTC
  , issueCommentBody =
      "> I'm of the opinion that we should never expose UUIDs under any circumstances if at all possible. In my experience (both as a user, and as an observer of other users) they make for a terrible user experience because the user doesn't set them, can't remember them, and can't easily refer to objects by them, either manually or programmatically (manually because they're hard to remember and copy pasting is very annoying, programmatically because they're forced to list UUIDs in their scripts which is an indirection step).\r\n\r\nThis has not been my experience.  UUIDs are irritating as a developer, but in my previous life as a pseudo-sysadmin, they were great.  If you go look at `/etc/fstab` on newton, for example, we use UUIDs to make 100% sure that the same disk always gets mounted in the same place.\r\n\r\nI've been thinking about this a little more, and I think that it might actually *not* be the worst thing in the world to make the primary key be the name of the table.  We don't currently let people access tables by UUIDs, so most of the benefits (being able to make sure you're always referring to the same thing) are lost.  I would be OK with not exposing them at all for tables.\r\n\r\nServers I'm less sure about.  I think from an administrative perspective UUIDs for servers have some compelling benefits.  Renaming a server feels like the sort of thing you should be able to do without breaking scripts that need to refer to it.\r\n\r\nI'm very concerned about automatically renaming things.  I think that's an OK solution if and only if it almost never actually happens in practice.  If we do do automatic renaming, we should move to a real consensus algorithm as soon as possible."
  , issueCommentId = 51991074
  }