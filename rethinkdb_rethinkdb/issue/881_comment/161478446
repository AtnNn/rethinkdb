IssueComment
  { issueCommentUpdatedAt = 2015 (-12) (-03) 00 : 40 : 38 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 9502592
        , simpleUserLogin = N "OtterCode"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/9502592?v=3"
        , simpleUserUrl = "https://api.github.com/users/OtterCode"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/161478446"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/881#issuecomment-161478446"
  , issueCommentCreatedAt = 2015 (-12) (-03) 00 : 38 : 00 UTC
  , issueCommentBody =
      "I can only comment on the JS syntax, but I would make it as close to the Update syntax as possible, since that's basically what you're doing. Something like: \r\n\r\n    { status: \"good\" } // Before\r\n\r\n    r.table( \"posts\" )\r\n      .rename( { status: \"goodness\" } )\r\n      .run()\r\n\r\n    { goodness: \"good\" } // After\r\n\r\nSince this isn't a function that one should call casually, it should roll-back and spit an error by default on a conflict along the lines of: \r\n\r\n    {\r\n        message: \"There were a few records that had conflicting field names.\"\r\n        ids: [ \"1stConflictID\", \"2ndConflictID\" ... ] \r\n    }\r\n\r\nHowever, it would probably pay to make that behavior configurable. Perhaps include an options object that includes configuration for overwriting, skipping, and so on."
  , issueCommentId = 161478446
  }