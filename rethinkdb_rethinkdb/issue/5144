Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2015 (-12) (-08) 18 : 45 : 29 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5144/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/5144"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "02e10c"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:enhancement"
          , labelName = "tp:enhancement"
          }
      ]
  , issueNumber = 5144
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 519940
        , simpleUserLogin = N "elifarley"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/519940?v=3"
        , simpleUserUrl = "https://api.github.com/users/elifarley"
        , simpleUserType = OwnerUser
        }
  , issueTitle =
      "Proposal: Fast, cross-document transaction support and fast document counting via append-only databases (AODB)"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5144"
  , issueCreatedAt = 2015 (-11) (-24) 14 : 47 : 01 UTC
  , issueBody =
      Just
        "# Quick overview:\r\n\r\nWe can simplify the work needed to support transactions by applying a few restrictions, like creating a database whose tables cannot have their documents changed in any way after they are first inserted.\r\n\r\nI'd like to have your feedback regarding any flaws in my reasoning below.\r\n\r\n# Introduction\r\n\r\n- An append-only (AO) table disallows any operation that deletes or changes existing documents (so you can only append new documents).\r\n- An append-only database (AODB) can only contain AO user-defined tables. It also contains 2 system tables (which are not AO): **pending_transactions** and **table_sizes** (the latter is more like a database attribute, since it always contains one document)\r\n\r\n# Cross-document transaction example\r\n\r\nTo create an append-only database (which means all its tables are append-only) with cross-document transaction support:\r\n```javascript\r\nr.dbCreate('my-ao-db', {appendOnly: true, enableTransactions: true} )\r\n```\r\n\r\nNow, let's perform a bank account transfer with a cross-document transaction:\r\n```javascript\r\n// Start a named transaction\r\n// (admins can see the names of pending transactions for debug purposes)\r\nvar tranID = r.db(\"my-ao-db\").tranBegin('my example transfer 1');\r\n\r\nvar transferDoc = {\r\n    src_user: \"rich guy\",\r\n    target_user: \"poor guy\",\r\n    amount: 10\r\n}\r\nr.db(\"my-ao-db\").table('account_transfers').insert(transferDoc)\r\n\r\nvar accountEntryNegative = {\r\n    user: \"rich guy\",\r\n    amount: -10\r\n}\r\n\r\nvar accountEntryPositive = {\r\n    user: \"poor guy\",\r\n    amount: 10\r\n}\r\n\r\nr.db(\"my-ao-db\").table('account_entries').insert(\r\n  [accountEntryNegative, accountEntryPositive]\r\n)\r\n\r\nr.db(\"my-ao-db\").tranCommit()\r\n\r\n```\r\n\r\n# Details\r\n\r\n**pending_transactions** structure:\r\n{\r\n**tran_id**: snowflake-like ID generated by client,\r\n**target_table**: name of table where the changes will be applied,\r\n**delta_cmd**: array of 1 or more documents to be inserted in the target table\r\n}\r\n\r\n**table_sizes** structure example (note that this table always contains 1 document):\r\n{\r\n**account_transfers**: {doc_count: 47, size_in_bytes: 4879},\r\n**account_entries**: {doc_count: 8791, size_in_bytes: 17668879},\r\n**my_table_3**: {doc_count: 487, size_in_bytes: 687979}\r\n}\r\n(in the example above, we know that the database contains 3 tables (and 3 files, **one for each table**), and that the file dedicated to table **account_transfers** contains **47** documents and has **4879** bytes allocated to it on the file system)\r\n\r\n## What happens after a transaction is started\r\n- The **tranBegin** command starts a transaction. After that, all documents will be inserted as delta commands in the **pending_transactions** table.\r\n- If the command **tranRollback** is called, all documents for the current transaction will be deleted from **pending_transactions**, but the user-defined **AO tables won't be touched at all**.\r\n- If the cluster dies before **tranCommit** is called, a clean-up process can delete stale documents from **pending_transactions** whenever each server is idle, but **nothing needs to be done to the user-defined AO tables**.\r\n- If the command **tranCommit** is called, a cluster-wide transaction-commit-mutex is acquired, the **pending_transactions** documents for the current transaction are grouped by target_table and each group is processed by at least one thread. Each document is appended to the very end of the file associated with its table (thus increasing the file size by the number of bytes the document takes). Then, the document at **table_sizes** is updated to reflect the new file sizes and document counts. Then, the mutex is released and all processed records from **pending_transactions** are deleted.\r\n- If the cluster dies before **table_sizes** is updated: Once the cluster is restarted, it's just a matter of [truncating all AO files](http://man7.org/linux/man-pages/man1/truncate.1.html) to the number of bytes ascribed to them by **table_sizes**.\r\n\r\n# Final thoughts\r\nMany clients can start transactions and insert documents at the same time. Only one client can commit a transaction at a time - other clients that called the **tranCommit** command will have to wait.\r\n\r\nWhen the cluster is started, it must trim all AO tables so that their sizes match what's recorded in **table_sizes**, thus discarding any transactions that weren't fully committed.\r\n\r\nIn order to make it even easier to implement this proposal, the first version could support only single-node AODBs, leaving multi-node support for later.\r\n"
  , issueState = "open"
  , issueId = Id 118624379
  , issueComments = 7
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 883
          , milestoneNumber = 2
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone are not an immediate priority, and will be periodically revisited. When we decide to work on an issue in backlog, we'll move it to next."
          , milestoneTitle = "backlog"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/2"
          , milestoneCreatedAt = 2012 (-11) (-11) 14 : 16 : 11 UTC
          , milestoneState = "open"
          }
  }