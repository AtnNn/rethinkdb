IssueComment
  { issueCommentUpdatedAt = 2014 (-06) (-26) 17 : 32 : 58 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 7431361
        , simpleUserLogin = N "larkost"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/7431361?v=3"
        , simpleUserUrl = "https://api.github.com/users/larkost"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/47255119"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2612#issuecomment-47255119"
  , issueCommentCreatedAt = 2014 (-06) (-26) 17 : 32 : 58 UTC
  , issueCommentBody =
      "Python3 has a binary type (`type(b'23')` is `<class 'bytes'>`), but while Python2.x technically supports the `b'23'` format, it converts it into a string immediately. So such a thing would generally be needed for Python as well. There is a valid question about whether we should implicitly convert `<class 'bytes'>` objects, and what we should present on fetch.\r\n\r\nThe argument against natively supporting `<class 'bytes'>` is that some surprising (but correct) places return `bytes` objects in Python3 such as `subprocess` STDERR and STDOUT. If we natively bring those in as binary types then the same code in Python2.x would put it into the database as a binary type, while in Python3.x it would insert a binary.\r\n\r\nThe same arguments hold for what we present when fetching. In order to be consistent I think we should present `r.binary` objects rather than native items in Python3. One good option would be to have the `r.binary` class be a subclass of `bytes` (this maps to `<type 'str'> on Python2.x), which would \"do the right thing\" in most cases."
  , issueCommentId = 47255119
  }