Issue
  { issueClosedAt = Just 2014 (-11) (-25) 02 : 16 : 07 UTC
  , issueUpdatedAt = 2014 (-11) (-25) 02 : 16 : 19 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/1667/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/1667"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "207de5"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/cp:clustering"
          , labelName = "cp:clustering"
          }
      ]
  , issueNumber = 1667
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueTitle =
      "concurrent table_create in a cluster produces blueprint conflicts"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/1667"
  , issueCreatedAt = 2013 (-11) (-19) 23 : 26 : 55 UTC
  , issueBody =
      Just
        "So this is a very minor annoyance, but in my specific case it makes benchmarking slightly more tricky. I have to create a large number of tables in a cluster, and this is only reasonably fast if I do it in parallel from a number of nodes.\r\n\r\nHowever I easily get metadata conflicts if I do this, more specifically conflicting blueprints for some of the tables. This shouldn't happen, because each table is created on exactly one node.\r\n\r\nIf I afterwards connect the admin CLI and run `touch` once, the conflicts get resolved.\r\n\r\nI have a theory of why this happens, but I'm not sure if it is true:\r\n`table_create_term_t` does not only compute the blueprint for the new table, but also for all other tables that don't have a blueprint yet.\r\n*IF* it can happen in a large cluster that metadata about a table itself has propagated to a given thread on a given node, but not its blueprint yet, the table_create_term_t would compute a blueprint even for that other table. At that point we would have two blueprints for the same table.\r\n\r\nI don't know if this can actually happen. The cause for this might lie somewhere else."
  , issueState = "closed"
  , issueId = Id 22959157
  , issueComments = 5
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 706854
                , simpleUserLogin = N "AtnNn"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/706854?v=3"
                , simpleUserUrl = "https://api.github.com/users/AtnNn"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 1
          , milestoneNumber = 18
          , milestoneClosedIssues = 180
          , milestoneDescription =
              Just
                "These feature requests, bugs and pull requests have been acknowledged, but will not be fixed."
          , milestoneTitle = "wontfix"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/18"
          , milestoneCreatedAt = 2013 (-03) (-29) 20 : 23 : 24 UTC
          , milestoneState = "closed"
          }
  }