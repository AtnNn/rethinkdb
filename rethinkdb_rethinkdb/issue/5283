Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2016 (-08) (-26) 00 : 57 : 10 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5283/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/5283"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "0052cc"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:ReQL_proposal"
          , labelName = "tp:ReQL_proposal"
          }
      ]
  , issueNumber = 5283
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 1366
        , simpleUserLogin = N "deontologician"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1366?v=3"
        , simpleUserUrl = "https://api.github.com/users/deontologician"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Updateable `between` changefeed"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5283"
  , issueCreatedAt = 2016 (-01) (-13) 07 : 38 : 33 UTC
  , issueBody =
      Just
        "This came out of a discussion with @danielmewes yesterday. The idea is to be able to shift the window of a between changefeed without missing any changes and without needing to open two changefeeds at once to ensure nothing is missed.\r\n\r\nThe motivation is infinite scrolling with live updates. Currently if you want to move a sliding window, you need to do overlapping `between` queries on two different feeds, and possibly do some deduplication of changes.\r\n\r\nI don't have a good ReQL interface in mind, but the idea at the protocol level is that you could send a `MODIFY` (vs. `CONTINUE`) on the same token the changefeed is on, and alter the changefeed's target. Maybe it might look like sending a new query to the cursor, and then you get a flurry of `initial` and `uninitial` changes on the feed as the window is shifted.\r\n\r\nI also don't know how hard it would be to guarantee no changes were dropped in the transition.\r\n\r\nThis might be a bit narrow of a proposal, it's possible if it were generalized to updating any changefeed's query, a good api idea might fall out."
  , issueState = "open"
  , issueId = Id 126360800
  , issueComments = 3
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 883
          , milestoneNumber = 2
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone are not an immediate priority, and will be periodically revisited. When we decide to work on an issue in backlog, we'll move it to next."
          , milestoneTitle = "backlog"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/2"
          , milestoneCreatedAt = 2012 (-11) (-11) 14 : 16 : 11 UTC
          , milestoneState = "open"
          }
  }