IssueComment
  { issueCommentUpdatedAt = 2015 (-02) (-24) 02 : 50 : 34 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1461947
        , simpleUserLogin = N "neumino"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1461947?v=3"
        , simpleUserUrl = "https://api.github.com/users/neumino"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/75689171"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3822#issuecomment-75689171"
  , issueCommentCreatedAt = 2015 (-02) (-24) 02 : 50 : 34 UTC
  , issueCommentBody =
      "I'm not sure that aliasing `each` as `forEach` is a good idea. The reasons why a cursor currently does not implement `each` are:\r\n- The syntax is not the same. You have:\r\n```\r\ncursor.each(function(row, error) { ... }, onFinish)\r\narray.forEach(function(element, index, array) { ... })\r\n```\r\n- Implementing `forEach` as an alias of `each` leads to really sneaky bugs because `cursor.each` is asynchronous, while `array.forEach` is synchronous.\r\n\r\nConsider\r\n```\r\nvar a = [1,2,3,4]\r\nvar b = []\r\na.forEach(function(element) {\r\n   b.push(a)\r\n})\r\nassert.deepEqual(a, b) // true;\r\n\r\nr.table('data').run(connection).then(function(result) {\r\n  var b = [];\r\n  result.each(function(row) {\r\n    b.push(row);\r\n  })\r\n  assert.deepEqual(result, b) // false\r\n})\r\n```\r\nThe sneaky part here is that on the second example, if you send back your data (like an HTTP response) instead of using `assert.deepEqual` you send back only the first batch(es) of the query, not the whole thing and you don't get an error. My guess is that this is complicated to debug. It can also happen if you try to reduce the results on the client side with `forEach`.\r\nThis is especially worrisome because many people (and especially new developers) use `forEach` to iterate on an array by default (because it creates a closure).\r\n\r\nThe JavaScript driver now provide the cursor interface on arrays, but providing the interface for arrays for cursors is a bad idea in my opinion. I may be wrong though since technically people could also just suppose that `each` is synchronous.\r\n\r\nImplementing `forEach` to throw a good error could be a solution, something like \"This is a cursor, not an array. Use `each` to iterate over all the results\".\r\n\r\nI also believe that this could be solved by returning arrays by default - See https://github.com/rethinkdb/rethinkdb/issues/2736"
  , issueCommentId = 75689171
  }