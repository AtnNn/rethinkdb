IssueComment
  { issueCommentUpdatedAt = 2013 (-01) (-14) 19 : 00 : 20 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 646357
        , simpleUserLogin = N "wmrowan"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/646357?v=3"
        , simpleUserUrl = "https://api.github.com/users/wmrowan"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/12233792"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/213#issuecomment-12233792"
  , issueCommentCreatedAt = 2013 (-01) (-14) 19 : 00 : 20 UTC
  , issueCommentBody =
      "@charl You can think of any `r.js` code as being passed directly to a call to `eval`. All currently bound RQL variables will be in scope for this operation but the `this` object has to be bound to an object alas.\r\n\r\nThis will get better in the next release. In 1.4 you will be required to explicitly pass variables to your `r.js` snippets. Thus to filter based on a regex you can do:\r\n\r\n```ruby\r\n> r.table('my-table').filter(r.js(\"function(row) { return row.match(/foo/) }\")).run()\r\n```"
  , issueCommentId = 12233792
  }