IssueComment
  { issueCommentUpdatedAt = 2014 (-12) (-05) 03 : 03 : 57 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 877936
        , simpleUserLogin = N "marshall007"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/877936?v=3"
        , simpleUserUrl = "https://api.github.com/users/marshall007"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/65741420"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3408#issuecomment-65741420"
  , issueCommentCreatedAt = 2014 (-12) (-05) 03 : 03 : 57 UTC
  , issueCommentBody =
      "> In general lambdas would use .copy(), but we should special-case the situation where a lambda uses its argument exactly once so it doesn't do any copying.\r\n\r\nYou'd still miss cases like `r.branch(right.hasFields('foo'), left.merge(right), left)`, right? Instead of trying to disambiguate the cases where it's safe, you could make all merge operations destructive by default and introduce something like `r.clone()` or `r.copy()` for when it's needed."
  , issueCommentId = 65741420
  }