IssueComment
  { issueCommentUpdatedAt = 2014 (-02) (-26) 06 : 27 : 49 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/36094917"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2024#issuecomment-36094917"
  , issueCommentCreatedAt = 2014 (-02) (-26) 06 : 27 : 49 UTC
  , issueCommentBody =
      "Sorry, let me try again.\r\n\r\nYou were proposing that if you have GROUPED_DATA, and you called `order_by` on it, that it be converted from GROUPED_DATA to an ARRAY of the form `[{group: ..., reduction: ...}, ...]`.  This is confusing.  It doesn't seem confusing in JS because we turn GROUPED_DATA into that form in the clients, but in Ruby you would get an array instead of an object back.\r\n\r\nOn the topic of `GROUPING<ARRAY>` vs. GROUPED_DATA, I really don't think we want two different ways to have grouped data.  Why should `stream.coerce_to('array').group(...)` behave differently from `stream.group(...).coerce_to('array')`?  Or if you want to special case the second, why should it be different from `stream.group(...).map{|x| [x]}.reduce{|a,b| a+b}`?  An array is just a datum like any other."
  , issueCommentId = 36094917
  }