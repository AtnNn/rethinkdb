IssueComment
  { issueCommentUpdatedAt = 2014 (-12) (-30) 01 : 33 : 48 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/68322250"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3477#issuecomment-68322250"
  , issueCommentCreatedAt = 2014 (-12) (-30) 01 : 33 : 48 UTC
  , issueCommentBody =
      "Here's a really hacky way of making sure that an opt arg is getting processed by the server:\r\n`r.table('marvel').insert({}).run(conn, {durability: r.error(\"durability processed\")}, cb);`\r\n\r\nBy setting an opt arg to `r.error(msg)` the query fails with `msg` as soon as the opt arg gets processed. Note that:\r\n* the error is only thrown if the opt arg is actually used by the query. For example the `durability` opt arg wouldn't be used by a read query, and hence wouldn't throw the error.\r\n* this might or might not work for `noreply`. `noreply` is special because it has to be handled partially on the client. Depending on how the client interprets the `r.error()` value, it might either reject the query, show no result at all, or break the connection.\r\n\r\nThere isn't a server-side query log yet, see https://github.com/rethinkdb/rethinkdb/issues/544 ."
  , issueCommentId = 68322250
  }