IssueComment
  { issueCommentUpdatedAt = 2013 (-02) (-15) 07 : 09 : 57 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/13594953"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/349#issuecomment-13594953"
  , issueCommentCreatedAt = 2013 (-02) (-15) 07 : 09 : 57 UTC
  , issueCommentBody =
      "@mlucy -- `do` was designed as a replacement for `let` that doesn't require `letVar`. The way I understood it, it's essentially `let`.\r\n\r\n```\r\nr.expr(1).do(lambda x: x).run() => 1\r\nr.expr([1]).do(lambda x: x).run() => [1]\r\nr.expr(1).do(table.insert({})).run() => error\r\nr.expr([1]).do(table.insert({})).run() => error\r\nr.expr([1]).forEach(table.insert({})).run() => ok\r\nr.expr(1).forEach(table.insert({})).run() => currently an error\r\n```\r\n\r\nWe can merge `do` and `forEach` if we really want to, but we should discuss if that's a good idea. `do` is basically `let`, which is like ML's `let`. It's an expression that evaluates to a value. On the other hand, `forEach` executes a write query (or a set of write queries) for every element."
  , issueCommentId = 13594953
  }