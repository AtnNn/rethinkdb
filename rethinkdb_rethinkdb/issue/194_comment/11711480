IssueComment
  { issueCommentUpdatedAt = 2012 (-12) (-27) 16 : 23 : 30 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 65574
        , simpleUserLogin = N "kareemk"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/65574?v=3"
        , simpleUserUrl = "https://api.github.com/users/kareemk"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/11711480"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/194#issuecomment-11711480"
  , issueCommentCreatedAt = 2012 (-12) (-27) 16 : 23 : 30 UTC
  , issueCommentBody =
      "@coffemug we don't have a timeline beyond ASAP. We have a large mongodb\r\ndeployment and we've lost confidence in the product for various reasons and\r\nrethinkdb is top of the list as a replacement (hence our work on nobrainer\r\nled by @nviennot).\r\n\r\nOn Thursday, December 27, 2012, Nicolas Viennot wrote:\r\n\r\n> @al3xandru <https://github.com/al3xandru> findAndModify() actually accept\r\n> a \"new\" argument. c.f.\r\n> http://docs.mongodb.org/manual/reference/command/findAndModify/\r\n>\r\n> In the following sentence, assume a deterministic query update which is\r\n> most of the time true (no Math.rand() for example). By knowing the update\r\n> query and the original document right before the update, the user can\r\n> figure out the value of the updated document. So granted, \"new\" is really\r\n> just a nice to have.\r\n>\r\n> But findAndModify can reveal itself to be quite useful:\r\n>\r\n> Suppose that you have an app that would give lottery tickets to people.\r\n> Have a document with a field lottery_tickets which contains an\r\n> array of tickets to be drawn, such as [4,3,1,7,5,8,10,2,6,9].\r\n> Each participant would take a ticket by doing a\r\n> findAndModify(\"lottery_tickets.pop()\").\r\n> It would return the chosen number, and would be race free since rethinkdb\r\n> serializes writes to the same document.\r\n>\r\n> How to approach this use case with the rethinkdb api?\r\n> ------------------------------\r\n>\r\n> the \955 at the bottom right of the rethinkdb website\r\n> /me amused\r\n>\r\n> \8212\r\n> Reply to this email directly or view it on GitHub<https://github.com/rethinkdb/rethinkdb/issues/194#issuecomment-11705024>.\r\n>\r\n>\r\n\r\n\r\n-- \r\n*Kareem Kouddous*\r\nHead of Technology\r\n\r\n*crowdtap*\r\n225 Park Avenue S, 16th Fl, New York, NY 10003\r\n*\r\n*\r\n*p**  **  917-582-9178*\r\n*t**     **@kareemk*\r\n*\r\n*\r\nwww.crowdtap.com*  **|**  *@crowdtap"
  , issueCommentId = 11711480
  }