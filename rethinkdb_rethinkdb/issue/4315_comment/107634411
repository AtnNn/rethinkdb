IssueComment
  { issueCommentUpdatedAt = 2015 (-06) (-01) 17 : 00 : 42 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 572196
        , simpleUserLogin = N "stuartpb"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/572196?v=3"
        , simpleUserUrl = "https://api.github.com/users/stuartpb"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/107634411"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/4315#issuecomment-107634411"
  , issueCommentCreatedAt = 2015 (-06) (-01) 16 : 51 : 20 UTC
  , issueCommentBody =
      "I'm not 100% sure I understood your question, but this isn't about making *queries* synchronous - only the ability to *initiate* them.\r\n\r\n> If it's not resolved, it chains itself onto a query.\r\n\r\nI'm not sure what this means - the way I would describe it, the connection more chains the query onto *it* than the other way around.\r\n\r\n> It's not obvious which code will run first, or if everything will be run before close is called, or what.\r\n\r\nSure, but that's the same problem you *already* have in the case of two async calls (abstractly, at least - there might be some guarantees like #2711 about query ordering on the same connection that are, to my mind, a coincidence of implementation):\r\n\r\n```js\r\nvar conn = r.connect().then(function(conn){\r\n\r\nconn.use('example')\r\nvar dataPromise = r.table('foo').run(conn)\r\ndataPromise.then(function(data){\r\n    return r.table('bar')./*some query dependent on data*/.run(conn)\r\n}).then(function(){\r\n   conn.close()\r\n})\r\n\r\nvar secondPromise  = r.table('foo').get(x).run(conn)\r\nsecondPromise.then(function(secondData){\r\n  /* can't dataPromise take longer and this gets called first? Or vice versa? */\r\n   return r.table('bar')./*some query dependent on data*/.run(conn)\r\n})\r\n\r\n})\r\n```\r\n\r\nQueries / connections (connection pools) in `rethinkdbdash` kind of work the way I describe - does https://github.com/rethinkdb/rethinkdb/issues/3771#issuecomment-107127070 illuminate this better?"
  , issueCommentId = 107634411
  }