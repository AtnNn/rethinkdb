IssueComment
  { issueCommentUpdatedAt = 2015 (-05) (-31) 05 : 45 : 16 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 572196
        , simpleUserLogin = N "stuartpb"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/572196?v=3"
        , simpleUserUrl = "https://api.github.com/users/stuartpb"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/106997807"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/4315#issuecomment-106997807"
  , issueCommentCreatedAt = 2015 (-05) (-30) 06 : 54 : 49 UTC
  , issueCommentBody =
      "> This was brought up a while back in #2570. The main issue with having `.run()` take a promise was that you need to be able to call `conn.close()` at some point, but you don't have a resolved instance.\r\n\r\nI'm not talking about *returning a promise*, I'm talking about returning a *connection* that *abstracts* the promise (as you alluded to in https://github.com/rethinkdb/rethinkdb/issues/2570#issuecomment-46864902). Conflating the two would definitely lend itself to problems (as illuminated in #2570), and considering that the synchronous `r.connect` already returns a promise, I used an alternative <code>r.connect<strong>ion</strong></code> method in my example. (A more elegant solution could use `r` itself, similar to `rethinkdbdash`, as I later described in https://github.com/rethinkdb/rethinkdb/issues/3771#issuecomment-107127070 .)\r\n\r\nWith such an abstracted connection, it seems to me you could handle `conn.close()` as normal if the connection has been established, and have it discard any pending queries (either they never resolve or they all get rejected with a \"connection closed\" error) if the connection was not established before being closed."
  , issueCommentId = 106997807
  }