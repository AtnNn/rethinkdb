IssueComment
  { issueCommentUpdatedAt = 2015 (-09) (-22) 23 : 10 : 31 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 265071
        , simpleUserLogin = N "kofalt"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/265071?v=3"
        , simpleUserUrl = "https://api.github.com/users/kofalt"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/67731604"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3460#issuecomment-67731604"
  , issueCommentCreatedAt = 2014 (-12) (-20) 10 : 31 : 20 UTC
  , issueCommentBody =
      "**+1 for SCTP.** Everything I've read about that protocol has been impressive.\r\n\r\nI think your choice of protocol has high relevance to #3296 and #281, which would suggest to me that multiple streams which do not block each other are an utterly critical feature.\r\n\r\nIt would follow that WebSockets are not a great choice due to its blocking-response nature, as mentioned by @larkost upthread. A transport similar to WebSockets (which shares the same weakness) that you may not be aware of: [Server-Sent Events](http://www.w3.org/TR/eventsource).\r\n\r\nIt has the interesting [properties](http://www.html5rocks.com/en/tutorials/eventsource/basics) of working over an ordinary HTTP request (unlike WS, which upgrades), and being supported in all [non-ie browsers](http://caniuse.com/#feat=eventsource) with trivial polyfils available. The downside being it's unidirectional, which makes it unsuitable as a sole transport - just thought I'd mention it.\r\n\r\nAnyway, I would suggest that if you do upgrade protocols, leave a 'plain' HTTP request/response transport in place (possibly just abstract away the transport in RDB server), as adding awesome stream support may be burdensome for third-party drivers."
  , issueCommentId = 67731604
  }