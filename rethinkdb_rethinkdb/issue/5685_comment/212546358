IssueComment
  { issueCommentUpdatedAt = 2016 (-04) (-20) 18 : 28 : 20 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/212546358"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/5685#issuecomment-212546358"
  , issueCommentCreatedAt = 2016 (-04) (-20) 18 : 28 : 20 UTC
  , issueCommentBody =
      "I was thinking about the 0-element input case, but I now see that you mentioned the 1-element scenario.\r\n\r\nThis comment mentions another work-around https://github.com/rethinkdb/rethinkdb/issues/2629#issuecomment-47708929 by using `.union(['base']).reduce`. However I think that will stop the `reduce` from being parallelized, so it will degrade to the same performance as `fold` more or less.\r\n\r\nCan you describe your data and query a bit more? There's probably a way for using a `map` operation in front of the `reduce` in order to get the behavior you need."
  , issueCommentId = 212546358
  }