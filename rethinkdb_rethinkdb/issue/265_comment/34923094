IssueComment
  { issueCommentUpdatedAt = 2014 (-02) (-12) 21 : 58 : 48 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/34923094"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/265#issuecomment-34923094"
  , issueCommentCreatedAt = 2014 (-02) (-12) 21 : 58 : 48 UTC
  , issueCommentBody =
      "It turns out that the problem is not that it is outside of a coroutine, but that it is in a piece of code which must not block. Lifting that restriction it seems would require a major rewrite of much of the extent manager, LBA logic and possibly other places that depend on it.\r\n\r\nSo I avoided that by issuing the ftruncate like a regular i/o operation. I.e. it is pushed through the i/o queue up to the conflict resolving queue, which takes care of blocking subsequent i/o operations until the ftruncate has been completed. The logic there is not completely trivial (and bugs can cause highly intermittent and very difficult-to-track-down problems), so I would just like to go through that logic once more myself and maybe safeguard it a little before putting it into code review."
  , issueCommentId = 34923094
  }