IssueComment
  { issueCommentUpdatedAt = 2013 (-12) (-17) 07 : 51 : 39 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 139396
        , simpleUserLogin = N "wojons"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/139396?v=3"
        , simpleUserUrl = "https://api.github.com/users/wojons"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/30731983"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1765#issuecomment-30731983"
  , issueCommentCreatedAt = 2013 (-12) (-17) 07 : 51 : 39 UTC
  , issueCommentBody =
      "@jdoliner @coffeemug,\r\n\r\nSo yes it could be a driver level change that would allow the profiling to automatically be attached to the entire connection. A few things i would like to bring up and not sure how much work it is but if the entire connection is profileed its less function or methods to keep turning profiling on it would auto be on. The reason why i would suggest having the server cache the profiles and not send them with the payload is the amount of time in round trip. If my application does a lot of call and it blocks the users from seeing a page or something (i know there is ajax and so on but go with me on this). You dont want your large complix queries to need to also wait for the profiling data to be sent back with the rest of the payload. But once u flush the output buffer to the user. And closed there http connection you can then request the profiles from the server and then handle them as needed if that means ansysles and flush to disk or load into another database. This would also be useful if it went directly into a table again that would be a setting that some users would have on or off i know postgresql and mysql have options for this to go into a table or a file"
  , issueCommentId = 30731983
  }