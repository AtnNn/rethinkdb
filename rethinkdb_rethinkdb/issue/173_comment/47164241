IssueComment
  { issueCommentUpdatedAt = 2014 (-06) (-25) 21 : 56 : 45 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 552910
        , simpleUserLogin = N "Tryneus"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/552910?v=3"
        , simpleUserUrl = "https://api.github.com/users/Tryneus"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/47164241"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/173#issuecomment-47164241"
  , issueCommentCreatedAt = 2014 (-06) (-25) 21 : 56 : 45 UTC
  , issueCommentBody =
      "Just tried this out of curiosity if it was still a problem.  It works a little better now (I'm assuming this is because of the JSON protocol).  The above query (depth 160) doesn't hang the web UI or have any errors.  However, increasing the total depth to 180 causes the following stack overflow on the server:\r\n\r\n```cpp\r\nerror: Error in ../src/arch/runtime/thread_pool.cc at line 341:\r\nerror: Callstack overflow in a coroutine\r\nerror: Backtrace:\r\nerror: Wed Jun 25 14:48:28 2014\r\n\r\n       1: rethinkdb_backtrace(void**, int) at rethinkdb_backtrace.cc:101\r\n       2: backtrace_t::backtrace_t() at backtrace.cc:202\r\n       3: lazy_backtrace_formatter_t::lazy_backtrace_formatter_t() at backtrace.cc:282\r\n       4: format_backtrace(bool) at backtrace.cc:197\r\n       5: report_fatal_error(char const*, int, char const*, ...) at errors.cc:83\r\n       6: linux_thread_pool_t::sigsegv_handler(int, siginfo*, void*) at thread_pool.cc:341\r\n       7: /lib/x86_64-linux-gnu/libpthread.so.0(+0xfcb0) [0x7f5536b57cb0] at 0x7f5536b57cb0 (/lib/x86_64-linux-gnu/libpthread.so.0)\r\n       8: google::protobuf::internal::MessageTypeTraits<Backtrace>::Get(int, google::protobuf::internal::ExtensionSet const&, Backtrace const&) at extension_set.h:713\r\n       9: google::protobuf::internal::MessageTypeTraits<Backtrace>::ConstType Term::GetExtension<google::protobuf::internal::MessageTypeTraits<Backtrace>, (unsigned char)11, false>(google::protobuf::internal::ExtensionIdentifier<Term, google::protobuf::internal::MessageTypeTraits<Backtrace>, (unsigned char)11, false> const&) const at ql2.pb.h:1722\r\n       10: ql::get_backtrace(ql::protob_t<Term const> const&) at error.cc:127\r\n       11: ql::term_t::term_t(ql::protob_t<Term const>) at term.cc:328\r\n       12: ql::op_term_t::op_term_t(ql::compile_env_t*, ql::protob_t<Term const>, ql::argspec_t, ql::optargspec_t) at op.cc:184\r\n       13: ql::make_obj_term_t::make_obj_term_t(ql::compile_env_t*, ql::protob_t<Term const> const&) at datum_terms.cc:60\r\n       14: counted_t<ql::make_obj_term_t> make_counted<ql::make_obj_term_t, ql::compile_env_t*&, ql::protob_t<Term const> const&>(ql::compile_env_t*&&&, ql::protob_t<Term const> const&&&) at counted.hpp:141\r\n       15: ql::make_make_obj_term(ql::compile_env_t*, ql::protob_t<Term const> const&) at datum_terms.cc:91\r\n       16: ql::compile_term(ql::compile_env_t*, ql::protob_t<Term const>) at term.cc:23\r\n       17: ql::op_term_t::op_term_t(ql::compile_env_t*, ql::protob_t<Term const>, ql::argspec_t, ql::optargspec_t) at op.cc:207\r\n       18: ql::make_obj_term_t::make_obj_term_t(ql::compile_env_t*, ql::protob_t<Term const> const&) at datum_terms.cc:60\r\n       19: counted_t<ql::make_obj_term_t> make_counted<ql::make_obj_term_t, ql::compile_env_t*&, ql::protob_t<Term const> const&>(ql::compile_env_t*&&&, ql::protob_t<Term const> const&&&) at counted.hpp:141\r\n       20: ql::make_make_obj_term(ql::compile_env_t*, ql::protob_t<Term const> const&) at datum_terms.cc:91\r\n       21: ql::compile_term(ql::compile_env_t*, ql::protob_t<Term const>) at term.cc:23\r\n       22: ql::op_term_t::op_term_t(ql::compile_env_t*, ql::protob_t<Term const>, ql::argspec_t, ql::optargspec_t) at op.cc:207\r\n...\r\n```\r\n\r\nThe same few frames repeat for the rest of the displayed backtrace.  The client drivers prevent this from happening easily by requiring users to override `nesting_depth=20` in `r.expr`.  I'm not sure if there is more we should do for this, but it would be nice if we didn't overflow."
  , issueCommentId = 47164241
  }