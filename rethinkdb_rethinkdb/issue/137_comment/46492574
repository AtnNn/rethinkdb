IssueComment
  { issueCommentUpdatedAt = 2014 (-06) (-18) 21 : 02 : 24 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 7431361
        , simpleUserLogin = N "larkost"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/7431361?v=3"
        , simpleUserUrl = "https://api.github.com/users/larkost"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/46492574"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/137#issuecomment-46492574"
  , issueCommentCreatedAt = 2014 (-06) (-18) 20 : 53 : 51 UTC
  , issueCommentBody =
      "In support of the number 2 option, it does better match at the usage patterns that come to mind for me:\r\n1. If you are naively getting the whole record it does not punish you if someone has included a blob that you were not expecting.\r\n2. If you are looking for the blob, but only on some records based on criteria you can't express in ReQL, you are only pulling down the bits you need.\r\n\r\nAdditionally it allows for the possibility of retrieving only chunks, or progressive chunks, of a data.\r\n\r\nAnd it would not be too difficult to have a JSON representation of this, for example:\r\n```json\r\n{\r\n    'name':'bob',\r\n    'age':27,\r\n    'picture':'rethinidb-data://<cluster-uuid>/<data-uuid>'\r\n}\r\n```\r\nSo durring inserts/updates the drivers would have to send the blob separately, then put in the returned url. And on the other side I would imagine a faulting behavior that would (by default) only download the data when it is asked for, with an option to auto-fault the objects. It would require introspecting every string to see if it matches the pattern, but I don't think that would be too much of a problem."
  , issueCommentId = 46492574
  }