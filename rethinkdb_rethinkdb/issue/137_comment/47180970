IssueComment
  { issueCommentUpdatedAt = 2014 (-06) (-26) 02 : 17 : 42 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/47180970"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/137#issuecomment-47180970"
  , issueCommentCreatedAt = 2014 (-06) (-26) 02 : 12 : 36 UTC
  , issueCommentBody =
      "Having talked to everyone and having thought about this for days, l I feel extremely strongly that files should be a new abstraction, backed by a table (or tables) of multiple documents with binary blobs storing chunks (see #2612). There are many reasons why this is the case (see below), and most of them are user experience/psychology driven. I'm torn on what's better technically (I think either solution would work and it's debatable what would be better), but from a usability, promotion, and story-telling POV, files as an abstraction win clearly and dramatically for me.\r\n\r\nHere are some reasons why:\r\n\r\n- There is a lot of weight to a story where we built RethinkFS/LatticeFS/WhateverFS as a product on top of RethinkDB's delightful clustering infrastructure. It gives psychological weight to the file system as it's own product that could have its own landing page, it gives additional psychological weight to the underlying clustering system (it's good enough to build things like that on top of), it has the benefit of familiarity (other people have done it this way and users are used to it), and it's generally a clean and beautiful story that's very easy to sell to people. In comparison to that, files as types in documents are way, way, way weaker/less exciting to sell.\r\n- From a usability standpoint, I just want to dump a bunch of files into my swanky new distributed file system. Storing them next to other documents isn't really what the whole thing is about at all; I wouldn't even know what metadata to put around them. Why must I insert a superficially constructed document in order to store a file? From an interface point of view, the abstraction is wrong -- this isn't what the thing is about. The point of RethinkFS is to give people a lightweight HDFS (that's what GridFS does too, btw) -- you don't quite need the power of HDFS, are already using Rethink, and don't want to deal with Hadoop clusters. As a user, I know what I want (a distributed FS) and I want the shortest path to that. Files as their own abstraction give that to me; files as documents do not. (again, psychology wins here)\r\n- Whether this is actually superior technically or not, we need to break files up into chunks and store them as documents to make this psychologically palatable to people. HDFS, GridFS, GFS (the original google file system), IBM's distributed file system -- all of them break files into chunks and distribute the chunks across the cluster. People are used to this and want this (and also, the fact that pretty much all other smart people did it this way suggests it's a good idea). If you tell people \"we did it this way\" they'll say \"oh, I get it, cool\". If you tell people files are parts of documents they'll say \"oh... So how is this different from ...\" and we'll have to launch into unnecessary explanations. So again, psychology wins here, and sharding individual files is really important to people regardless of whether it actually gives any technical advantages.\r\n\r\nI will say that I also think there are some non-trivial technical advantages to this:\r\n\r\n- As clustering improves (which it hopefully will for the lifetime of RethinkDB), so will RethinkFS. As clustering gets more flexible, so will RethinkFS. It's easy to explain to people, and it's also true.\r\n- There is sharding flexibility for any given file that isn't available otherwise. People *think* they need it (regardless of whether they actually need it), and we can give it to them out of the box without any additional work.\r\n\r\nI can sell this to people (where sell == excite, convince, and possibly actually sell). Having thought about this, I can't sell files backed by our `blob_t` as part of documents to people.\r\n\r\nSo I'd really like us to settle on these two assumptions (files as their own abstraction, chunks stored in documents) and nail down the API following this path. I think we can debate these assumptions for a long time, but we won't get far past where we are now."
  , issueCommentId = 47180970
  }