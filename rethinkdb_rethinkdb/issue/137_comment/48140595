IssueComment
  { issueCommentUpdatedAt = 2014 (-07) (-07) 04 : 50 : 41 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/48140595"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/137#issuecomment-48140595"
  , issueCommentCreatedAt = 2014 (-07) (-07) 04 : 43 : 44 UTC
  , issueCommentBody =
      "> Tell us why you believe users need to be able to shard individual files.\r\n\r\nWhen I explain a feature/product X to people they typically go through the following two questions (in order):\r\n\r\n- What other thing Y is X closest to?\r\n- Oh, ok, and how is X better than/different from/not like Y?\r\n\r\nThey ask the first question because people try to understand new things in terms of other things they already know. They ask the second question for the same reason, but also because their curiosity kicks in. They want to know about the differences for their own sake, and to see if the new thing is worth their attention.\r\n\r\nFor new things to have sufficient activation energy so people use and understand them they either have to be unbelievably out of this world good, or they have to be explained in context of something that already exists. (Even VMWare, which was out of this world good, still struggled with having to answer these two questions)\r\n\r\nSo now we have a dilemma. We could say \"RethinkFS is like GridFS/HDFS, but you can't shard individual files\". But sharding individual files is a defining feature of GridFS/HDFS, which will give people a sense of confusion about the whole thing. \"It's like GridFS/HDFS, but without a defining feature of GridFS/HDFS, which means it's worse?\"\r\n\r\nWe could also compare to something else. \"RethinkFS lets you store files across the cluster, like NFS.\" To which people will say \"ah, it's not as powerful as GridFS/HDFS, which is ok because it isn't intended to be\". But we'll still be bucketed as a product who has a less powerful file system.\r\n\r\nDealing with these arguments is of course a losing proposition. It's much easier to say \"It's like GridFS/HDFS, you can just store files across the cluster\" and call it a day.\r\n\r\n> Tell us why you think users think they need to be able to shard individual files.\r\n\r\nIt's a strong intuitive feeling deduced from experiences described in part (1) above. I don't have hard data on the specific case because it's pretty hard to construct a good experiment -- this is the kind of thing where you can't get a proper reaction from people until you show them a complete thing. We could construct a couple of landing pages and see how people react, but running such an experiment is a lot of work.\r\n\r\n> Explain in your own words the increase in technical difficulty of implementing this.\r\n\r\nI expect us to cut a lot of corners in the implementation in a way that people will find acceptable, such that the increase in technical difficulty is marginal. In particular, we won't give any ACID or state guarantees beyond what the user would get by writing the queries in the driver themselves to manipulate `r.binary` chunks. We'll just be offering porcelain commands for convenience, but will be offering no additional semantics.\r\n\r\n> Explain in your own words the availability downsides and upsides.\r\n\r\nAssuming file commands aren't automatically set to read outdated by default, if a single master that holds some chunks of the file dies, the file will be partially inaccessible until the user fails over. (We might choose to switch to read outdated for files by default though, in which case files will be entirely available as long as replication factor is greater than one, and every machine where the chunk is stored isn't dead).\r\n\r\nEDIT: if machines holding the metadata are down, files may be partially or fully inaccessible too until service is restored.\r\n\r\n> Explain in your own words the performance downsides and upsides.\r\n\r\nI suspect the sharded implementation will be slower (at least in terms of latency), though I can't speculate as to how much slower.\r\n\r\n> Explain why the simpler task, that's nearly a subset of the work, of storing the files without breaking them up, shouldn't be implemented first with us then reevaluating the question of sharding individual files.\r\n\r\nI'm not sure it's a simpler task. Assuming all we're doing is adding porcelain commands on top of `r.binary` that the user could write themselves using the drivers, the tasks seem roughly comparable to me in the amount of work.\r\n\r\n> Identify which features we're scheduling later to make room for the extra development effort for sharding individual files.\r\n\r\nSee part (3). I don't think delays are necessary."
  , issueCommentId = 48140595
  }