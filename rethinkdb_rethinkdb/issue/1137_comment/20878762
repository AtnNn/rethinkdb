IssueComment
  { issueCommentUpdatedAt = 2013 (-07) (-12) 14 : 14 : 18 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/20878762"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1137#issuecomment-20878762"
  , issueCommentCreatedAt = 2013 (-07) (-12) 14 : 12 : 56 UTC
  , issueCommentBody =
      "I realize I was a bit snarky here -- sorry about that. Here are my thoughts on this.\r\n\r\nOver time I've observed in myself that when I look at a specific issue, I have an instinctive tendency to exaggerate its importance in my mind relative to the rest of the backlog. I don't think it's a quality specific only to me -- if you look at any reasonably popular project, there are always a couple of issues people point to and say \"I can't believe this hasn't been fixed yet, it would only take them an hour!\" (In fact, I think it's a certain sign of maturity of a project)\r\n\r\nI think reacting to issues in this way is a very human quality. The trouble with this type of instinctive response is that it typically lacks a certain sense of perspective relative to the other issues in the pipeline. For example, is the caching issue more important than lack of date support? Is it more important than a 50x storage space blowup? Is it more important than inability to access nested objects?\r\n\r\nThe answer in each case is \"may be\". It usually depends on the type of users currently using the product, the types of users we're trying to go after first, etc. Sometimes these things are impossible to even evaluate, so we just pick and hope we don't annoy too many people. It's very possible that the decision to hold off on the proper cache quotas in favor of other issues is a mistake, but if we look at the overall picture (how many new users we can bring in by introducing date support, how many existing users we can satisfy by cutting storage space requirements, etc.) I think holding off on the caching issue is justified.\r\n\r\nI also realize that there is a simple fix (let people change cache quotas at runtime). I normally completely support these types of solutions, but I think that in this case it's 20% of the work without 80% of the benefit. Most users don't have a good enough visibility into what's going on to control cache quotas manually, so even if we implemented it to satisfy some users who do, we'd still have to do the work to do proper cache quotas relatively soon. This seems to me like the kind of issue that's worth doing right the first time around.\r\n\r\nThis comment is getting a bit long, so I'll stop here. I just wanted to try and communicate that there is a lot more thought and care that goes into release planning than might appear at the first glance."
  , issueCommentId = 20878762
  }