IssueComment
  { issueCommentUpdatedAt = 2013 (-08) (-20) 12 : 33 : 59 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/22941125"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/97#issuecomment-22941125"
  , issueCommentCreatedAt = 2013 (-08) (-20) 12 : 25 : 50 UTC
  , issueCommentBody =
      "> I really think we should ignore these 3 issues. And the remainder of this cache quota issue\r\n\r\nThis has been on my mind for the past few weeks, and has really bothered me because I got diametrically opposed pieces of feedback from quite a few different people. I originally planned to send an e-mail offline about this, but in the process of writing it I realized that I'd just be rationalizing a really strong emotion (which is silly, since we're all smart enough to argue the case either way). So, here's how I actually feel about this.\r\n\r\nI think we need to do all four of these for 2.0. \r\n\r\nWhat it boils down to is that I don't feel comfortable convincing other people to use a product if I don't believe in my core that it's the best product for their use case. The product doesn't have to be perfect, it doesn't have to cover every use case (I'm perfectly ok turning people down if I think Rethink isn't for them), and it doesn't even have to have everything the user needs (since we can develop features for them almost on the fly). But I do need to feel like for the use cases that we're targeting, the product is an absolute best fit for the user's needs. If it isn't, then they really should be using something else.\r\n\r\nRethinkDB is a distributed database for manipulating JSON data (we say that on rethinkdb.com). So it has to be really, really good at those things. We don't have to support stuff like geoindexing for 2.0 (it's a use case we're ok with turning down for now), or stuff like `group.map.reduce` (since what we have now is really good enough for most people), but we do have to be the best for distributing database workloads.\r\n\r\nWith these four features (along with other required stuff in the product-ready issue), I feel *really strongly* that RethinkDB would be an absolutely magical product, completely unmatched by anything else. I could look people who have scalable, unstructured data use cases in the eye, and without the slightest hesitation tell them that they'd be fools not to use RethinkDB because it's the absolute best product for their use case on the market.\r\n\r\nI couldn't do that without these features. I think that if we don't implement this, RethinkDB would be a phenomenal single-node database (assuming the caching issue is done fully), but a mediocre clustered one. I feel extremely uncomfortable doing that when we have the word \"distributed\" on the front page, and it's the key part of the value we offer to our users.\r\n\r\nI also think that if we approached these creatively and enthusiastically, it wouldn't take weeks to plan, months to implement, and months to iron out the bugs. These features are definitely challenging, but they seem minuscule compared to other technical problems we've already overcome. I think we could cover these in two-three of our standard releases, and still have enough man-hours for other required work, and it seems like an acceptable (and necessary) trade-off to me.\r\n\r\nI'd like to decide on this soon, but since this issue is really important and impacts everybody, I'd like to keep it open for discussion for a few more days so everyone has an opportunity to contribute and be heard (so if you have opinions, speak up!) I'll make a final decision on this by mid-week (unless the discussion is lively, in which case I think we can extend it 'till the end of the week)."
  , issueCommentId = 22941125
  }