IssueComment
  { issueCommentUpdatedAt = 2012 (-12) (-13) 03 : 19 : 33 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 711371
        , simpleUserLogin = N "alekstorm"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/711371?v=3"
        , simpleUserUrl = "https://api.github.com/users/alekstorm"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/11320848"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/97#issuecomment-11320848"
  , issueCommentCreatedAt = 2012 (-12) (-13) 03 : 19 : 33 UTC
  , issueCommentBody =
      "Er, hi. This may have been more appropriate on #98, but you could have the cache managed by another process, and communicate with it via some IPC mechanism. When the OOM killer goes hunting, it'll kill the cache process, since it's using a ton of memory, sparing the master process, which will detect the wanton slaughter and spawn a new cache process. Queries will slow down for a second or two during this time, but the system in general was probably already extremely slow due to memory pressure causing frequent page faults (if they have swap on, which a production system shouldn't).\r\n\r\nWho knows, you could even have a collection of cache processes, each managing, say, 1GB each, so the OOM killer will only need to sacrifice one of them.\r\n\r\nYou could also keep the current monolithic process architecture, and set `/proc/<pid>/oom_adj` to `-17` to prevent the OOM killer from ever selecting you, instead choosing something less critical, like a browser. However, you'd have to be absolutely sure you have zero memory leaks, or the system would have no recourse to stop you from eating all the memory, and causing... a kernel panic? I'm honestly not sure what happens.\r\n\r\nSorry if the speculation is unproductive; this is literally the first issue I came across - considering getting involved in the project."
  , issueCommentId = 11320848
  }