IssueComment
  { issueCommentUpdatedAt = 2013 (-08) (-20) 23 : 01 : 41 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 77867
        , simpleUserLogin = N "spiffytech"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/77867?v=3"
        , simpleUserUrl = "https://api.github.com/users/spiffytech"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/22984499"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/97#issuecomment-22984499"
  , issueCommentCreatedAt = 2013 (-08) (-20) 23 : 01 : 41 UTC
  , issueCommentBody =
      "I can definitely understand prioritizing some features ahead of others. I'm concerned, though, about what people infer from \"production ready\". I assume (as I don't see this discussion's use of the term defined here, or in the couple of tickets I saw mentioning \"automatic failover\") that \"automatic failover\" means if a server falls over, queries get routed to a replica transparently, without intervention from administrators or user code.\r\n\r\nUnder that definition, I can see people presuming \"production ready\" should include automatic failover, since a project that aims to make distributed DBs ridiculously easy shouldn't leave a business in a position where a server dying requires waking an admin up in the middle of the night to restore the business to a money-making state. And my concern is even if many businesses wouldn't define \"production ready\" that way, I suspect enough will that calling RethinkDB \"production ready\" before that feature is included could undermine the project's credibility and reputation as those people loudly protest the title.\r\n\r\nIs this a scenario where having a 1.10 release before 2.0 would allow prioritization of more pressing features without forcing the project to call itself \"production ready\" without the discussed features?"
  , issueCommentId = 22984499
  }