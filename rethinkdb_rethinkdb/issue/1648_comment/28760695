IssueComment
  { issueCommentUpdatedAt = 2013 (-11) (-19) 02 : 41 : 33 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 43867
        , simpleUserLogin = N "jdoliner"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/43867?v=3"
        , simpleUserUrl = "https://api.github.com/users/jdoliner"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/28760695"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1648#issuecomment-28760695"
  , issueCommentCreatedAt = 2013 (-11) (-19) 02 : 41 : 33 UTC
  , issueCommentBody =
      "We can easily just cache the value from the first trip through the loop.\r\nThat should eliminate that problem.\r\n\r\n\r\nOn Mon, Nov 18, 2013 at 6:36 PM, Daniel Mewes <notifications@github.com>wrote:\r\n\r\n> Turns out a lot of the remaining CPU time is spent in\r\n> wait_for_rdb_table_readiness().\r\n> wait_for_rdb_table_readiness() works by trying to access a namespace in a\r\n> loop, until it succeeds. Between each iteration it naps for a constant 10ms.\r\n>\r\n> Unfortunately the body of that loop becomes expensive with an increased\r\n> size of the semilattice metadata (we grab a copy of the complete metadata\r\n> each time). In effect each 10ms sleep is followed up by a much more\r\n> expensive copy operation, making it effectively hog a CPU core.\r\n>\r\n> We can probably get rid of the copying, or if not at least dynamically\r\n> increase the nap time if things take longer.\r\n>\r\n> \8212\r\n> Reply to this email directly or view it on GitHub<https://github.com/rethinkdb/rethinkdb/issues/1648#issuecomment-28760493>\r\n> .\r\n>"
  , issueCommentId = 28760695
  }