Issue
  { issueClosedAt = Just 2016 (-06) (-16) 18 : 51 : 39 UTC
  , issueUpdatedAt = 2016 (-06) (-16) 18 : 51 : 45 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5863/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/5863"
  , issueClosedBy = Nothing
  , issueLabels = []
  , issueNumber = 5863
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 1025424
        , simpleUserLogin = N "tmds"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1025424?v=3"
        , simpleUserUrl = "https://api.github.com/users/tmds"
        , simpleUserType = OwnerUser
        }
  , issueTitle =
      "Using RethinkDB to implement a persistent BehaviorSubject"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5863"
  , issueCreatedAt = 2016 (-06) (-16) 11 : 43 : 41 UTC
  , issueBody =
      Just
        "I am creating this issue to explain a use-case and get feedback on how well it matches with RethinkDB.\r\n\r\nA BehaviorSubject in Reactive Extensions is:\r\n\r\n> Represents a value that changes over time. Observers can subscribe to the subject to receive the last (or initial) value and all subsequent notifications.\r\n\r\nThere are two operations:\r\n- next: which updates the current value\r\n- subscribe: which fetches the latest value and updates\r\n\r\nHow to make it persistent by storing in RethinkDB?\r\n\r\nYou could have a table 'subscriptions' with documents that look like:\r\n```\r\n{\r\n   key: \"this.is.my.subscription.id\"\r\n   value: \"this is my subscription value\"\r\n}\r\n```\r\n\r\nThe above operations have these characteristics:\r\nEvery subscribe (query) ever performed on this table would always have a key to match a single document.\r\nEvery next (update) would never change the key of an existing document, but it can potentially change the value significantly (e.g. taking up more/less space).\r\n\r\nDoes RethinkDB lend it towards this use-case? Would the subscriptions table be a good approach?"
  , issueState = "closed"
  , issueId = Id 160641671
  , issueComments = 1
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 706854
                , simpleUserLogin = N "AtnNn"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/706854?v=3"
                , simpleUserUrl = "https://api.github.com/users/AtnNn"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 0
          , milestoneNumber = 26
          , milestoneClosedIssues = 316
          , milestoneDescription =
              Just
                "These issues are neither bugs nor feature requests. Spam, user questions and accidentally created issues end up here."
          , milestoneTitle = "invalid"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/26"
          , milestoneCreatedAt = 2013 (-04) (-05) 01 : 37 : 20 UTC
          , milestoneState = "closed"
          }
  }