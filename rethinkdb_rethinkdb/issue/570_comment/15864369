IssueComment
  { issueCommentUpdatedAt = 2013 (-04) (-03) 20 : 56 : 49 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 290841
        , simpleUserLogin = N "al3xandru"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/290841?v=3"
        , simpleUserUrl = "https://api.github.com/users/al3xandru"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/15864369"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/570#issuecomment-15864369"
  , issueCommentCreatedAt = 2013 (-04) (-03) 20 : 56 : 49 UTC
  , issueCommentBody =
      "If I'm reading this correctly now we'll have:\r\n\r\n1. `null` responding to equality and non-equality comparisons\r\n2. but `null` throwing in all other comparisons\r\n\r\nSo, we end up with 1 special case (non existing attribute) and half of a special case `null`. Is there any particular reason why we want to tread `null` as a (semi) special case? \r\n\r\nThe above proposals puts us very close to SQL behavior for `NULL`, but with a major difference: instead of always returning false for any comparison of `null`, we throw.\r\n\r\nIntroducing `is_null` also reminds me of SQL `IS NULL` and `HAVING`. \r\n\r\nI think in my ideal world:\r\n\r\n1. `null` would be just a normal value with a clear definition for comparisons (basically what @jdoliner defined above plus `null`.cmp(not_null) -> `false`; `not_null.cmp(`null`) -> `false`)\r\n\r\n2. the only special case would be a missing field which would deal with `has_field` and `with_field(default_values)`.\r\n\r\n\r\n"
  , issueCommentId = 15864369
  }