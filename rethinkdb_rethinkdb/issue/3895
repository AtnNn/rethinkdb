Issue
  { issueClosedAt = Just 2015 (-06) (-04) 01 : 18 : 38 UTC
  , issueUpdatedAt = 2015 (-06) (-04) 01 : 18 : 38 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/3895/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/3895"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "207de5"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/cp:clustering"
          , labelName = "cp:clustering"
          }
      ]
  , issueNumber = 3895
  , issueAssignee =
      Just
        SimpleUser
          { simpleUserId = Id 552910
          , simpleUserLogin = N "Tryneus"
          , simpleUserAvatarUrl =
              "https://avatars.githubusercontent.com/u/552910?v=3"
          , simpleUserUrl = "https://api.github.com/users/Tryneus"
          , simpleUserType = OwnerUser
          }
  , issueUser =
      SimpleUser
        { simpleUserId = Id 316661
        , simpleUserLogin = N "timmaxw"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/316661?v=3"
        , simpleUserUrl = "https://api.github.com/users/timmaxw"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Read from a majority of replicas"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/3895"
  , issueCreatedAt = 2015 (-03) (-04) 22 : 31 : 37 UTC
  , issueBody =
      Just
        "`raft` currently guarantees that if a write is acked to the client, it will be preserved during auto-failover. Some writes will be lost in auto-failover, but those writes will not be acked to the client, so it's OK. But under the current implementation, reads will sometimes see those writes. We could offer a flag to make reads go to a majority of replicas before being acked to the client; reads run with this flag would never see lost writes.\r\n\r\nThe main thing this is useful for is passing the Jepsen tests (see #1493). As a workaround, it's possible to use a write instead of a read. Writes run in \"majority\" mode will never see lost writes. So we could send a write that makes a trivial change to the document, just for the purpose of fetching the current value of the document."
  , issueState = "closed"
  , issueId = Id 59873382
  , issueComments = 10
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 316661
                , simpleUserLogin = N "timmaxw"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/316661?v=3"
                , simpleUserUrl = "https://api.github.com/users/timmaxw"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 0
          , milestoneNumber = 95
          , milestoneClosedIssues = 217
          , milestoneDescription =
              Just "To-do list before shipping auto-failover"
          , milestoneTitle = "2.1"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/95"
          , milestoneCreatedAt = 2015 (-03) (-04) 21 : 09 : 42 UTC
          , milestoneState = "closed"
          }
  }