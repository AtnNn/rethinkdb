Issue
  { issueClosedAt = Just 2016 (-04) (-29) 22 : 17 : 34 UTC
  , issueUpdatedAt = 2016 (-08) (-11) 20 : 25 : 12 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/3714/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/3714"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "0052cc"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:ReQL_proposal"
          , labelName = "tp:ReQL_proposal"
          }
      ]
  , issueNumber = 3714
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 1461947
        , simpleUserLogin = N "neumino"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1461947?v=3"
        , simpleUserUrl = "https://api.github.com/users/neumino"
        , simpleUserType = OwnerUser
        }
  , issueTitle =
      "For ordered sequences, have `changes()` return the new/old position"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/3714"
  , issueCreatedAt = 2015 (-02) (-03) 03 : 12 : 48 UTC
  , issueBody =
      Just
        "Somehow related to https://github.com/rethinkdb/rethinkdb/issues/3709\r\n\r\nTypically if I want to build a leaderboard, I'll run something like this:\r\n\r\n```\r\nr.table('users').orderBy({index: 'score'}).limit(10).changes()\r\n```\r\n\r\nAnd then try to maintain an array of the best users. \r\n\r\nThe changes I'll get will be like this:\r\n```js\r\n{\r\n    new_val: {id: 14, score: 68},\r\n    old_val: {id: 23, score: 10} \r\n}\r\n```\r\n\r\nThe problem is that while I can remove the last element `{id: 23, score: 10}` from my array, I have no idea where I should insert the new document `{id:14, score: 68}` (without going through my array).\r\nIt would be nice to return the new/old position in `changes()` for ordered sequences. Augmenting the data like what ReQL does for `getNearest` seems like a good idea to me.\r\n"
  , issueState = "closed"
  , issueId = Id 56328073
  , issueComments = 31
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 706854
                , simpleUserLogin = N "AtnNn"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/706854?v=3"
                , simpleUserUrl = "https://api.github.com/users/AtnNn"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 1
          , milestoneNumber = 17
          , milestoneClosedIssues = 593
          , milestoneDescription =
              Just
                "The scope of this issue is covered by another issue. The closing comment should link to the other issue."
          , milestoneTitle = "duplicate"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/17"
          , milestoneCreatedAt = 2013 (-03) (-29) 20 : 23 : 12 UTC
          , milestoneState = "closed"
          }
  }