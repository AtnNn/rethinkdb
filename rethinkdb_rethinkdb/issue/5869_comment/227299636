IssueComment
  { issueCommentUpdatedAt = 2016 (-06) (-20) 23 : 28 : 50 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 27381
        , simpleUserLogin = N "chovy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/27381?v=3"
        , simpleUserUrl = "https://api.github.com/users/chovy"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/227299636"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/5869#issuecomment-227299636"
  , issueCommentCreatedAt = 2016 (-06) (-20) 23 : 27 : 00 UTC
  , issueCommentBody =
      "Its not a composite unique key. I only want one unique email to be registered in a table....same for username.\r\n\r\nIs there any chance we can get a complete example with CRUD operations to the docs? I think a lot of people are going to run into this as I keep hearing about rethinkdb more. I know it would be extremely helpful for me to see a working example to manage these associations. Seems like a common request.\r\n\r\nRight now I just lookup username and email in two different queries. If either exist I throw an error back to user. If both results are empty I insert the data. I realize this isn't atomic, which is why I was hoping for something more bulletproof -- but it sounds like this suggestion you're giving me isn't bulletproof either."
  , issueCommentId = 227299636
  }