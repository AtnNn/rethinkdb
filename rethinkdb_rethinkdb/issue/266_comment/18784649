IssueComment
  { issueCommentUpdatedAt = 2013 (-06) (-04) 20 : 48 : 47 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/18784649"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/266#issuecomment-18784649"
  , issueCommentCreatedAt = 2013 (-06) (-01) 06 : 45 : 42 UTC
  , issueCommentBody =
      "Ok, let's go for Redis-like auth (http://redis.io/topics/security).\r\n\r\nHere's the draft of the spec. Please feel free to comment, but let's keep it within the confines of this specific authentication scheme.\r\n\r\n* The users can set cluster-wide auth key (stored in plain-text in semi-lattices) via admin CLI only. They can use the following command via admin CLI to set the key -- `set auth [KEYHERE]`. To unset the key -- `unset auth`.\r\n* In order to connect to a cluster that has an auth key set up, the client drivers need to connect with the auth key as follows: `r.connect(host, port, auth=\"[KEYHERE]\")`\r\n* The auth key will *not* be required to access the http server. We'll explain in the instructions how to set up a reverse proxy instead.\r\n* The auth key will *not* be required for the nodes in the cluster to connect to each other. We'll explain in the instructions how to set up proper security groups to make sure unauthorized nodes can't connect to each other."
  , issueCommentId = 18784649
  }