IssueComment
  { issueCommentUpdatedAt = 2013 (-05) (-28) 11 : 08 : 56 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/18543982"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/266#issuecomment-18543982"
  , issueCommentCreatedAt = 2013 (-05) (-28) 11 : 08 : 56 UTC
  , issueCommentBody =
      "Ok, we need a less-is-more solution here to get #892 out the door, so if anyone has ideas (pinging @srh), please add them here.\r\n\r\nI think full-blown TLS support might be a bit of an overkill since most of the time the database infrastructure is running on a protected subnet with a clear list of ip addresses permitted to contact the db server. (This might be much more relevant in case of Amazon EC2, though)\r\n\r\nOne option I see might be to simply support an API key, which wouldn't be impervious to man-in-the-middle attacks, but would be sufficient for most needs (ok in protected subnets, ok on Amazon EC2 with a firewall or for simple cases where security isn't a big risk). We could just support a cluster-wide API key in the semi-lattices, allow setting and changing it via the CLI, and allow providing it to the clients via `r.connect(..., api_key=key)`. This would probably be sufficient right now -- advanced users could use SSH tunneling for more security, and we can choose to support TLS and per-database settings later.\r\n\r\nWhat does everyone think?"
  , issueCommentId = 18543982
  }