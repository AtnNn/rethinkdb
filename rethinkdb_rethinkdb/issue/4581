Issue
  { issueClosedAt = Just 2015 (-07) (-27) 17 : 26 : 31 UTC
  , issueUpdatedAt = 2015 (-07) (-27) 17 : 26 : 45 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4581/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/4581"
  , issueClosedBy = Nothing
  , issueLabels = []
  , issueNumber = 4581
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 2072672
        , simpleUserLogin = N "chrisfosterelli"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/2072672?v=3"
        , simpleUserUrl = "https://api.github.com/users/chrisfosterelli"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "How do/can atomic upserts work?"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4581"
  , issueCreatedAt = 2015 (-07) (-26) 09 : 12 : 44 UTC
  , issueBody =
      Just
        "Hi guys!\n\nSo, to quote the [RethinkDB documentation](http://rethinkdb.com/docs/architecture/#query-execution):\n\n> Currently, values obtained by executing JavaScript code, random values, and values obtained as a result of a subquery (e.g. incrementing the value of an attribute by the value of an attribute in a different document) cannot be performed atomically. If the user runs a query that cannot be executed atomically, by default RethinkDB will throw an error\n\nWhen I attempt to `update`, I get an error _as expected_. However, this feature behaves counter-intuitively when I begin doing upserts:\n\n``` javascript\nr.table('FruitCollection').insert({ \n  id : 1, \n  fruits : r.table('otherCollection').get(1)('fruits').count()\n}, { \n  conflict : 'update' \n});\n```\n\nAs I understand it, this operation **is not atomic when updating** based on the documentation. Although, it doesn't throw an error which suggests it is atomic. However, what about this operation:\n\n``` javascript\nr.table('FruitCollection').insert({ \n  id : 1, \n  fruits : r.table('FruitCollection').get(1)('fruits').default([]).append('orange')\n}, { \n  conflict : 'update' \n});\n```\n\nThis is far more confusing as well. It uses a subquery, which should not be atomic, however it only touches one document, which is supposed to be atomic. It doesn't throw an error, so I would be led to believe this is atomic, but neither does the first query so the behaviour is very confusing.\n\nWhat I would really like to do is this:\n\n``` javascript\nr.table('FruitCollection').insert({ \n  id : 1, \n  fruits : r.row.default([]).append('orange')\n}, { \n  conflict : 'update' \n});\n```\n\nBut `r.row` is not supported when doing `insert`.\n1. Should these first two queries throw a non-atomic error and require a `nonAtomic` flag?\n2. Does it make sense to add `r.row` support to `insert`?\n3. If not, is there no way to atomically upsert using append/add/etc in Rethinkdb?\n\nI propose adding more clear documentation on atomicity to the pages on `insert`, and perhaps changing the behaviour to throw an error if it is not atomic. Thanks for all your hard work on Rethink!\n"
  , issueState = "closed"
  , issueId = Id 97301269
  , issueComments = 8
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 706854
                , simpleUserLogin = N "AtnNn"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/706854?v=3"
                , simpleUserUrl = "https://api.github.com/users/AtnNn"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 0
          , milestoneNumber = 26
          , milestoneClosedIssues = 316
          , milestoneDescription =
              Just
                "These issues are neither bugs nor feature requests. Spam, user questions and accidentally created issues end up here."
          , milestoneTitle = "invalid"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/26"
          , milestoneCreatedAt = 2013 (-04) (-05) 01 : 37 : 20 UTC
          , milestoneState = "closed"
          }
  }