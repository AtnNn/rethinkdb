IssueComment
  { issueCommentUpdatedAt = 2015 (-05) (-30) 06 : 35 : 53 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 572196
        , simpleUserLogin = N "stuartpb"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/572196?v=3"
        , simpleUserUrl = "https://api.github.com/users/stuartpb"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/106995005"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/4316#issuecomment-106995005"
  , issueCommentCreatedAt = 2015 (-05) (-30) 06 : 33 : 47 UTC
  , issueCommentBody =
      "> What do you mean by self-contained modules?\r\n\r\nA number of different scenarios where a package is designed to provide `rethinkdb` without a peer installing it, like `rethinkdbdash` or `thinky`.\r\n\r\n> As for your second point, I think it would be difficult to manage a connection pool as an abstraction over the current `Connection` interface without significant changes.\r\n\r\nWell, yeah, that's the idea: this would (in its ideal form) define a simpler abstraction for `Connection` that wouldn't be reliant on digging far into the internals of the AST for its interface. (That said, *would* it be that hard to implement a connection pool on top of the current connection interface? It seems to me you could just create a number of internal `Connection` objects in an array and then proxy the `_start` method to call out to each of them in rotation.)\r\n\r\n> Connection pooling is being discussed in #281 so you may also want to mention over there that you're interested in the ability to pass in your own pool implementation and/or low level APIs for managing connections in the pool.\r\n\r\nYeah, I'm familiar with #281, which is why I used connection pooling as an example - there are other useful extensions that would be easier to implement on top of an abstract connection interface, like #4315."
  , issueCommentId = 106995005
  }