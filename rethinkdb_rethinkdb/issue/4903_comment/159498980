IssueComment
  { issueCommentUpdatedAt = 2015 (-11) (-25) 05 : 54 : 09 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48936
        , simpleUserLogin = N "thedrow"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48936?v=3"
        , simpleUserUrl = "https://api.github.com/users/thedrow"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/159498980"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/4903#issuecomment-159498980"
  , issueCommentCreatedAt = 2015 (-11) (-25) 05 : 54 : 09 UTC
  , issueCommentBody =
      "So when the dedicated intracluster thread does not perform intracluster communication it executes another task until a message is received? Or is it idle?\r\nL/F does require coordination between threads. Running a single query in two threads also requires coordination.\r\nI see what you're talking about. In that case launching a thread per CPU core for each class sounds like the best solution to me.\r\nYou can execute queries in parallel if you have a pool of \"query\" threads that any thread can make use of. This does require a bit of locking but it means that work can be parallelized from within a random thread.  Unless I am missing something of course.\r\n\r\nCan we make the number of shards more flexible? A hashing algorithm like Murmur should allow us to add and remove shards."
  , issueCommentId = 159498980
  }