Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2015 (-09) (-01) 18 : 28 : 14 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/2495/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/2495"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "fef2c0"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/Python"
          , labelName = "Python"
          }
      , IssueLabel
          { labelColor = "fef2c0"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/Ruby"
          , labelName = "Ruby"
          }
      , IssueLabel
          { labelColor = "ededed"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:hygiene"
          , labelName = "tp:hygiene"
          }
      ]
  , issueNumber = 2495
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 258437
        , simpleUserLogin = N "srh"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/258437?v=3"
        , simpleUserUrl = "https://api.github.com/users/srh"
        , simpleUserType = OwnerUser
        }
  , issueTitle =
      "The 'db' global optarg is handled differently in the Python and Ruby drivers."
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/2495"
  , issueCreatedAt = 2014 (-06) (-02) 23 : 23 : 17 UTC
  , issueBody =
      Just
        "Suppose you make a database named \"da\" and a table inside it named \"foo\".\r\n\r\nHere's the behavior in Python:\r\n\r\n```\r\n>>> list(r.table('foo').run(db='da'))\r\n[]\r\n>>> list(r.table('foo').run(db=r.db('da')))\r\n[...]\r\nrethinkdb.errors.RqlRuntimeError: Expected type DATUM but found DATABASE:\r\ndb(\"da\") in:\r\nr.table('foo')\r\n^^^^^^^^^^^^^^\r\n```\r\n\r\nHowever, Ruby fails when you pass the raw string and succeeds when you pass `r.db('da')`.\r\n\r\nThe 'db' global optarg is not documented in the ReQL docs.  The function `conn.use('da')` is what the ReQL docs expose.  So there is the question of whether any of the drivers is \"wrong\".\r\n\r\nI find it quite peculiar that the string would have to be wrapped inside an `r.db(...)` term."
  , issueState = "open"
  , issueId = Id 34819949
  , issueComments = 14
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 883
          , milestoneNumber = 2
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone are not an immediate priority, and will be periodically revisited. When we decide to work on an issue in backlog, we'll move it to next."
          , milestoneTitle = "backlog"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/2"
          , milestoneCreatedAt = 2012 (-11) (-11) 14 : 16 : 11 UTC
          , milestoneState = "open"
          }
  }