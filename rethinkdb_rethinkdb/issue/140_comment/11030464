IssueComment
  { issueCommentUpdatedAt = 2012 (-12) (-05) 05 : 45 : 14 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 969120
        , simpleUserLogin = N "guersam"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/969120?v=3"
        , simpleUserUrl = "https://api.github.com/users/guersam"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/11030464"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/140#issuecomment-11030464"
  , issueCommentCreatedAt = 2012 (-12) (-05) 05 : 44 : 18 UTC
  , issueCommentBody =
      "@othiym23 is right. \r\n\r\nFor more info, copied from @nrstott's blog ( http://howtonode.org/promises ):\r\n\r\n> Promises based on EventEmitters were originally a part of Node.\r\n```javascript\r\nvar promise = fs.stat(\"foo\");\r\npromise.addListener(\"success\", function (value) {\r\n    // ok\r\n})\r\npromise.addListener(\"error\", function (error) {\r\n    // error\r\n});\r\n```\r\n\r\n> The style required more allocations than necessary. There were also political issues because these \"promises\" did not fulfill all of the contracts that advocates for promises insisted they must. Between aesthetics, politics, and reductionism, Ryan removed promises in the v0.2 era and settled on the present callback style, leaving promises as an exercise for user-land.\r\n```javascript\r\nfs.stat(\"foo\", function (error, value) {\r\n    if (error) {\r\n        // error\r\n    } else {\r\n        // ok\r\n    }\r\n});\r\n```\r\n\r\nI'm happy with just default callback style, but Promise is also nice to have because it makes async method chaining easier without nested callbacks."
  , issueCommentId = 11030464
  }