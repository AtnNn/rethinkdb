IssueComment
  { issueCommentUpdatedAt = 2013 (-07) (-02) 01 : 16 : 51 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 706854
        , simpleUserLogin = N "AtnNn"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/706854?v=3"
        , simpleUserUrl = "https://api.github.com/users/AtnNn"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/20321102"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/977#issuecomment-20321102"
  , issueCommentCreatedAt = 2013 (-07) (-02) 01 : 16 : 51 UTC
  , issueCommentBody =
      "I would like to propose a few modifications and additions to @mlucy's proposal.\r\n\r\nI'm going to call these objects times instead of dates.\r\n\r\nIn the iso8601 representation, the time component should be optional as well as the time zone component.\r\n\r\nThe P and T prefixes are optional for durations. One can write \"1M\" or \"1:30\" instead of \"P1M\" and \"PT1:30\". Durations can also be represented simply as a number of seconds.\r\n\r\nAll operations assume that all days have exactly 86400 seconds. \"23:60\" is considered equal to \"23:59\".\r\n\r\nr.run() takes an additional time_zone argument that specifies the default time zone used in the query. The client drivers automatically set the time_zone to the local time zone of the client. The default time zone is only used where it is explicitly mentioned in this proposal. If time_zone is set to the empty string, time zone defaulting is disabled and all operation that would require using the default time zone fail.\r\n\r\n---\r\n\r\n```\r\ntime.time_sub(other_time) => duration\r\ntime.time_{lt/gt/le/ge/eq/ne}(other_time) => bool\r\n```\r\n\r\nWhen only one of time or other_time has a time zone, the other value is considered to be in the default time zone. If both time and other_time have no time zone, neither does the result.\r\n\r\n```\r\ntime.dur_sub(duration) => other_time\r\ntime.dur_add(duration) => other_time\r\nduration.dur_{lt/gt/le/ge/eq/ne}(other_duration) => bool\r\nduration.dur_sub(other_duration) => third_duration\r\nduration.dur_add(other_duration) => third_duration\r\n````\r\n\r\n```\r\ntime.during(begin_time, end_time) => true\r\ntime.during(begin_time, duration) => true\r\ntime.during(duration, end_time) => true\r\n```\r\n\r\nThere are no intervals. `during` simply takes two arguments.\r\n\r\nTimes default to the default time zone if the time zone component is missing, unless all times have no time zones.\r\n\r\n```\r\ntime.date() => time  # the date component\r\ntime.time_of_day() => duration  # the time component\r\ntime.time_zone() => string  # time zone component\r\ntime.year() => number\r\ntime.month() => number\r\ntime.day() => number\r\ntime.week_day() => number  # 0 = Sunday, 1 = Monday, ..., 6=Saturday\r\ntime.year_day() => number  # 1-366\r\ntime.hour() => number\r\ntime.minute() => number\r\ntime.seconds() => number  # floating point\r\nduration.totalSeconds() => number\r\n```\r\n\r\nIf the time is not present, the corresponding accessors return null. Ditto for the time zone.\r\n\r\n```\r\nr.time(year, month, day, hour, minute, seconds, tz) => time\r\nr.time(year, month, day, hour, minute, seconds) => time\r\nr.time(year, month, day) => time\r\n```\r\n\r\nA constructor.\r\n\r\n```\r\nr.sunday = 0\r\nr.monday = 1\r\n...\r\nr.saturday = 6\r\nr.january = 1\r\n...\r\nr.december = 12\r\n```\r\n\r\n```\r\ntime.epoch_time() => number\r\n```\r\n\r\nEquivalent to time.time_sub(\"1970-01-01T00:00Z\").totalSeconds()\r\n\r\n```\r\nr.now() => string\r\nr.now(tz) => string\r\n```\r\n\r\nThe current time in the tz time zone. If tz is not specified, use the default time zone. If the default time zone is not specified, use \"Z\".\r\n\r\n```\r\ntime.format_time(format) => string\r\nstring.parse_time(format) => time\r\n```\r\n\r\nFormat and parse times like strftime and strptime.\r\n\r\n```\r\ntime.with_time_zone() => time\r\ntime.with_time_zone(tz) => time\r\ntime.set_time_zone(tz) => time\r\n```\r\n\r\nwith_time_zone returns the same time in a different time zone. If the time has no time zone, it converts from the default time zone. With no arguments, it converts to the default time zone.\r\n\r\nset_time_zone simply changes the time zone component.\r\n\r\n---\r\n\r\nInstead of using iso8601 string representation, times could instead be represented as a number of seconds since epoch and durations as a number of seconds. There are a few advantages:\r\n\r\n* using regular comparison and arithmetic operators instead of time_* and dur_*\r\n* using existing r.between instead of adding a new r.during\r\n* faster: no need to parse and format the time for each operation\r\n\r\nThere are also some disadvantages:\r\n\r\n* debugging is harder with seemingly opaque numbers rather than with nicely formatted strings\r\n* time zone information is lost, all times would be stored as UTC\r\n* representing a local time (with no time zone) is impossible\r\n\r\nA better representation would be a new native type instead of a pseudo-type. This would have all these advantages and none of these disadvantages."
  , issueCommentId = 20321102
  }