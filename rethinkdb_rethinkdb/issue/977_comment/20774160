IssueComment
  { issueCommentUpdatedAt = 2013 (-07) (-10) 21 : 19 : 08 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 258437
        , simpleUserLogin = N "srh"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/258437?v=3"
        , simpleUserUrl = "https://api.github.com/users/srh"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/20774160"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/977#issuecomment-20774160"
  , issueCommentCreatedAt = 2013 (-07) (-10) 21 : 19 : 08 UTC
  , issueCommentBody =
      "In response to @atnnn's response:\r\n\r\n> 1. we could make r.between polymorphic instead of adding r.during\r\n\r\nDoesn't .between operate on a table, or selection?  That's completely different and shouldn't be overloaded to this expression functionality.\r\n\r\n> 2. maybe add duration.between(duration, duration) -> bool (or fail if comparing uncomparables, such as days and months)\r\n\r\nFor the same reason, I don't think we should.  If we want some kind of `x <= y < z` comparison function of the form `y.some_method_name(x, z)`, it should work on all types.  More on that later.\r\n\r\n> 3. hours should be (0-23) [1]\r\n\r\nWhen parsing iso8601 we should allow 24:00 still if iso8601 allows it, but we should not construct such an iso 8601 string ourselves.  In other functions, like `r.time(y, m, d, h, m, s)` we should not allow 24:00:00.\r\n\r\n> 4. maybe add duration.total_seconds() -> double or null\r\n\r\nIf we use iso8601 durations there is not such a notion.  I think we should drop iso8601 durations, though.\r\n\r\n> 6. I also realised that the zero-padded notation for durations does not support weeks.\r\n\r\nWhat's this zero-paddend notation for durations that you speak of?"
  , issueCommentId = 20774160
  }