IssueComment
  { issueCommentUpdatedAt = 2013 (-07) (-03) 00 : 07 : 49 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 706854
        , simpleUserLogin = N "AtnNn"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/706854?v=3"
        , simpleUserUrl = "https://api.github.com/users/AtnNn"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/20387708"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/977#issuecomment-20387708"
  , issueCommentCreatedAt = 2013 (-07) (-03) 00 : 07 : 28 UTC
  , issueCommentBody =
      ">> \"23:60\" is considered equal to \"23:59\".\r\n>\r\n> What's the motivation for this? That sound wacky.\r\n\r\n23:60 is a valid time in iso8601, but has no equivalent in a model where all days have the same length. Supporting such times would be more complicated.\r\n\r\n> Why is Sunday numbered from 0 when january is numbered from 1?\r\n\r\nWeekdays start from 0 to make modulo arithmetic on weekdays easier:  (weekday + k) % 7 is a valid weekday.\r\n\r\nMonths start from 1 because most people expect January to be 1.\r\n\r\n>>Format and parse times like strftime and strptime.\r\n>\r\n> This seems strange to have in the server. Shouldn't people be doing this in the clients once they've retrieved the date? Also, we'd be violating the standard unless we want the clients to send the whole locale to the server.\r\n\r\nLocale would be a big problem. However I can imagine a few situations where parsing dates on the sever would be a time saver.\r\n\r\n> I think the server shouldn't ever store timezone information\r\n\r\nWe enforce that by generating an error whenever a user inserts a string that matches /Z$|[+\\-]\\d\\d:\\d\\d$/, but that is out of the scope of this proposal. I think users want to store timezone information. That is why both TIMESTAMP and DATETIME exist."
  , issueCommentId = 20387708
  }