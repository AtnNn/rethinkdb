Issue
  { issueClosedAt = Just 2015 (-11) (-17) 01 : 50 : 50 UTC
  , issueUpdatedAt = 2015 (-11) (-17) 01 : 50 : 56 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4569/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/4569"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "fef2c0"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/Python"
          , labelName = "Python"
          }
      , IssueLabel
          { labelColor = "444444"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:performance"
          , labelName = "tp:performance"
          }
      ]
  , issueNumber = 4569
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 151924
        , simpleUserLogin = N "sontek"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/151924?v=3"
        , simpleUserUrl = "https://api.github.com/users/sontek"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Optimize the python driver's serialization code."
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4569"
  , issueCreatedAt = 2015 (-07) (-23) 20 : 29 : 17 UTC
  , issueBody =
      Just
        "Currently if you want to work with 100,000 records it is extremely slow:\n\n```\n$ python foo.py \ncount is 164717\nint query took 4086ms\n```\n\n4 seconds to query 164,000 rows!  I dug into this a little bit using the python library `yappi` and the tool `kcachegrind` to see where it was spending the time.  Here is the python code I used:\n\n``` python\nimport rethinkdb as r\nimport random\nimport pytz\nimport time\nimport yappi\nfrom datetime import datetime\n\nUTC = pytz.utc\n\nYAPPI = False\nDO_CREATE = False\nDO_INSERTS = False\n\nconn = r.connect()\n\nif DO_CREATE:\n    r.table_create('test').run(conn)\n\nSTART_BIGINT = 100000000000000000\nEND_BIGINT = 999999999999999999\n\n\ndef utc_now():\n    now = datetime.utcnow()\n    tz_now = now.replace(tzinfo=UTC)\n    return tz_now\n\n\ndef get_rint(start=1000000, end=9999999):\n    \"\"\"\n    Generate a very large integer\n    :return:\n    \"\"\"\n    return random.randint(start, end)\n\n\ndef get_bigint():\n    \"\"\"\n    Generate a random BIGINT\n    :return:\n    \"\"\"\n    return get_rint(start=START_BIGINT, end=END_BIGINT)\n\n\nif DO_INSERTS:\n    for i in range(0, 300000):\n        r.table('test').insert({\n            'respondent_id': get_bigint(),\n            'row_id': get_bigint(),\n            'column_id': get_bigint(),\n            'value_id': get_bigint(),\n            'rid1': get_bigint(),\n            'rid2': get_bigint(),\n            'rid3': get_rint(),\n            'now': utc_now()\n        }).run(conn)\n\nstart = time.time()\n\nif YAPPI:\n    yappi.set_clock_type('cpu')\n    yappi.start(builtins=True)\n\nresult = r.table('test').run(conn)\ndata = []\nfor row in result:\n    data.append(row)\n\ncount = len(data)\nend = time.time()\n\nif YAPPI:\n    stats = yappi.get_func_stats()\n    stats.save('callgrind.out', type='callgrind')\n    print('checkout callgrind.out')\n\nprint(\"count is %s\" % count)\nduration = int(1000 * (end - start))\nprint(\"int query took %sms\" % duration)\n```\n\nand this showed that most of the time is spent in `recursively_convert_pseudo_types`, here is a screenshot of the kcachegrind:\n\n![screenshot from 2015-07-23 13 06 13](https://cloud.githubusercontent.com/assets/151924/8861344/cba7a5cc-313e-11e5-8588-a630ee983175.png)\n"
  , issueState = "closed"
  , issueId = Id 96898802
  , issueComments = 27
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 706854
                , simpleUserLogin = N "AtnNn"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/706854?v=3"
                , simpleUserUrl = "https://api.github.com/users/AtnNn"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 0
          , milestoneNumber = 64
          , milestoneClosedIssues = 228
          , milestoneDescription =
              Just
                "These issues are no longer relevant to the current version of RethinkDB"
          , milestoneTitle = "outdated"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/64"
          , milestoneCreatedAt = 2014 (-03) (-28) 00 : 17 : 40 UTC
          , milestoneState = "closed"
          }
  }