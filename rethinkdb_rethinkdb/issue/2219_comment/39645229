IssueComment
  { issueCommentUpdatedAt = 2014 (-04) (-05) 17 : 37 : 51 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 552910
        , simpleUserLogin = N "Tryneus"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/552910?v=3"
        , simpleUserUrl = "https://api.github.com/users/Tryneus"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/39645229"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2219#issuecomment-39645229"
  , issueCommentCreatedAt = 2014 (-04) (-05) 17 : 37 : 51 UTC
  , issueCommentBody =
      "This appears to be reproducible by telling rethinkdb to connect to the same node twice on startup.\r\n\r\nExample:\r\n`rethinkdb --bind all --join newton:60435 --join newton:60435`\r\n\r\nFull backtrace:\r\n```c\r\nerror: Error in ../src/rpc/connectivity/cluster.hpp at line 50:\r\nerror: Guarantee failed: [find(addr) == vec.end()]\r\nerror: Backtrace:\r\nerror: Sat Apr  5 10:27:20 2014\r\n\r\n       1: rethinkdb_backtrace(void**, int) at rethinkdb_backtrace.cc:101\r\n       2: backtrace_t::backtrace_t() at backtrace.cc:202\r\n       3: lazy_backtrace_formatter_t::lazy_backtrace_formatter_t() at backtrace.cc:282\r\n       4: format_backtrace(bool) at backtrace.cc:197\r\n       5: report_fatal_error(char const*, int, char const*, ...) at errors.cc:83\r\n       6: peer_address_set_t::insert(peer_address_t const&) at cluster.hpp:50\r\n       7: look_up_peers_addresses(std::vector<host_and_port_t, std::allocator<host_and_port_t> > const&) at command_line.cc:701\r\n       8: run_rethinkdb_serve(base_path_t const&, serve_info_t const&, file_direct_io_mode_t, int, unsigned long, uuid_u const*, cluster_semilattice_metadata_t const*, directory_lock_t*, bool*) at command_line.cc:841\r\n       9: run_rethinkdb_porcelain(base_path_t const&, name_string_t const&, file_direct_io_mode_t, int, unsigned long, bool, serve_info_t const&, directory_lock_t*, bool*) at command_line.cc:900\r\n       10: void std::_Bind<void (*(base_path_t, name_string_t, file_direct_io_mode_t, int, unsigned long, bool, serve_info_t, directory_lock_t*, bool*))(base_path_t const&, name_string_t const&, file_direct_io_mode_t, int, unsigned long, bool, serve_info_t const&, directory_lock_t*, bool*)>::__call<void, , 0, 1, 2, 3, 4, 5, 6, 7, 8>(std::tuple<>&&, std::_Index_tuple<0, 1, 2, 3, 4, 5, 6, 7, 8>) at functional:1147\r\n       11: void std::_Bind<void (*(base_path_t, name_string_t, file_direct_io_mode_t, int, unsigned long, bool, serve_info_t, directory_lock_t*, bool*))(base_path_t const&, name_string_t const&, file_direct_io_mode_t, int, unsigned long, bool, serve_info_t const&, directory_lock_t*, bool*)>::operator()<, void>() at functional:1206\r\n       12: std::_Function_handler<void (), std::_Bind<void (*(base_path_t, name_string_t, file_direct_io_mode_t, int, unsigned long, bool, serve_info_t, directory_lock_t*, bool*))(base_path_t const&, name_string_t const&, file_direct_io_mode_t, int, unsigned long, bool, serve_info_t const&, directory_lock_t*, bool*)> >::_M_invoke(std::_Any_data const&) at functional:1780\r\n       13: std::function<void ()>::operator()() const at functional:2162\r\n       14: starter_t::run_wrapper(std::function<void ()> const&) at runtime.cc:61\r\n       15: std::_Mem_fn<void (starter_t::*)(std::function<void ()> const&)>::operator()(starter_t*, std::function<void ()> const&) const at functional:551\r\n       16: void std::_Bind<std::_Mem_fn<void (starter_t::*)(std::function<void ()> const&)> (starter_t*, std::function<void ()>)>::__call<void, , 0, 1>(std::tuple<>&&, std::_Index_tuple<0, 1>) at functional:1147\r\n       17: void std::_Bind<std::_Mem_fn<void (starter_t::*)(std::function<void ()> const&)> (starter_t*, std::function<void ()>)>::operator()<, void>() at functional:1206\r\n       18: std::_Function_handler<void (), std::_Bind<std::_Mem_fn<void (starter_t::*)(std::function<void ()> const&)> (starter_t*, std::function<void ()>)> >::_M_invoke(std::_Any_data const&) at functional:1780\r\n       19: std::function<void ()>::operator()() const at functional:2162\r\n       20: callable_action_instance_t<std::function<void ()> >::run_action() at callable_action.hpp:28\r\n       21: callable_action_wrapper_t::run() at runtime_utils.cc:43\r\n       22: coro_t::run() at coroutines.cc:199\r\n       23: coro_t* coro_t::spawn_sometime<std::function<void ()> >(std::function<void ()> const&) at coroutines.hpp:58\r\n       24: starter_t::on_thread_switch() at runtime.cc:57\r\n       25: linux_message_hub_t::on_event(int) at message_hub.cc:154\r\n       26: epoll_event_queue_t::run() at epoll.cc:115\r\n       27: linux_thread_pool_t::start_thread(void*) at thread_pool.cc:158\r\n       28: /lib/x86_64-linux-gnu/libpthread.so.0(+0x7e9a) [0x7f26bea89e9a] at 0x7f26bea89e9a (/lib/x86_64-linux-gnu/libpthread.so.0)\r\n       29: clone+0x6d at 0x7f26be7b63fd (/lib/x86_64-linux-gnu/libc.so.6)\r\n```\r\n\r\nI don't think this should be too hard to catch at startup, and we only use this structure then, so this can only happen due to a configuration error.  I can probably have a fix in for the 1.12.2 release if we're doing it on Monday.\r\n\r\n@wojons, in the meantime, could you make sure you aren't passing the same `--join` parameter multiple times?  It could even be that they appear to be different but evaluate to the same IP address in some cases."
  , issueCommentId = 39645229
  }