Issue
  { issueClosedAt = Just 2015 (-03) (-03) 21 : 15 : 33 UTC
  , issueUpdatedAt = 2015 (-03) (-03) 21 : 15 : 33 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/1606/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/1606"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "444444"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:performance"
          , labelName = "tp:performance"
          }
      ]
  , issueNumber = 1606
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Order tokens interact badly with throttling"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/1606"
  , issueCreatedAt = 2013 (-11) (-04) 19 : 26 : 47 UTC
  , issueBody =
      Just
        "As far as I understand, we generate an order token for each transaction when it hits the master of the respective shard.\r\n\r\nWhen the query gets processed, it first waits for all transactions that have an older order token (except that reads can get through in parallel). Then it starts a transaction, acquires the superblock, and releases the order token, signalling to other later transactions that they can now proceed. These three steps currently happen in exactly this order.\r\n\r\nThere is the following problem here:\r\nStarting a write transaction can block. Right now it can block for two reasons:\r\n1. The flush lock has to be acquired. This will go away with the new buffer cache.\r\n2. The write transaction is throttled because there are too many dirty blocks in the cache.\r\n\r\nThis is a problem because now throttled write transactions are also going to block all read transactions on the same shard. That's not good.\r\n\r\nThrottling was done at the start of a transaction rather than at block acquisition for a reason. The reason being that a throttled transaction should not block out other transactions not affected by throttling because it is holding locks on some blocks. In other words the throttling was happening *before* the write transaction acquired any lock. Now however with the order tokens, we have an additional level of locking around everything, and it includes starting the transaction.\r\n\r\nThere seem to be different ways to solve this.\r\n* I could imagine that we can somehow make use of the new concept of parent/child transactions that the new cache has to redesign the order token system to not get into issues like this. The idea here is that we could enforce the ordering on a per client connection rather than on a per-master level. That would avoid this issue in a very clean way. @srh designed the cache to support this. However I'm not sure about all the implications this would have for secondary indexes (@jdoliner any thoughts on this?).\r\n* We could push up throttling to the cluster layer. The master would throttle writes before it assigns order tokens to the query. This seems bad because it breaks the abstraction. It also might be tricky to do this because ideally the master would have to be aware of the number of dirty pages on the secondaries."
  , issueState = "closed"
  , issueId = Id 22073289
  , issueComments = 7
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 505365
                , simpleUserLogin = N "danielmewes"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/505365?v=3"
                , simpleUserUrl = "https://api.github.com/users/danielmewes"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 0
          , milestoneNumber = 89
          , milestoneClosedIssues = 117
          , milestoneDescription = Just ""
          , milestoneTitle = "2.0"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/89"
          , milestoneCreatedAt = 2015 (-01) (-26) 07 : 45 : 17 UTC
          , milestoneState = "closed"
          }
  }