Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2015 (-08) (-19) 04 : 33 : 24 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/1514/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/1514"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "0052cc"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:ReQL_proposal"
          , labelName = "tp:ReQL_proposal"
          }
      ]
  , issueNumber = 1514
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueTitle =
      "ReQL proposal: Command to obtain results of previous noreply writes."
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/1514"
  , issueCreatedAt = 2013 (-10) (-04) 19 : 17 : 43 UTC
  , issueBody =
      Just
        "_Use cases:_\nAfter issuing a number of noreply writes, a user wants to retrieve accumulated results to see if there was an error and if yes what error it was.\n\nA user wants to wait until previously issued noreply operations have finished (i.e. queries from other connections can see their changes).\n\n_The proposal:_\nI propose adding a global `r.wait()` term.\nBy default, `wait()` just waits for all noreply operations on this connection to finish before it returns. Its result would just be something like `{waited: true}`.\nYou can specify the optarg `r.wait(return_results=True)`. \nIn that case, the command returns `{waited: true, results: [result1, result2, ...]}` where result1, result2, ... are the result objects of all noreply queries (regardless of whether they were writes or not, should a user ever issue a noreply read. However probably ignoring stream results) that have happened since the last call to wait() or since opening the connection, whichever is more recent.\n\nA disadvantage of this is that we can end up having to store a large number of result objects on the server, which the user might never actually retrieve. Here's an alternative, which might be better: We ignore everything except for our usual write operations (insert, replace, update, delete). The result of `r.wait(return_results=True)` could then look as follows:\n `{waited: true, result: merged_result}` where merged_result is a single merged write result object with the usual fields (inserted, updated, generated keys etc.).\nI personally favor this alternative at the moment.\n\n_Related:_\nhttps://github.com/rethinkdb/rethinkdb/issues/1388 is where we could make use of such a command in our drivers.\nhttps://github.com/rethinkdb/rethinkdb/issues/1046 proposes adding a sync() command to force soft durability writes to disk. We could in theory merge the noreply wait command together with sync, but I believe that would be confusing to the user. The semantics and use cases are really quite different.\n"
  , issueState = "open"
  , issueId = Id 20544497
  , issueComments = 43
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 882
          , milestoneNumber = 2
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone are not an immediate priority, and will be periodically revisited. When we decide to work on an issue in backlog, we'll move it to next."
          , milestoneTitle = "backlog"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/2"
          , milestoneCreatedAt = 2012 (-11) (-11) 14 : 16 : 11 UTC
          , milestoneState = "open"
          }
  }