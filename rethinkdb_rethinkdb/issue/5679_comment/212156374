IssueComment
  { issueCommentUpdatedAt = 2016 (-04) (-19) 22 : 36 : 13 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 159819
        , simpleUserLogin = N "cefn"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/159819?v=3"
        , simpleUserUrl = "https://api.github.com/users/cefn"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/212156374"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/5679#issuecomment-212156374"
  , issueCommentCreatedAt = 2016 (-04) (-19) 22 : 36 : 13 UTC
  , issueCommentBody =
      "It's probably lodash I had the 'matches' notion from, see [https://lodash.com/docs#matches](https://lodash.com/docs#matches)\r\n\r\nHow about fieldsEq(). This name might be appropriate if you choose that the primitive should explicitly test for eq, but one level down.\r\n\r\nAlternatively if you allow the partial matching logic to go all the way down like lodash (e.g. eq is only assessed at the level of javascript primitive types, and every Object or array above that level can have additional fields which are not in the map, without failing the test, then you could call it...\r\n* partialMatch\r\n* hasTree\r\n* hasLeaves"
  , issueCommentId = 212156374
  }