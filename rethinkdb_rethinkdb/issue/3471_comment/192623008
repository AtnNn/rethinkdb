IssueComment
  { issueCommentUpdatedAt = 2016 (-03) (-05) 11 : 06 : 02 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 372365
        , simpleUserLogin = N "analytik"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/372365?v=3"
        , simpleUserUrl = "https://api.github.com/users/analytik"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/192623008"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3471#issuecomment-192623008"
  , issueCommentCreatedAt = 2016 (-03) (-05) 11 : 06 : 02 UTC
  , issueCommentBody =
      "+1\r\n\r\nI'm aching to replace RabbitMQ with RethinkDB, since we mostly need it for persistent event and worker queues, and querying and updating documents in RethinkDB would be much easier than setting up queues/exchanges/dead letter queues in RabbitMQ. While we can achieve this with saving a watermark on every update + reading it on every app server restart, it's not as elegant and atomic.\r\n\r\nSubsequent feature wish after this is implemented would be to have transparent database-side load balancing of worker queues between clients - maybe with round robin.\r\n\r\nFor example, if CPU usage of worker servers is high, Kubernetes auto-scales them, new servers connect to some named RethinkDB changefeed, and don't have to worry about which part of documents to receive. (In an old project this was bluntly solved by doing a modulo on ID, e.g. for 10 servers, server 1 would process `id % 10 === 0`.)"
  , issueCommentId = 192623008
  }