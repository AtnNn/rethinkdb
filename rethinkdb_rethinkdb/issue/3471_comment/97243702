IssueComment
  { issueCommentUpdatedAt = 2015 (-04) (-28) 22 : 19 : 47 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1366
        , simpleUserLogin = N "deontologician"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1366?v=3"
        , simpleUserUrl = "https://api.github.com/users/deontologician"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/97243702"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3471#issuecomment-97243702"
  , issueCommentCreatedAt = 2015 (-04) (-28) 22 : 19 : 47 UTC
  , issueCommentBody =
      "> Many users don't close their cursors before closing their connection\r\n\r\ngood point. default auto-resumption is probably a bad idea\r\n\r\n> It seems to be a frequently requested feature to protect against intermittent client connectivity issues. TCP as usually implemented/configured doesn't do a very good job for those, since most OS terminate TCP connections pretty quickly if no packages can be exchanged, or if they note that the underlying link is down.\r\n\r\nI mostly meant, we can just immediately try reconnecting and let TCP tell us if it succeeded/failed. I guess the alternative is implementing our own exponential backoff loop etc in the driver. At that point though it's probably worth just forcing the user to write that loop themselves and give them access to resume.\r\n\r\n> This proposal clearly only solves a limited set of use cases, but it seems relevant and provides us with a path that's doable for 2.1\r\n\r\nI wasn't arguing for increasing the scope of the guarantees, I was just making the point that since the guarantees are light and basically only meant to jump small gaps in connectivity, it makes sense to have auto-resumption rather than explicit resumption.\r\n"
  , issueCommentId = 97243702
  }