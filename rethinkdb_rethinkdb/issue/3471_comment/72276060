IssueComment
  { issueCommentUpdatedAt = 2015 (-01) (-30) 21 : 48 : 29 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 271965
        , simpleUserLogin = N "ProTip"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/271965?v=3"
        , simpleUserUrl = "https://api.github.com/users/ProTip"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/72276060"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3471#issuecomment-72276060"
  , issueCommentCreatedAt = 2015 (-01) (-30) 21 : 48 : 29 UTC
  , issueCommentBody =
      "Hi guys, here is my 2c.  I apologise if it's a bit of a ramble :|\r\n\r\nEverything you can think of has or is being turned into a webapp.  I work at a company that makes online business software that handles payrolls, taxes, appointments, and the whole lot.  Good enough for web apps seems like a murky place.  I would like to guarantee at least once notification with my applications.  I know Google does; sometimes I get duplicate hangout messages :|\r\n\r\nI believe that the primary use of a change feed is synchronization, but not just to other databases.  As a changefeed consumer, I'm synchronizing an event in the database with some business logic, SNS for mobile push, elastic-search, a users screen, or even a RDBMS.  I want a changefeed that's durably persisted to and committed to atomically with the data.  I want it to store my progress for me and to advance that position when I let it know I've processed the changes.  I'm in agreeance with @coffeemug  in that I don't want to have to store this information *back* into the database myself.  I want it to store the changes forever or until I explicitly remove the feed.  Essentially, I want a Kafka topic of query changes."
  , issueCommentId = 72276060
  }