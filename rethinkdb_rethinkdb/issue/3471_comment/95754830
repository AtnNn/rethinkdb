IssueComment
  { issueCommentUpdatedAt = 2015 (-04) (-24) 00 : 02 : 10 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/95754830"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3471#issuecomment-95754830"
  , issueCommentCreatedAt = 2015 (-04) (-24) 00 : 02 : 10 UTC
  , issueCommentBody =
      "I think maybe part of the reason it seems unreasonable is that the current interface makes it look like you're creating something the way you would with a table.  If you think of it as resuming an open connection, requiring that people reconnect to the same server makes a lot more sense.  Maybe we could tweak the API to make it seem more reasonable?  (For example, `r.table('test').changes(resume_token: XXX)` and `r.resume(XXX)`, although that particular interface sucks.)\r\n\r\nLetting people connect to any node in the cluster to resume a changefeed would be significantly harder, and would about double intracluster traffic (since we have to get all the changes into one place into the queue, then from the queue to the node the user connected to).  We'd also have to decide where the queue lives; would it just stay on the node you connected to the first time forever?\r\n\r\nIf you think we really have to make them resumable from anywhere then we can do it, of course, but I'd prefer to come up with a clever way to avoid that."
  , issueCommentId = 95754830
  }