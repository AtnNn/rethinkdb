IssueComment
  { issueCommentUpdatedAt = 2015 (-04) (-24) 03 : 54 : 28 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/95791931"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/873#issuecomment-95791931"
  , issueCommentCreatedAt = 2015 (-04) (-24) 03 : 54 : 28 UTC
  , issueCommentBody =
      "Ah, right, I forgot that `merge` can accept `n` arguments which can be either objects or functions.  That actually throws a bit of a wrench into this, because the JS and Ruby drivers still use \"an object as the last argument\" to represent optional arguments, so we can't easily distinguish in the clients between merging an actual object with a single key `conflict` and specifying the `conflict` optarg.\r\n\r\nWe could potentially get around this in the server by having a rule that if the `conflict` optarg is specified and it resolves to a value `X` that isn't a function, we treat that the same as having an object `{conflict: X}` as an extra argument to merge.  That's hacky but it would work I think."
  , issueCommentId = 95791931
  }