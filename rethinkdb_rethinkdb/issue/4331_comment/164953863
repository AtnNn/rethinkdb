IssueComment
  { issueCommentUpdatedAt = 2015 (-12) (-16) 01 : 21 : 24 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/164953863"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/4331#issuecomment-164953863"
  , issueCommentCreatedAt = 2015 (-12) (-16) 01 : 21 : 24 UTC
  , issueCommentBody =
      "As a first step, we could implement this only for read queries.\r\n\r\nImplementation-wise, I think this would look somewhat like this:\r\n1. Attempt to run the query\r\n2. If it fails because of an availability issue, run a `wait({waitFor: \"ready_for_reads\"})` on the unavailable table\r\n3, Go back to step 1 until it succeeds, or the retry timeout is reached\r\n\r\nNote that for step 2 we need to extend the unavailability error to include the UUID of the unavailable table. This might also be useful for https://github.com/rethinkdb/rethinkdb/issues/5057 ."
  , issueCommentId = 164953863
  }