IssueComment
  { issueCommentUpdatedAt = 2015 (-01) (-09) 01 : 52 : 15 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 877936
        , simpleUserLogin = N "marshall007"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/877936?v=3"
        , simpleUserUrl = "https://api.github.com/users/marshall007"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/69282165"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2578#issuecomment-69282165"
  , issueCommentCreatedAt = 2015 (-01) (-09) 01 : 49 : 08 UTC
  , issueCommentBody =
      "@mlucy I didn't mean to conflate the terms \"curried\" and \"partially applied\". I only think partial application should be supported. So situations where the arity is unknown wouldn't be a problem.\r\n\r\n```js\r\n.filter(r.contains(1)(2)(3)) // curried\r\n.filter(r.contains(1, 2, 3)) // partially applied\r\n```\r\n\r\nSimplified implementation example (can be run in data explorer):\r\n\r\n```js\r\nr.contains = function () {\r\n  var args = arguments;\r\n  return function (row) {\r\n    return row.contains.apply(row, args);\r\n  }\r\n};\r\n\r\nr.expr([[1], [2]]).filter(r.contains(1)) // -> [ [1] ]\r\n```"
  , issueCommentId = 69282165
  }