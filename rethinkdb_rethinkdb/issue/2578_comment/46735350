IssueComment
  { issueCommentUpdatedAt = 2014 (-06) (-20) 23 : 03 : 46 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/46735350"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2578#issuecomment-46735350"
  , issueCommentCreatedAt = 2014 (-06) (-20) 23 : 03 : 46 UTC
  , issueCommentBody =
      "Thanks for the suggestion @marshall007 .\r\n\r\nMaking `match` polymorphic on arrays might make sense, but it's ambiguous what it should mean.  `match` can be used as a predicate, but it can also be used to extract information -- it might not be clear to people whether `array.match` means `array.filter(match)` or `array.map(match)`.  (Also, as an aside, you can use `contains(...)` with a function instead of `.filter(...).count().gt(0)`.)\r\n\r\nScheduling this for subsequent and tagging as a ReQL proposal so we can talk about it when the current batch of changes is done.\r\n\r\nI would have to think more about empty arrays being falsy, but my gut feeling is that it won't work well just because it's unexpected -- false should obviously be false, and null being false is really common (Ruby, CL, etc.), but having a bunch of different things convert to false is something only JS does, and it can be really confusing if you don't have all the rules in your head."
  , issueCommentId = 46735350
  }