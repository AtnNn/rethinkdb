IssueComment
  { issueCommentUpdatedAt = 2013 (-06) (-10) 18 : 37 : 52 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 43867
        , simpleUserLogin = N "jdoliner"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/43867?v=3"
        , simpleUserUrl = "https://api.github.com/users/jdoliner"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/19217749"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/969#issuecomment-19217749"
  , issueCommentCreatedAt = 2013 (-06) (-10) 18 : 37 : 44 UTC
  , issueCommentBody =
      "> How do you return them to the user?\r\n\r\nI was imagining that `{\"foo\" : r.table(\"foo\"), \"bar\" : r.table(\"bar\"}` would return the same thing as: \r\n`{\"foo\" : r.table(\"foo\").run(), \"bar\" : r.table(\"bar\").run()}`. I'm unclear on why you'd need a composite cursor here.\r\n\r\n> What if the enclosing object is stored in a variable?\r\n\r\nWe could just disallow storing data which contains streams in it in variables. It might be a bit of a pain to traverse the object looking for streams but it doesn't seem impossible to me.\r\n\r\n> What do you do if people try to compare two such objects?\r\n\r\nSimilarly we'd have to disallow comparing objects that contain streams. Basically everything you can't do with a stream you now can't do with objects containing streams."
  , issueCommentId = 19217749
  }