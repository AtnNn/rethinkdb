Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2015 (-08) (-10) 13 : 32 : 31 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/1190/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/1190"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "0052cc"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:ReQL_proposal"
          , labelName = "tp:ReQL_proposal"
          }
      ]
  , issueNumber = 1190
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 43867
        , simpleUserLogin = N "jdoliner"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/43867?v=3"
        , simpleUserUrl = "https://api.github.com/users/jdoliner"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Allow for curried functions."
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/1190"
  , issueCreatedAt = 2013 (-07) (-19) 06 : 36 : 35 UTC
  , issueBody =
      Just
        "I think we could make a number of awesome additions to our syntax by adding curried functions to our language. Passing functions is an integral part of our language at this point but it can get verbose quickly. It's important to keep in mind throughout this issue that there are drivers written in languages besides Ruby. @mlucy you use the argument \"this is only marginally better than the alternative in Ruby\" far too often and it leads to a protocol designed around Ruby.\r\n\r\nThe basic idea of a curried function is that you can construct a new function by passing an existing function fewer arguments than it normally takes. For example `r.add` is a function which normally takes 2 arguments (actually it's variadic right now but we'll talk about that later). If we allow for curried functions then `r.add` could be passed wherever we accept a 2 argument function, in particular it can be passed to reduce like so:\r\n\r\n```Javascript\r\n// old version\r\nr.table(\"foo\").reduce(function (left, right) { return left.add(right); })\r\n// with currying\r\nr.table(\"foo\").reduce(r.add)\r\n```\r\n\r\nCurrying also allows you to pass a single argument to a binary function to create a unary function. Suppose you have a stream of numbers and want to add one to them:\r\n\r\n```Javascript\r\nstream.map(r.add(1))\r\n```\r\n\r\nthis also gets really nice if you add a pattern matching version of update. Consider the use case of incrementing a field:\r\n\r\n```Javascript\r\n// old version\r\nr.table(\"foo\").update(function (doc) { return {\"counter\" : doc(\"counter\").add(1)}; })\r\n\r\n// can be made shorter with r.row but that doesn't work in nested cases\r\nr.table(\"foo\").update({\"counter\" : r.row(\"counter\").add(1))\r\n\r\n// curried version, works everywhere\r\nr.table(\"foo\").update({\"counter\" : r.add(1)})\r\n```\r\n\r\nCurried functions are also absolutely awesome if you combine them with pattern matching `filter` syntax. For example consider the case of wanting to check if a user wrote a particular article:\r\n\r\n```Javascript\r\n// old version\r\nr.table(\"foo\").filter(function (doc) {return  doc(\"articles\").contains(id);})\r\n\r\n// curried version\r\nr.table(\"foo\").filter({\"articles\" : r.contains(id)})\r\n```\r\n\r\nI'm sure there are a bunch of other places we can find where curried functions are awesome.\r\n\r\n---\r\n\r\nIt was pointed out by @mlucy that currying doesn't play nicely with variadic functions. I'm not 100% sure that it's impossible to have both although it seems like it might be. However I think that the syntax here is nice enough that it would be worth sacrificing variadic functions. I really don't think they're that useful to be honest. Basically all code I've seen written in Ruby and Python use infix `+` rather than variadic `r.add` and in Javascript people mostly do `foo.add(1)` rather than `r.add(foo, 1)."
  , issueState = "open"
  , issueId = Id 16958050
  , issueComments = 13
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 883
          , milestoneNumber = 2
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone are not an immediate priority, and will be periodically revisited. When we decide to work on an issue in backlog, we'll move it to next."
          , milestoneTitle = "backlog"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/2"
          , milestoneCreatedAt = 2012 (-11) (-11) 14 : 16 : 11 UTC
          , milestoneState = "open"
          }
  }