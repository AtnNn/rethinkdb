Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2016 (-08) (-16) 23 : 05 : 12 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/6061/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/6061"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "0052cc"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:ReQL_proposal"
          , labelName = "tp:ReQL_proposal"
          }
      ]
  , issueNumber = 6061
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 10577851
        , simpleUserLogin = N "chacalle"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/10577851?v=3"
        , simpleUserUrl = "https://api.github.com/users/chacalle"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "hasFields doesn't return true for null values"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/6061"
  , issueCreatedAt = 2016 (-08) (-16) 22 : 49 : 45 UTC
  , issueBody =
      Just
        "hasFields only returns true if a document has the field and the field is not null. Keys returns all keys even if they are null. It would be nice to be able to specify to hasFields whether or not it should return true for null values. I have this use case where I want to insert documents like this\r\n```\r\n{id: 0, a: [0, 1], num:2, b: null, c: 4, d: 6, e: null}\r\n{id: 0, a: [1,2], num:2, b: 3, c: 5, d: null, f: null}\r\n```\r\nand want to get this after conflict resolution\r\n```\r\n{id:0, a:[0,1,2], num:3, b:3, c:4, d:6, e:null, f:null}\r\n```\r\n```\r\nr.table('foo').insert(\r\n\t [{id: 0, a: [0, 1], num:2, b: null, c: 4, d: 6, e: null}, {id: 0, a: [1,2], num:2, b: 3, c: 5, d: null, f: null}],\r\n\t  {\r\n\t\tconflict: function(id, old_doc, new_doc){\r\n\t\t  return (new_doc.keys().setUnion(old_doc.keys()).map(function (key) {\r\n\t\t\treturn r.branch(old_doc.hasFields(key).and(new_doc.hasFields(key).not()),\r\n\t\t\t  [key, old_doc(key)],\r\n\t\t\t  new_doc.hasFields(key).and(old_doc.hasFields(key).not()),\r\n\t\t\t  [key, new_doc(key)],\r\n\t\t\t  r.branch(key.eq('a'), \r\n\t\t\t\t[key, old_doc('a').setUnion(new_doc('a'))],\r\n\t\t\t\tkey.eq('num'),\r\n\t\t\t\t[key, old_doc('a').setUnion(new_doc('a')).count()],\r\n\t\t\t\tr.branch(old_doc(key).eq(null).and(new_doc(key).eq(null).not()),\r\n\t\t\t\t  [key, new_doc(key)],\r\n\t\t\t\t  [key, old_doc(key)])\r\n\t\t\t  )\r\n\t\t\t)\r\n\t\t  })).coerceTo('object')\r\n\t\t}\r\n\t  })\r\n```\r\n\r\nIt fails because the first two tests for if the field is only in one document and not the other, fails when checking `e` and `f`. This would work if hasFields was also able to return true if the field is a null value. "
  , issueState = "open"
  , issueId = Id 171536262
  , issueComments = 2
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 883
          , milestoneNumber = 2
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone are not an immediate priority, and will be periodically revisited. When we decide to work on an issue in backlog, we'll move it to next."
          , milestoneTitle = "backlog"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/2"
          , milestoneCreatedAt = 2012 (-11) (-11) 14 : 16 : 11 UTC
          , milestoneState = "open"
          }
  }