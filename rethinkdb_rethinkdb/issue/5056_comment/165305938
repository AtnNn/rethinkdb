IssueComment
  { issueCommentUpdatedAt = 2015 (-12) (-17) 01 : 11 : 12 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/165305938"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/5056#issuecomment-165305938"
  , issueCommentCreatedAt = 2015 (-12) (-17) 01 : 11 : 12 UTC
  , issueCommentBody =
      "Yeah it would be quite fragile and probably wouldn't behave as users expect.\r\n\r\nI'm going to go ahead and mark this as settled with:\r\n```js\r\ncursor.each(function(row), function(err)) // callback-style\r\ncursor.each(function(row, done), function(err)) // callback-style w/ async handler\r\ncursor.each(function(row)).catch(function(err)) // promise-style from #4784\r\n```\r\nand keeping `eachAsync` as a deprecated alias for the new `each` for now.\r\n\r\nMy only remaining concern is that it might be a bit of a hassle to implement the `cursor.each(function(row, done), function(err)` version. Assuming I understand it correctly, it will require that we only call the on-row callback after we've determined whether there are more rows or not.\r\n@marshall007 How important do you think that variant is?"
  , issueCommentId = 165305938
  }