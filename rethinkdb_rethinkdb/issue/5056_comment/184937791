IssueComment
  { issueCommentUpdatedAt = 2016 (-02) (-17) 00 : 21 : 34 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 877936
        , simpleUserLogin = N "marshall007"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/877936?v=3"
        , simpleUserUrl = "https://api.github.com/users/marshall007"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/184937791"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/5056#issuecomment-184937791"
  , issueCommentCreatedAt = 2016 (-02) (-17) 00 : 21 : 34 UTC
  , issueCommentBody =
      "@nighelles yea, I think it should take be a standard Node-style callback `(err, data)`. If `err != null` we're going to abort iteration and propagate the error to the `onFinished` callback. Analogous to what happens if you throw or return a rejected promise from `eachAsync` today. It's the mechanism to allow you to bail out early.\r\n\r\nWhat we do (if anything) with the second argument `data` is an open question related to point (2) above. I think we should probably just ignore it for now because accumulating results by default would be bad if you're scanning an entire table or something.\r\n\r\nLater on we could expose a `cursor.map()` which would have all the same semantics as `cursor.each()` but also accumulate the results for you."
  , issueCommentId = 184937791
  }