Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2015 (-01) (-09) 07 : 27 : 34 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/2578/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/2578"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "0052cc"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:ReQL_proposal"
          , labelName = "tp:ReQL_proposal"
          }
      ]
  , issueNumber = 2578
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 877936
        , simpleUserLogin = N "marshall007"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/877936?v=3"
        , simpleUserUrl = "https://api.github.com/users/marshall007"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Simplify r.match() usage when dealing with arrays"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/2578"
  , issueCreatedAt = 2014 (-06) (-20) 02 : 29 : 58 UTC
  , issueBody =
      Just
        "When filtering documents based on nested string arrays using `r.match()`, it become a bit hairy. It would be great if `array.match(regexp)` queries were automatically expanded to a filter function. With the current behavior you have to do something like this:\n\n``` js\nr.expr([\n  { tags: [ 'hello', 'world' ] },\n  { tags: [ 'world' ] }\n])\n.filter(\n  r.row('tags').filter(function (tag) {\n    return tag.match('^h');\n  }).count().gt(0)\n)\n```\n\nIf the query were automatically expanded, you could get away with simply:\n\n``` js\nsequence.filter(\n  r.row('tags').match('^h').count().gt(0)\n)\n```\n---\n\n**Part 2:** This is a broader issue, but if empty arrays were considered falsy the example above would be further simplified to:\n\n``` js\nsequence.filter(r.row('tags').match('^h'))\n```\n\nAnd an interesting side effect is that the above example would now also work in scenarios where the underlying type is ambiguous. So you would no longer have to do crazy things like this:\n\n``` js\nr.expr([\n  { tags: 'hello' },\n  { tags: 'world' },\n  { tags: [ 'hello', 'world' ] }\n])\n.filter(r.branch(\n  r.row('tags').typeOf().eq('ARRAY'),\n  r.row('tags').filter(function (tag) {\n    return tag.match('^h');\n  }).count().gt(0),\n  r.row('tags').match('^h')\n))\n```\n"
  , issueState = "open"
  , issueId = Id 36135646
  , issueComments = 11
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 268
          , milestoneNumber = 41
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone will be revisited after each major release during the planning stage for the major release after it. They will be moved to a specific release milestone if chosen for that release."
          , milestoneTitle = "subsequent"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/41"
          , milestoneCreatedAt = 2013 (-06) (-30) 07 : 32 : 52 UTC
          , milestoneState = "open"
          }
  }