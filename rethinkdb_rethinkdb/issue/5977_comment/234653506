IssueComment
  { issueCommentUpdatedAt = 2016 (-07) (-22) 20 : 52 : 55 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 39480
        , simpleUserLogin = N "tve"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/39480?v=3"
        , simpleUserUrl = "https://api.github.com/users/tve"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/234653506"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/5977#issuecomment-234653506"
  , issueCommentCreatedAt = 2016 (-07) (-22) 20 : 52 : 55 UTC
  , issueCommentBody =
      "I'm probably not understanding what you mean by \"a LITERAL outside the righthand side of a merge is just ignored\" but it sounds like a really bad idea to me. I'm understanding that this implies that my use case simply wouldn't work? What I'm trying to do: I have a nested object that may or may not have a specific field and I'd like to \"upsert\" that field in its entirety. Hence something like `{foo: {bar: r.literal() } }`, i.e. here bar may or may not exist. You're proposing that in this case bar would not get created if it didn't exist? I would have to wrap this into something like\r\n```\r\nr.branch(r.and(row.hasField(\"foo\"), row.(\"foo\").hasField(\"bar\")),\r\n{foo: { bar: <value> }},\r\n{foo: { bar: r.literal(<value>) }})\r\n```\r\n(syntax most likely slightly off)"
  , issueCommentId = 234653506
  }