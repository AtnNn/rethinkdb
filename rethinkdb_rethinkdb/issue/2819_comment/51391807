IssueComment
  { issueCommentUpdatedAt = 2014 (-08) (-06) 20 : 24 : 37 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/51391807"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2819#issuecomment-51391807"
  , issueCommentCreatedAt = 2014 (-08) (-06) 20 : 24 : 15 UTC
  , issueCommentBody =
      "> Argument evaluation order has nothing to do with the awkwardness of the bracket term's implementation.\r\n\r\nIt sort of does, in that if we evaluated arguments before calling `eval_impl` then we wouldn't have to worry about double-evaluation and the implementation wouldn't be having to use those callbacks.\r\n\r\n> We do use lazy argument evaluation, too. It's used in the branch term.\r\n\r\nThere are a handful of terms (`branch`, `default`) where this wouldn't work.  I think the solution may be to introduce a `func_term_t` as a subclass of `op_term_t` and have `func_class_t`'s `eval_impl` just evaluate all its argument then call e.g. `func_eval_impl` on its subclasses."
  , issueCommentId = 51391807
  }