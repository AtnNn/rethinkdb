IssueComment
  { issueCommentUpdatedAt = 2012 (-12) (-09) 22 : 39 : 56 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 646357
        , simpleUserLogin = N "wmrowan"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/646357?v=3"
        , simpleUserUrl = "https://api.github.com/users/wmrowan"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/11177232"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/150#issuecomment-11177232"
  , issueCommentCreatedAt = 2012 (-12) (-09) 22 : 39 : 56 UTC
  , issueCommentBody =
      "If the user does this:\r\n```python\r\ntable.map(r.row['val'].union(table2.map(r.row['val2']))\r\n```\r\nThat would be equivalent to:\r\n```python\r\ntable.map(lambda x: x['val'].union(table2.map(lambda x: x['val2']))\r\n```\r\nWhich I don't think is actually all that confusing, assuming that we do the correct thing on the server. The first reference to `x` would be to the outer row and the second reference to the inner row which is what we would get if we use a stack based scoping scheme to lookup variable references on the server. Programmers (should) understand variable scoping and shadowing already, this just matches that expectation. The point is that `r.row` is nothing special (it's not a weird server supported implicit variable monstrosity), it's just a RQL variable reference that happens to be predefined with all the normal rules of variable nesting and shadowing, much like `self` in python or `this` in JavaScript."
  , issueCommentId = 11177232
  }