IssueComment
  { issueCommentUpdatedAt = 2012 (-12) (-10) 07 : 48 : 39 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 646357
        , simpleUserLogin = N "wmrowan"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/646357?v=3"
        , simpleUserUrl = "https://api.github.com/users/wmrowan"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/11184330"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/150#issuecomment-11184330"
  , issueCommentCreatedAt = 2012 (-12) (-10) 07 : 48 : 39 UTC
  , issueCommentBody =
      "Somehow I'd thought we'd already decided to not support the implicit variable on the server. If we continue to have the implicit variable defined on the server then `r.row` is trivial to implement in the client. The `r.row` object is just an AST node that serializes to an IMPLICIT_VAR message in the protobuf and it's the server's problem to deal with all the problems discussed at length here and elsewhere. I thought this issues was about how to implement `r.row` properly in the driver to get rid of the IMPLICIT_VAR in the protobuf and on the server.\r\n\r\nAs for the `from rethinkdb import r` question I feel like it should be possible to provide the shortcut for people that would find it useful without confusing everyone else. This really isn't a question of implementation at this point (both `as r` and `import r` are equivalent save for existence of the `r.expr` shortcut) but how to present the shortcut to users. We might stick to the conventional syntax in most of our examples and separately present the shortcut object for those who find `r.expr` cumbersome. If we document the code well enough people will also discover it on their own. People who get it can start using it.\r\n\r\np.s. For those who are interested I might have found a way to properly nest `r.row` references in Python. The solution doesn't work in Node for a very curious and subtle reason that will be fun to explain."
  , issueCommentId = 11184330
  }