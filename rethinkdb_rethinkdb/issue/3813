Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2015 (-07) (-27) 22 : 48 : 30 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/3813/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/3813"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "ededed"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:hygiene"
          , labelName = "tp:hygiene"
          }
      , IssueLabel
          { labelColor = "444444"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:performance"
          , labelName = "tp:performance"
          }
      ]
  , issueNumber = 3813
  , issueAssignee =
      Just
        SimpleUser
          { simpleUserId = Id 1777134
          , simpleUserLogin = N "mlucy"
          , simpleUserAvatarUrl =
              "https://avatars.githubusercontent.com/u/1777134?v=3"
          , simpleUserUrl = "https://api.github.com/users/mlucy"
          , simpleUserType = OwnerUser
          }
  , issueUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Get rid of unsharding"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/3813"
  , issueCreatedAt = 2015 (-02) (-21) 21 : 39 : 00 UTC
  , issueBody =
      Just
        "I'm was looking into `return_initial` earlier today, and ran into another case where it would be really useful not to have the unshard visitor discard so much information.\r\n\r\nRight now the unshard visitor merges the results from all the shards together, but this has a few problems:\r\n\r\n* If you're doing an ordered range get, it has to look at the largest keys for each shard (call them `k_s`), and then discard all rows with keys larger than `\\min_s k_s`.  For certain ordered range gets (`r.table('test').order_by(index: 'id')`, any ordered range get that returns very small batches from all the shards) this means we discard a lot (sometimes even the vast majority) of results.\r\n  - If we got rid of unsharding, we could keep track rows from all the shards separately, and only fetch more from shards that we needed to.\r\n* Some of the new operations we're adding require us to know a per-shard timestamp, but the result visitor produces an undifferentiated slurry of results from different shards, discarding this information.\r\n  - I'm going to hack around this for now by just adding the information as an optional field of `rget_item_t`, but if we got rid of the unshard visitor it would be much more space efficient not to store a copy of this information for every item from the same shard.\r\n* It means code from the `ql` layer leaks all over everything -- in my opinion it's nuts that the unshard visitor is constructing environments and evaluating ReQL code.\r\n\r\nThere are some downsides to getting rid of unsharding too, though:\r\n\r\n* Certain queries (e.g. `reduce`) will produce more network traffic without unsharding.\r\n  - We could special-case these queries, but only when we actually don't need per-shard information.\r\n* If we do the optimization I mentioned above for range gets, we'll be keeping data hanging around in memory for open streams, which will increase memory usage for certain workloads (especially workloads with large batch sizes).\r\n  - We could keep only the first few elements of these batches around; this would make the logic more complicated and would still lead to a small number of double-reads, but it would make memory usage basically as good as before and still drastically improve performance for the pathological cases I mentioned above."
  , issueState = "open"
  , issueId = Id 58476094
  , issueComments = 8
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 883
          , milestoneNumber = 2
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone are not an immediate priority, and will be periodically revisited. When we decide to work on an issue in backlog, we'll move it to next."
          , milestoneTitle = "backlog"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/2"
          , milestoneCreatedAt = 2012 (-11) (-11) 14 : 16 : 11 UTC
          , milestoneState = "open"
          }
  }