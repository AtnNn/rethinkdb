IssueComment
  { issueCommentUpdatedAt = 2014 (-01) (-04) 02 : 46 : 27 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/31569568"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1798#issuecomment-31569568"
  , issueCommentCreatedAt = 2014 (-01) (-04) 02 : 46 : 16 UTC
  , issueCommentBody =
      "First of all, I noticed that the benchmark uses hard durability for the update query. So that one is not directly comparable to the MongoDB results. Insert uses soft durability and the read query also looks fine to me.\r\n\r\n\r\nHere are results for the Python and PHP-RQL drivers. I will also test JavaScript, but first have to figure out how to program with JS callbacks in a reasonable way...\r\n\r\n* Ruby (including @mlucy's optimization)\r\n```\r\nInsert: 325.7 inserts/second\r\nRead: 428.9 reads/second\r\nUpdate: 164.3 updates/second\r\n```\r\n* Python (without cpp protobuf backend, couldn't get it to run)\r\n```\r\nInsert: 963.95674414 inserts/second\r\nRead: 1084.1272426 reads/second\r\nUpdate: 292.186557975 updates/second\r\n```\r\n* and just for fun PHP-RQL\r\n  * with cpp protobuf backend\r\n```\r\nInsert: 803.58463969438 inserts/second\r\nRead: 1063.2924998441 reads/second\r\nUpdate: 289.70962652097 updates/second\r\n```\r\n  * without cpp protobuf backend\r\n```\r\nInsert: 438.63670007221 inserts/second\r\nRead: 597.65483788184 reads/second\r\nUpdate: 211.33260237237 updates/second\r\n```"
  , issueCommentId = 31569568
  }