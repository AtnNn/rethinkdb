IssueComment
  { issueCommentUpdatedAt = 2013 (-10) (-30) 06 : 41 : 51 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/27368240"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1592#issuecomment-27368240"
  , issueCommentCreatedAt = 2013 (-10) (-30) 06 : 41 : 51 UTC
  , issueCommentBody =
      "Agreed on the names. I was thinking two tabs: \"Query\" and \"Explore\" (and renaming the upper tab to \"Data\").\r\n\r\nWe thought about placing the viewer under each table, but decided it's worse than having a separate view for exploring data for a couple of reasons:\r\n\r\n* It doesn't play nicely with the primary use case (exploring data). Most of the time I want to see data in table A, then may be in table B or C. If we place the viewer under each table, I'd have to click around and scroll a lot (back to table view, then pick a table, then scroll to data). It's much nicer to stay in the same view and just type the table name.\r\n* It doesn't allow for expanding the explorer. There is lots of stuff we can eventually do: edit the rows, add visual components to allow constructing queries via point-and-click UI, plotting data, etc. Some of these things we can do directly in the table view, but if we think of where this can go, it really feels like a separate entity that should be in its own view. This way people can go there when they want to \"explore data\".\r\n\r\nThe use case you're mentioning is really important too. The way we thought about it was to add a \"Browse data in this table\" link in a few places (in the table view, for every table in the table list view, potentially in the dashboard). This would bring the whole feature closer to the user, and would really tie it together with the rest of the UI. I also agree that having two layers of tabs smells like bad design. We have to play around with some implementations  and see how it turns out, there may be something better.\r\n\r\nRegarding scheduling, we spent some time debating whether it would be best to work on a profiler visualizer or the data viewer. I would strongly prefer to ship the data viewer in 1.11 and ship the visual query profiler in 1.12. Here is my reasoning:\r\n\r\n* We're late in the release cycle, and data viewer is an easier feature to implement because it mostly reuses existing components. @neumino has a chance of finishing this on time, but I think it's unlikely we can ship a really good visualizer by this release.\r\n* Since we can't make the in-place migration work in this release, we need another big feature to make the story work. Data viewer would fill the gap. Since it's less likely we can ship a good visualizer than a good data viewer (see previous point), I think we should work on the viewer now.\r\n* I think the query profiler story would actually work really well. We'll announce the profiler in 1.11 and describe our rough plans for it, and then announce a performance visualizer (we'll probably have to find a better name) in 1.12. Each one of these features really advances the state of the art and I'm pretty confident they can gather a lot of attention independently. I think that announcing them together would be doing these features a disservice, as they're each pretty important in and of themselves.\r\n* I think we should leave some time for us to play with the profiler to really understand what works and what doesn't in practice. I'd like to run it on some queries I do over the course of a few weeks to really understand what is and isn't helpful about the output, and how we can improve it. I think that if we use it for a while, it would make a huge difference in understanding what information we should add to it (or potentially what to change about it), and how to structure the visualizer. This is a hugely important feature, and I think it would help to give it some time to shake out the details and then do the visualization after that.\r\n\r\nPhew, sorry for long post."
  , issueCommentId = 27368240
  }