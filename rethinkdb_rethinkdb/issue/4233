Issue
  { issueClosedAt = Just 2015 (-05) (-18) 21 : 23 : 28 UTC
  , issueUpdatedAt = 2015 (-05) (-18) 21 : 23 : 28 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4233/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/4233"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "e102d8"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:bug"
          , labelName = "tp:bug"
          }
      ]
  , issueNumber = 4233
  , issueAssignee =
      Just
        SimpleUser
          { simpleUserId = Id 316661
          , simpleUserLogin = N "timmaxw"
          , simpleUserAvatarUrl =
              "https://avatars.githubusercontent.com/u/316661?v=3"
          , simpleUserUrl = "https://api.github.com/users/timmaxw"
          , simpleUserType = OwnerUser
          }
  , issueUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Wrong type in distribution query unshard visitor"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4233"
  , issueCreatedAt = 2015 (-05) (-14) 23 : 47 : 40 UTC
  , issueBody =
      Just
        "Cannot reproduce, but got it once:\n\n```\nerror: Error in src/rdb_protocol/protocol.cc at line 770:\nerror: Guarantee failed: [result != __null] Bad boost::get\nerror: Backtrace:\nerror: Thu May 14 16:45:04 2015\n\n       1: format_backtrace(bool) at backtrace.cc:214\n       2: report_fatal_error(char const*, int, char const*, ...) at errors.cc:83\n       3: rdb_r_unshard_visitor_t::operator()(distribution_read_t const&) at protocol.cc:770\n       4: read_t::unshard(read_response_t*, unsigned long, read_response_t*, rdb_context_t*, signal_t*) const at variant.hpp:832\n       5: table_query_client_t::dispatch_outdated_read(read_t const&, read_response_t*, signal_t*) at stl_vector.h:350\n       6: fetch_distribution(uuid_u const&, real_reql_cluster_interface_t*, signal_t*, std::map<store_key_t, long, std::less<store_key_t>, std::allocator<std::pair<store_key_t const, long> > >*) at split_points.cc:237\n       7: real_reql_cluster_interface_t::table_estimate_doc_counts(counted_t<ql::db_t const>, name_string_t const&, ql::env_t*, std::vector<long, std::allocator<long> >*, std::string*) at stl_vector.h:571\n       8: artificial_reql_cluster_interface_t::table_estimate_doc_counts(counted_t<ql::db_t const>, name_string_t const&, ql::env_t*, std::vector<long, std::allocator<long> >*, std::string*) at artificial_reql_cluster_interface.cc:169\n       9: ql::info_term_t::val_info(ql::scope_env_t*, scoped_ptr_t<ql::val_t>) const at counted.hpp:60\n       10: ql::info_term_t::eval_impl(ql::scope_env_t*, ql::args_t*, ql::eval_flags_t) const at datum.hpp:96\n       11: ql::op_term_t::term_eval(ql::scope_env_t*, ql::eval_flags_t) const at scoped.hpp:70\n       12: ql::runtime_term_t::eval(ql::scope_env_t*, ql::eval_flags_t) const at scoped.hpp:25\n       13: ql::op_term_t::maybe_grouped_data(ql::scope_env_t*, ql::argvec_t*, ql::eval_flags_t, counted_t<ql::grouped_data_t>*, scoped_ptr_t<ql::val_t>*) const at counted.hpp:60\n       14: ql::op_term_t::term_eval(ql::scope_env_t*, ql::eval_flags_t) const at op.cc:199\n       15: ql::runtime_term_t::eval(ql::scope_env_t*, ql::eval_flags_t) const at scoped.hpp:25\n       16: ql::op_term_t::maybe_grouped_data(ql::scope_env_t*, ql::argvec_t*, ql::eval_flags_t, counted_t<ql::grouped_data_t>*, scoped_ptr_t<ql::val_t>*) const at counted.hpp:60\n       17: ql::op_term_t::term_eval(ql::scope_env_t*, ql::eval_flags_t) const at op.cc:199\n       18: ql::runtime_term_t::eval(ql::scope_env_t*, ql::eval_flags_t) const at scoped.hpp:25\n       19: ql::op_term_t::maybe_grouped_data(ql::scope_env_t*, ql::argvec_t*, ql::eval_flags_t, counted_t<ql::grouped_data_t>*, scoped_ptr_t<ql::val_t>*) const at counted.hpp:60\n       20: ql::op_term_t::term_eval(ql::scope_env_t*, ql::eval_flags_t) const at op.cc:199\n       21: ql::runtime_term_t::eval(ql::scope_env_t*, ql::eval_flags_t) const at scoped.hpp:25\n       22: ql::make_obj_term_t::term_eval(ql::scope_env_t*, ql::eval_flags_t) const at datum_terms.cc:87\n       23: ql::runtime_term_t::eval(ql::scope_env_t*, ql::eval_flags_t) const at scoped.hpp:25\n       24: ql::args_t::arg(ql::scope_env_t*, unsigned long, ql::eval_flags_t) at counted.hpp:60\n       25: ql::merge_term_t::obj_eval(ql::scope_env_t*, ql::args_t*, scoped_ptr_t<ql::val_t> const&) const at obj_or_seq.cc:224\n       26: ./rethinkdb() [0xadb535] at 0xadb535 ()\n       27: ql::obj_or_seq_op_impl_t::eval_impl_dereferenced(ql::term_t const*, ql::scope_env_t*, ql::args_t*, scoped_ptr_t<ql::val_t> const&, std::function<scoped_ptr_t<ql::val_t> ()>) const at datum.hpp:96\n       28: ql::obj_or_seq_op_term_t::eval_impl(ql::scope_env_t*, ql::args_t*, ql::eval_flags_t) const at functional:1736\n       29: ql::op_term_t::term_eval(ql::scope_env_t*, ql::eval_flags_t) const at scoped.hpp:70\n       30: ql::runtime_term_t::eval(ql::scope_env_t*, ql::eval_flags_t) const at scoped.hpp:25\n       31: ql::reql_func_t::call(ql::env_t*, std::vector<ql::datum_t, std::allocator<ql::datum_t> > const&, ql::eval_flags_t) const at datum.hpp:96\n       32: ql::funcall_term_t::eval_impl(ql::scope_env_t*, ql::args_t*, ql::eval_flags_t) const at control.cc:122\n       33: ql::op_term_t::term_eval(ql::scope_env_t*, ql::eval_flags_t) const at scoped.hpp:70\n       34: ql::runtime_term_t::eval(ql::scope_env_t*, ql::eval_flags_t) const at scoped.hpp:25\n       35: ql::query_cache_t::ref_t::run(ql::env_t*, Response*) at query_cache.cc:278\n       36: ql::query_cache_t::ref_t::fill_response(Response*) at query_cache.cc:236\n       37: ql::run(ql::query_id_t&&, ql::protob_t<Query>, Response*, ql::query_cache_t*, signal_t*) at term.cc:253\n       38: rdb_query_server_t::run_query(ql::query_id_t&&, ql::protob_t<Query> const&, Response*, ql::query_cache_t*, signal_t*) at counted.hpp:60\n       39: query_server_t::handle(http_req_t const&, http_res_t*, signal_t*) at protob.cc:706\n       40: routing_http_app_t::handle(http_req_t const&, http_res_t*, signal_t*) at basic_string.h:288\n       41: routing_http_app_t::handle(http_req_t const&, http_res_t*, signal_t*) at basic_string.h:288\n       42: http_server_t::handle_conn(scoped_ptr_t<linux_tcp_conn_descriptor_t> const&, auto_drainer_t::lock_t) at basic_string.h:542\n       43: std::_Function_handler<void (scoped_ptr_t<linux_tcp_conn_descriptor_t>&), boost::_bi::bind_t<void, boost::_mfi::mf2<void, http_server_t, scoped_ptr_t<linux_tcp_conn_descriptor_t> const&, auto_drainer_t::lock_t>, boost::_bi::list3<boost::_bi::value<http_server_t*>, boost::arg<1>, boost::_bi::value<auto_drainer_t::lock_t> > > >::_M_invoke(std::_Any_data const&, scoped_ptr_t<linux_tcp_conn_descriptor_t>&) at mem_fn_template.hpp:280\n       44: linux_nonthrowing_tcp_listener_t::handle(int) at scoped.hpp:70\n       45: coro_t::run() at coroutines.cc:214\nerror: Exiting.\nTrace/breakpoint trap (core dumped)\n```\n\n@timmaxw you mentioned you had also gotten this at some point, right?\n"
  , issueState = "closed"
  , issueId = Id 76529052
  , issueComments = 2
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 316661
                , simpleUserLogin = N "timmaxw"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/316661?v=3"
                , simpleUserUrl = "https://api.github.com/users/timmaxw"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 0
          , milestoneNumber = 95
          , milestoneClosedIssues = 217
          , milestoneDescription =
              Just "To-do list before shipping auto-failover"
          , milestoneTitle = "2.1"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/95"
          , milestoneCreatedAt = 2015 (-03) (-04) 21 : 09 : 42 UTC
          , milestoneState = "closed"
          }
  }