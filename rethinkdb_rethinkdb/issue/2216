Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2015 (-03) (-25) 22 : 32 : 40 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/2216/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/2216"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "02e10c"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:enhancement"
          , labelName = "tp:enhancement"
          }
      ]
  , issueNumber = 2216
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 554927
        , simpleUserLogin = N "ilsken"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/554927?v=3"
        , simpleUserUrl = "https://api.github.com/users/ilsken"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Archive shards?"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/2216"
  , issueCreatedAt = 2014 (-04) (-04) 16 : 26 : 27 UTC
  , issueBody =
      Just
        "I'd be very interested in this type of feature but I'm not sure how feasible it is (especially without mongo-esque objectid's). \n\nBasically, for most applications, older data is accessed far less often than new data. This is especially true in analytics and advertising applications which I think is a great use-case for rethinkdb (horizontal scaling goes from being a hassle to easy as pie!).\n\nIt'd be interesting if rethinkdb could assign some shards that have data from hotter shards moved to them based on their age or frequency of access. So while still sharding based on something like site or campaign id, you can ensure that accessing historical data won't move hotter data out of memory. Is this currently possible? In mongodb you have to implement this yourself but I think it's a common enough scenario that the database should be able to handle it in that worry-free, hassle-free rethinkdb style\n"
  , issueState = "open"
  , issueId = Id 30874735
  , issueComments = 1
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 882
          , milestoneNumber = 2
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone are not an immediate priority, and will be periodically revisited. When we decide to work on an issue in backlog, we'll move it to next."
          , milestoneTitle = "backlog"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/2"
          , milestoneCreatedAt = 2012 (-11) (-11) 14 : 16 : 11 UTC
          , milestoneState = "open"
          }
  }