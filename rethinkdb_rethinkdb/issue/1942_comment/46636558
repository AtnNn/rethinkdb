IssueComment
  { issueCommentUpdatedAt = 2014 (-06) (-20) 01 : 30 : 26 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/46636558"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1942#issuecomment-46636558"
  , issueCommentCreatedAt = 2014 (-06) (-20) 01 : 30 : 26 UTC
  , issueCommentBody =
      "This is still behaving very similarly in 1.12.\r\nWith `between()` or no filter the query takes 150 ms on newton. If I add a `limit(0)` it completes in 1 ms.\r\n\r\nThis is the query I used for testing. This one runs in ~150ms:\r\n```js\r\nr.table('empty_table').group(\r\n    // group -- we return the value that we are going to use to group\r\n    function(doc) {\r\n       // We group by logTime rouned to 5 (5 min)\r\n       //return doc\r\n       return doc(\"logTime\").sub( doc(\"logTime\").mod(1) )\r\n       //return doc(\"logTime\")\r\n    }).map(\r\n    // map -- we return the value we are interested in\r\n    // count is to keep track of how many group we are\r\n    function(doc) {\r\n        return {\r\n            _source: {\r\n                cpu: {\r\n                    loadAvg: [\r\n                        doc(\"_source\")(\"cpu\")(\"loadAvg\").nth(0).default(0),\r\n                        doc(\"_source\")(\"cpu\")(\"loadAvg\").nth(1).default(0),\r\n                        doc(\"_source\")(\"cpu\")(\"loadAvg\").nth(2).default(0)\r\n                    ],\r\n                    procsBlocked: doc(\"_source\")(\"cpu\")(\"procsBlocked\").default(0),\r\n                    procsRunning: doc(\"_source\")(\"cpu\")(\"procsRunning\").default(0),\r\n                    times: {\r\n                        idle:    doc(\"_source\")(\"cpu\")(\"times\")(\"idle\").default(0),\r\n                        iowait:  doc(\"_source\")(\"cpu\")(\"times\")(\"iowait\").default(0),\r\n                        irq:     doc(\"_source\")(\"cpu\")(\"times\")(\"irq\").default(0),\r\n                        nice:    doc(\"_source\")(\"cpu\")(\"times\")(\"nice\").default(0),\r\n                        softirq: doc(\"_source\")(\"cpu\")(\"times\")(\"softirq\").default(0),\r\n                        steal:   doc(\"_source\")(\"cpu\")(\"times\")(\"steal\").default(0),\r\n                        system:  doc(\"_source\")(\"cpu\")(\"times\")(\"system\").default(0),\r\n                        user:    doc(\"_source\")(\"cpu\")(\"times\")(\"user\").default(0),\r\n                    }\r\n                },\r\n                mem: doc(\"_source\")(\"mem\").keys().map(function(mt) {\r\n                    return [mt, doc(\"_source\")(\"mem\")(mt).default(0)]\r\n                }).coerceTo(\"object\"),\r\n                dev: {\r\n                    io: doc(\"_source\")(\"dev\")(\"io\").keys().map(function(dev)   {\r\n                        return [\r\n                            dev, {\r\n                                currIO:      doc(\"_source\")(\"dev\")(\"io\")(dev)(\"currIO\").default(0),\r\n                                mergeReads:  doc(\"_source\")(\"dev\")(\"io\")(dev)(\"mergeReads\").default(0),\r\n                                mergeWrites: doc(\"_source\")(\"dev\")(\"io\")(dev)(\"mergeWrites\").default(0),\r\n                                msIO:        doc(\"_source\")(\"dev\")(\"io\")(dev)(\"msIO\").default(0),\r\n                                msReads:     doc(\"_source\")(\"dev\")(\"io\")(dev)(\"msReads\").default(0),\r\n                                msWrites:    doc(\"_source\")(\"dev\")(\"io\")(dev)(\"msWrites\").default(0),\r\n                                numReads:    doc(\"_source\")(\"dev\")(\"io\")(dev)(\"numReads\").default(0),\r\n                                numWrites:   doc(\"_source\")(\"dev\")(\"io\")(dev)(\"numWrites\").default(0),\r\n                                secReads:    doc(\"_source\")(\"dev\")(\"io\")(dev)(\"secReads\").default(0),\r\n                                secWrites:   doc(\"_source\")(\"dev\")(\"io\")(dev)(\"secWrites\").default(0),\r\n                                wmsIO:       doc(\"_source\")(\"dev\")(\"io\")(dev)(\"wmsIO\").default(0),\r\n                            }\r\n                        ]\r\n                    }).coerceTo(\"object\"),\r\n                    size: doc(\"_source\")(\"dev\")(\"size\").keys().map(function(dev)   {\r\n                        return [\r\n                            dev, {\r\n                                free:        doc(\"_source\")(\"dev\")(\"size\")(dev)(\"free\").default(0),\r\n                                used:        doc(\"_source\")(\"dev\")(\"size\")(dev)(\"used\").default(0),\r\n                            }\r\n                        ]\r\n                    }).coerceTo(\"object\"),\r\n                },\r\n                net: doc(\"_source\")(\"net\").keys().map(function(iface) {\r\n                    return [\r\n                        iface, {\r\n                            rxBytes: doc(\"_source\")(\"net\")(iface)(\"rxBytes\").default(0),\r\n                            rxDrop:  doc(\"_source\")(\"net\")(iface)(\"rxDrop\").default(0),\r\n                            rxErr:   doc(\"_source\")(\"net\")(iface)(\"rxErr\").default(0),\r\n                            rxMulti: doc(\"_source\")(\"net\")(iface)(\"rxMulti\").default(0),\r\n                            rxPack:  doc(\"_source\")(\"net\")(iface)(\"rxPack\").default(0),\r\n                            txBytes: doc(\"_source\")(\"net\")(iface)(\"txBytes\").default(0),\r\n                            txDrop:  doc(\"_source\")(\"net\")(iface)(\"txDrop\").default(0),\r\n                            txErr:   doc(\"_source\")(\"net\")(iface)(\"txErr\").default(0),\r\n                            txPack:  doc(\"_source\")(\"net\")(iface)(\"txPack\").default(0),\r\n                        }\r\n                    ]\r\n                }).coerceTo(\"object\")\r\n            },\r\n            count: 1\r\n        }\r\n    }).reduce(\r\n    // reduce -- here we just do the sum of iowait, system and count -- the left/right objects are the one mapped before so something like { iowait:..., system: ..., count:...}\r\n    function(left, right) {\r\n        return {\r\n            _source: {\r\n                cpu: {\r\n                    loadAvg: [\r\n                        left(\"_source\")(\"cpu\")(\"loadAvg\").nth(0).default(0).add(right(\"_source\")(\"cpu\")(\"loadAvg\").nth(0).default(0)),\r\n                        left(\"_source\")(\"cpu\")(\"loadAvg\").nth(1).default(0).add(right(\"_source\")(\"cpu\")(\"loadAvg\").nth(1).default(0)),\r\n                        left(\"_source\")(\"cpu\")(\"loadAvg\").nth(2).default(0).add(right(\"_source\")(\"cpu\")(\"loadAvg\").nth(2).default(0)),\r\n                    ],\r\n                    procsBlocked: left(\"_source\")(\"cpu\")(\"procsBlocked\").default(0).add(right(\"_source\")(\"cpu\")(\"procsBlocked\").default(0)),\r\n                    procsRunning: left(\"_source\")(\"cpu\")(\"procsRunning\").default(0).add(right(\"_source\")(\"cpu\")(\"procsRunning\")),\r\n                    times: {\r\n                        idle:    left(\"_source\")(\"cpu\")(\"times\")(\"idle\").default(0).add(right(\"_source\")(\"cpu\")(\"times\")(\"idle\").default(0)),\r\n                        iowait:  left(\"_source\")(\"cpu\")(\"times\")(\"iowait\").default(0).add(right(\"_source\")(\"cpu\")(\"times\")(\"iowait\").default(0)),\r\n                        irq:     left(\"_source\")(\"cpu\")(\"times\")(\"irq\").default(0).add(right(\"_source\")(\"cpu\")(\"times\")(\"irq\").default(0)),\r\n                        nice:    left(\"_source\")(\"cpu\")(\"times\")(\"nice\").default(0).add(right(\"_source\")(\"cpu\")(\"times\")(\"nice\").default(0)),\r\n                        softirq: left(\"_source\")(\"cpu\")(\"times\")(\"softirq\").default(0).add(right(\"_source\")(\"cpu\")(\"times\")(\"softirq\").default(0)),\r\n                        steal:   left(\"_source\")(\"cpu\")(\"times\")(\"steal\").default(0).add(right(\"_source\")(\"cpu\")(\"times\")(\"steal\").default(0)),\r\n                        system:  left(\"_source\")(\"cpu\")(\"times\")(\"system\").default(0).add(right(\"_source\")(\"cpu\")(\"times\")(\"system\").default(0)),\r\n                        user:    left(\"_source\")(\"cpu\")(\"times\")(\"user\").default(0).add(right(\"_source\")(\"cpu\")(\"times\")(\"user\").default(0)),\r\n                    }\r\n                },\r\n                mem: left(\"_source\")(\"mem\").keys().setUnion(right(\"_source\")(\"mem\").keys()).map(function(mt) {\r\n                    return [mt, left(\"_source\")(\"mem\")(mt).default(0).add(right(\"_source\")(\"mem\")(mt).default(0))]\r\n                }).coerceTo(\"object\"),\r\n                dev: {\r\n                    io: left(\"_source\")(\"dev\")(\"io\").keys().setUnion(right(\"_source\")(\"dev\")(\"io\").keys()).map(function(dev)  {\r\n                        return [\r\n                            dev, {\r\n                                currIO:      left(\"_source\")(\"dev\")(\"io\")(dev)(\"currIO\").default(0).add(right(\"_source\")(\"dev\")(\"io\")(dev)(\"currIO\").default(0)),\r\n                                mergeReads:  left(\"_source\")(\"dev\")(\"io\")(dev)(\"mergeReads\").default(0).add(right(\"_source\")(\"dev\")(\"io\")(dev)(\"mergeReads\").default(0)),\r\n                                mergeWrites: left(\"_source\")(\"dev\")(\"io\")(dev)(\"mergeWrites\").default(0).add(right(\"_source\")(\"dev\")(\"io\")(dev)(\"mergeWrites\").default(0)),\r\n                                msIO:        left(\"_source\")(\"dev\")(\"io\")(dev)(\"msIO\").default(0).add(right(\"_source\")(\"dev\")(\"io\")(dev)(\"msIO\").default(0)),\r\n                                msReads:     left(\"_source\")(\"dev\")(\"io\")(dev)(\"msReads\").default(0).add(right(\"_source\")(\"dev\")(\"io\")(dev)(\"msReads\").default(0)),\r\n                                msWrites:    left(\"_source\")(\"dev\")(\"io\")(dev)(\"msWrites\").default(0).add(right(\"_source\")(\"dev\")(\"io\")(dev)(\"msWrites\").default(0)),\r\n                                numReads:    left(\"_source\")(\"dev\")(\"io\")(dev)(\"numReads\").default(0).add(right(\"_source\")(\"dev\")(\"io\")(dev)(\"numReads\").default(0)),\r\n                                numWrites:   left(\"_source\")(\"dev\")(\"io\")(dev)(\"numWrites\").default(0).add(right(\"_source\")(\"dev\")(\"io\")(dev)(\"numWrites\").default(0)),\r\n                                secReads:    left(\"_source\")(\"dev\")(\"io\")(dev)(\"secReads\").default(0).add(right(\"_source\")(\"dev\")(\"io\")(dev)(\"secReads\").default(0)),\r\n                                secWrites:   left(\"_source\")(\"dev\")(\"io\")(dev)(\"secWrites\").default(0).add(right(\"_source\")(\"dev\")(\"io\")(dev)(\"secWrites\").default(0)),\r\n                                wmsIO:       left(\"_source\")(\"dev\")(\"io\")(dev)(\"wmsIO\").default(0).add(right(\"_source\")(\"dev\")(\"io\")(dev)(\"wmsIO\").default(0)),\r\n                            }\r\n                        ]\r\n                    }).coerceTo(\"object\"),\r\n                    size: left(\"_source\")(\"dev\")(\"size\").keys().setUnion(right(\"_source\")(\"dev\")(\"size\").keys()).map(function(dev)   {\r\n                        return [\r\n                            dev, {\r\n                                free:        left(\"_source\")(\"dev\")(\"size\")(dev)(\"free\").default(0).add(right(\"_source\")(\"dev\")(\"size\")(dev)(\"free\").default(0)),\r\n                                used:        left(\"_source\")(\"dev\")(\"size\")(dev)(\"used\").default(0).add(right(\"_source\")(\"dev\")(\"size\")(dev)(\"used\").default(0)),\r\n                            }\r\n                        ]\r\n                    }).coerceTo(\"object\"),\r\n                },\r\n                net: left(\"_source\")(\"net\").keys().setUnion(right(\"_source\")(\"net\").keys()).map(function(iface){\r\n                    return [\r\n                        iface, {\r\n                            rxBytes: left(\"_source\")(\"net\")(iface)(\"rxBytes\").default(0).add(right(\"_source\")(\"net\")(iface)(\"rxBytes\").default(0)),\r\n                            rxDrop:  left(\"_source\")(\"net\")(iface)(\"rxDrop\").default(0).add(right(\"_source\")(\"net\")(iface)(\"rxDrop\").default(0)),\r\n                            rxErr:   left(\"_source\")(\"net\")(iface)(\"rxErr\").default(0).add(right(\"_source\")(\"net\")(iface)(\"rxErr\").default(0)),\r\n                            rxMulti: left(\"_source\")(\"net\")(iface)(\"rxMulti\").default(0).add(right(\"_source\")(\"net\")(iface)(\"rxMulti\").default(0)),\r\n                            rxPack:  left(\"_source\")(\"net\")(iface)(\"rxPack\").default(0).add(right(\"_source\")(\"net\")(iface)(\"rxPack\").default(0)),\r\n                            txBytes: left(\"_source\")(\"net\")(iface)(\"txBytes\").default(0).add(right(\"_source\")(\"net\")(iface)(\"txBytes\").default(0)),\r\n                            txDrop:  left(\"_source\")(\"net\")(iface)(\"txDrop\").default(0).add(right(\"_source\")(\"net\")(iface)(\"txDrop\").default(0)),\r\n                            txErr:   left(\"_source\")(\"net\")(iface)(\"txErr\").default(0).add(right(\"_source\")(\"net\")(iface)(\"txErr\").default(0)),\r\n                            txPack:  left(\"_source\")(\"net\")(iface)(\"txPack\").default(0).add(right(\"_source\")(\"net\")(iface)(\"txPack\").default(0)),\r\n                        }\r\n                    ]\r\n                }).coerceTo(\"object\")\r\n            },\r\n            count: left(\"count\").add(right(\"count\"))\r\n        }\r\n    }\r\n).map( function(reducedObject) {\r\n    // here reducedObject(\"count\") is the number of doc we have in each group (we mapped each do to 1, then did the sum)\r\n    return {\r\n        logTime: reducedObject(\"group\"),\r\n        _source: {\r\n            cpu: {\r\n                loadAvg: [\r\n                    reducedObject(\"reduction\")(\"_source\")(\"cpu\")(\"loadAvg\").nth(0).default(0).div(reducedObject(\"reduction\")(\"count\")),\r\n                    reducedObject(\"reduction\")(\"_source\")(\"cpu\")(\"loadAvg\").nth(1).default(0).div(reducedObject(\"reduction\")(\"count\")),\r\n                    reducedObject(\"reduction\")(\"_source\")(\"cpu\")(\"loadAvg\").nth(2).default(0).div(reducedObject(\"reduction\")(\"count\")),\r\n                ],\r\n                procsBlocked: reducedObject(\"reduction\")(\"_source\")(\"cpu\")(\"procsBlocked\").default(0).div( reducedObject(\"reduction\")(\"count\") ),\r\n                procsRunning: reducedObject(\"reduction\")(\"_source\")(\"cpu\")(\"procsRunning\").default(0).div( reducedObject(\"reduction\")(\"count\") ),\r\n                times: {\r\n                    idle:    reducedObject(\"reduction\")(\"_source\")(\"cpu\")(\"times\")(\"idle\").default(0).div( reducedObject(\"reduction\")(\"count\") ),\r\n                    iowait:  reducedObject(\"reduction\")(\"_source\")(\"cpu\")(\"times\")(\"iowait\").default(0).div( reducedObject(\"reduction\")(\"count\") ),\r\n                    irq:     reducedObject(\"reduction\")(\"_source\")(\"cpu\")(\"times\")(\"irq\").default(0).div( reducedObject(\"reduction\")(\"count\") ),\r\n                    nice:    reducedObject(\"reduction\")(\"_source\")(\"cpu\")(\"times\")(\"nice\").default(0).div( reducedObject(\"reduction\")(\"count\") ),\r\n                    softirq: reducedObject(\"reduction\")(\"_source\")(\"cpu\")(\"times\")(\"softirq\").default(0).div( reducedObject(\"reduction\")(\"count\") ),\r\n                    steal:   reducedObject(\"reduction\")(\"_source\")(\"cpu\")(\"times\")(\"steal\").default(0).div( reducedObject(\"reduction\")(\"count\") ),\r\n                    system:  reducedObject(\"reduction\")(\"_source\")(\"cpu\")(\"times\")(\"system\").default(0).div( reducedObject(\"reduction\")(\"count\") ),\r\n                    user:    reducedObject(\"reduction\")(\"_source\")(\"cpu\")(\"times\")(\"user\").default(0).div( reducedObject(\"reduction\")(\"count\") ),\r\n                }\r\n            },\r\n            mem: reducedObject(\"reduction\")(\"_source\")(\"mem\").keys().map(function(mt) {\r\n                return [mt, reducedObject(\"reduction\")(\"_source\")(\"mem\")(mt).div(reducedObject(\"reduction\")(\"count\"))]\r\n            }).coerceTo(\"object\"),\r\n            dev: {\r\n                io: reducedObject(\"reduction\")(\"_source\")(\"dev\")(\"io\").keys().map(function(dev){\r\n                    return [\r\n                        dev, {\r\n                            currIO:      reducedObject(\"reduction\")(\"_source\")(\"dev\")(\"io\")(dev)(\"currIO\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                            mergeReads:  reducedObject(\"reduction\")(\"_source\")(\"dev\")(\"io\")(dev)(\"mergeReads\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                            mergeWrites: reducedObject(\"reduction\")(\"_source\")(\"dev\")(\"io\")(dev)(\"mergeWrites\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                            msIO:        reducedObject(\"reduction\")(\"_source\")(\"dev\")(\"io\")(dev)(\"msIO\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                            msReads:     reducedObject(\"reduction\")(\"_source\")(\"dev\")(\"io\")(dev)(\"msReads\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                            msWrites:    reducedObject(\"reduction\")(\"_source\")(\"dev\")(\"io\")(dev)(\"msWrites\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                            numReads:    reducedObject(\"reduction\")(\"_source\")(\"dev\")(\"io\")(dev)(\"numReads\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                            numWrites:   reducedObject(\"reduction\")(\"_source\")(\"dev\")(\"io\")(dev)(\"numWrites\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                            secReads:    reducedObject(\"reduction\")(\"_source\")(\"dev\")(\"io\")(dev)(\"secReads\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                            secWrites:   reducedObject(\"reduction\")(\"_source\")(\"dev\")(\"io\")(dev)(\"secWrites\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                            wmsIO:       reducedObject(\"reduction\")(\"_source\")(\"dev\")(\"io\")(dev)(\"wmsIO\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                        }\r\n                    ]\r\n                }).coerceTo(\"object\"),\r\n                size: reducedObject(\"reduction\")(\"_source\")(\"dev\")(\"size\").keys().map(function(dev){\r\n                    return [\r\n                        dev, {\r\n                            free:        reducedObject(\"reduction\")(\"_source\")(\"dev\")(\"size\")(dev)(\"free\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                            used:        reducedObject(\"reduction\")(\"_source\")(\"dev\")(\"size\")(dev)(\"used\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                        }\r\n                    ]\r\n                }).coerceTo(\"object\"),\r\n            },\r\n            net: reducedObject(\"reduction\")(\"_source\")(\"net\").keys().map(function(iface){\r\n                return [\r\n                    iface, {\r\n                        rxBytes: reducedObject(\"reduction\")(\"_source\")(\"net\")(iface)(\"rxBytes\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                        rxDrop:  reducedObject(\"reduction\")(\"_source\")(\"net\")(iface)(\"rxDrop\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                        rxErr:   reducedObject(\"reduction\")(\"_source\")(\"net\")(iface)(\"rxErr\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                        rxMulti: reducedObject(\"reduction\")(\"_source\")(\"net\")(iface)(\"rxMulti\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                        rxPack:  reducedObject(\"reduction\")(\"_source\")(\"net\")(iface)(\"rxPack\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                        txBytes: reducedObject(\"reduction\")(\"_source\")(\"net\")(iface)(\"txBytes\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                        txDrop:  reducedObject(\"reduction\")(\"_source\")(\"net\")(iface)(\"txDrop\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                        txErr:   reducedObject(\"reduction\")(\"_source\")(\"net\")(iface)(\"txErr\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                        txPack:  reducedObject(\"reduction\")(\"_source\")(\"net\")(iface)(\"txPack\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                    }\r\n                ]\r\n            }).coerceTo(\"object\")\r\n        },\r\n    }\r\n})\r\n```\r\n\r\nand this one with a `limit(0)` added in 1ms:\r\n```js\r\nr.table('empty_table').limit(0).group(\r\n    // group -- we return the value that we are going to use to group\r\n    function(doc) {\r\n       // We group by logTime rouned to 5 (5 min)\r\n       //return doc\r\n       return doc(\"logTime\").sub( doc(\"logTime\").mod(1) )\r\n       //return doc(\"logTime\")\r\n    }).map(\r\n    // map -- we return the value we are interested in\r\n    // count is to keep track of how many group we are\r\n    function(doc) {\r\n        return {\r\n            _source: {\r\n                cpu: {\r\n                    loadAvg: [\r\n                        doc(\"_source\")(\"cpu\")(\"loadAvg\").nth(0).default(0),\r\n                        doc(\"_source\")(\"cpu\")(\"loadAvg\").nth(1).default(0),\r\n                        doc(\"_source\")(\"cpu\")(\"loadAvg\").nth(2).default(0)\r\n                    ],\r\n                    procsBlocked: doc(\"_source\")(\"cpu\")(\"procsBlocked\").default(0),\r\n                    procsRunning: doc(\"_source\")(\"cpu\")(\"procsRunning\").default(0),\r\n                    times: {\r\n                        idle:    doc(\"_source\")(\"cpu\")(\"times\")(\"idle\").default(0),\r\n                        iowait:  doc(\"_source\")(\"cpu\")(\"times\")(\"iowait\").default(0),\r\n                        irq:     doc(\"_source\")(\"cpu\")(\"times\")(\"irq\").default(0),\r\n                        nice:    doc(\"_source\")(\"cpu\")(\"times\")(\"nice\").default(0),\r\n                        softirq: doc(\"_source\")(\"cpu\")(\"times\")(\"softirq\").default(0),\r\n                        steal:   doc(\"_source\")(\"cpu\")(\"times\")(\"steal\").default(0),\r\n                        system:  doc(\"_source\")(\"cpu\")(\"times\")(\"system\").default(0),\r\n                        user:    doc(\"_source\")(\"cpu\")(\"times\")(\"user\").default(0),\r\n                    }\r\n                },\r\n                mem: doc(\"_source\")(\"mem\").keys().map(function(mt) {\r\n                    return [mt, doc(\"_source\")(\"mem\")(mt).default(0)]\r\n                }).coerceTo(\"object\"),\r\n                dev: {\r\n                    io: doc(\"_source\")(\"dev\")(\"io\").keys().map(function(dev)   {\r\n                        return [\r\n                            dev, {\r\n                                currIO:      doc(\"_source\")(\"dev\")(\"io\")(dev)(\"currIO\").default(0),\r\n                                mergeReads:  doc(\"_source\")(\"dev\")(\"io\")(dev)(\"mergeReads\").default(0),\r\n                                mergeWrites: doc(\"_source\")(\"dev\")(\"io\")(dev)(\"mergeWrites\").default(0),\r\n                                msIO:        doc(\"_source\")(\"dev\")(\"io\")(dev)(\"msIO\").default(0),\r\n                                msReads:     doc(\"_source\")(\"dev\")(\"io\")(dev)(\"msReads\").default(0),\r\n                                msWrites:    doc(\"_source\")(\"dev\")(\"io\")(dev)(\"msWrites\").default(0),\r\n                                numReads:    doc(\"_source\")(\"dev\")(\"io\")(dev)(\"numReads\").default(0),\r\n                                numWrites:   doc(\"_source\")(\"dev\")(\"io\")(dev)(\"numWrites\").default(0),\r\n                                secReads:    doc(\"_source\")(\"dev\")(\"io\")(dev)(\"secReads\").default(0),\r\n                                secWrites:   doc(\"_source\")(\"dev\")(\"io\")(dev)(\"secWrites\").default(0),\r\n                                wmsIO:       doc(\"_source\")(\"dev\")(\"io\")(dev)(\"wmsIO\").default(0),\r\n                            }\r\n                        ]\r\n                    }).coerceTo(\"object\"),\r\n                    size: doc(\"_source\")(\"dev\")(\"size\").keys().map(function(dev)   {\r\n                        return [\r\n                            dev, {\r\n                                free:        doc(\"_source\")(\"dev\")(\"size\")(dev)(\"free\").default(0),\r\n                                used:        doc(\"_source\")(\"dev\")(\"size\")(dev)(\"used\").default(0),\r\n                            }\r\n                        ]\r\n                    }).coerceTo(\"object\"),\r\n                },\r\n                net: doc(\"_source\")(\"net\").keys().map(function(iface) {\r\n                    return [\r\n                        iface, {\r\n                            rxBytes: doc(\"_source\")(\"net\")(iface)(\"rxBytes\").default(0),\r\n                            rxDrop:  doc(\"_source\")(\"net\")(iface)(\"rxDrop\").default(0),\r\n                            rxErr:   doc(\"_source\")(\"net\")(iface)(\"rxErr\").default(0),\r\n                            rxMulti: doc(\"_source\")(\"net\")(iface)(\"rxMulti\").default(0),\r\n                            rxPack:  doc(\"_source\")(\"net\")(iface)(\"rxPack\").default(0),\r\n                            txBytes: doc(\"_source\")(\"net\")(iface)(\"txBytes\").default(0),\r\n                            txDrop:  doc(\"_source\")(\"net\")(iface)(\"txDrop\").default(0),\r\n                            txErr:   doc(\"_source\")(\"net\")(iface)(\"txErr\").default(0),\r\n                            txPack:  doc(\"_source\")(\"net\")(iface)(\"txPack\").default(0),\r\n                        }\r\n                    ]\r\n                }).coerceTo(\"object\")\r\n            },\r\n            count: 1\r\n        }\r\n    }).reduce(\r\n    // reduce -- here we just do the sum of iowait, system and count -- the left/right objects are the one mapped before so something like { iowait:..., system: ..., count:...}\r\n    function(left, right) {\r\n        return {\r\n            _source: {\r\n                cpu: {\r\n                    loadAvg: [\r\n                        left(\"_source\")(\"cpu\")(\"loadAvg\").nth(0).default(0).add(right(\"_source\")(\"cpu\")(\"loadAvg\").nth(0).default(0)),\r\n                        left(\"_source\")(\"cpu\")(\"loadAvg\").nth(1).default(0).add(right(\"_source\")(\"cpu\")(\"loadAvg\").nth(1).default(0)),\r\n                        left(\"_source\")(\"cpu\")(\"loadAvg\").nth(2).default(0).add(right(\"_source\")(\"cpu\")(\"loadAvg\").nth(2).default(0)),\r\n                    ],\r\n                    procsBlocked: left(\"_source\")(\"cpu\")(\"procsBlocked\").default(0).add(right(\"_source\")(\"cpu\")(\"procsBlocked\").default(0)),\r\n                    procsRunning: left(\"_source\")(\"cpu\")(\"procsRunning\").default(0).add(right(\"_source\")(\"cpu\")(\"procsRunning\")),\r\n                    times: {\r\n                        idle:    left(\"_source\")(\"cpu\")(\"times\")(\"idle\").default(0).add(right(\"_source\")(\"cpu\")(\"times\")(\"idle\").default(0)),\r\n                        iowait:  left(\"_source\")(\"cpu\")(\"times\")(\"iowait\").default(0).add(right(\"_source\")(\"cpu\")(\"times\")(\"iowait\").default(0)),\r\n                        irq:     left(\"_source\")(\"cpu\")(\"times\")(\"irq\").default(0).add(right(\"_source\")(\"cpu\")(\"times\")(\"irq\").default(0)),\r\n                        nice:    left(\"_source\")(\"cpu\")(\"times\")(\"nice\").default(0).add(right(\"_source\")(\"cpu\")(\"times\")(\"nice\").default(0)),\r\n                        softirq: left(\"_source\")(\"cpu\")(\"times\")(\"softirq\").default(0).add(right(\"_source\")(\"cpu\")(\"times\")(\"softirq\").default(0)),\r\n                        steal:   left(\"_source\")(\"cpu\")(\"times\")(\"steal\").default(0).add(right(\"_source\")(\"cpu\")(\"times\")(\"steal\").default(0)),\r\n                        system:  left(\"_source\")(\"cpu\")(\"times\")(\"system\").default(0).add(right(\"_source\")(\"cpu\")(\"times\")(\"system\").default(0)),\r\n                        user:    left(\"_source\")(\"cpu\")(\"times\")(\"user\").default(0).add(right(\"_source\")(\"cpu\")(\"times\")(\"user\").default(0)),\r\n                    }\r\n                },\r\n                mem: left(\"_source\")(\"mem\").keys().setUnion(right(\"_source\")(\"mem\").keys()).map(function(mt) {\r\n                    return [mt, left(\"_source\")(\"mem\")(mt).default(0).add(right(\"_source\")(\"mem\")(mt).default(0))]\r\n                }).coerceTo(\"object\"),\r\n                dev: {\r\n                    io: left(\"_source\")(\"dev\")(\"io\").keys().setUnion(right(\"_source\")(\"dev\")(\"io\").keys()).map(function(dev)  {\r\n                        return [\r\n                            dev, {\r\n                                currIO:      left(\"_source\")(\"dev\")(\"io\")(dev)(\"currIO\").default(0).add(right(\"_source\")(\"dev\")(\"io\")(dev)(\"currIO\").default(0)),\r\n                                mergeReads:  left(\"_source\")(\"dev\")(\"io\")(dev)(\"mergeReads\").default(0).add(right(\"_source\")(\"dev\")(\"io\")(dev)(\"mergeReads\").default(0)),\r\n                                mergeWrites: left(\"_source\")(\"dev\")(\"io\")(dev)(\"mergeWrites\").default(0).add(right(\"_source\")(\"dev\")(\"io\")(dev)(\"mergeWrites\").default(0)),\r\n                                msIO:        left(\"_source\")(\"dev\")(\"io\")(dev)(\"msIO\").default(0).add(right(\"_source\")(\"dev\")(\"io\")(dev)(\"msIO\").default(0)),\r\n                                msReads:     left(\"_source\")(\"dev\")(\"io\")(dev)(\"msReads\").default(0).add(right(\"_source\")(\"dev\")(\"io\")(dev)(\"msReads\").default(0)),\r\n                                msWrites:    left(\"_source\")(\"dev\")(\"io\")(dev)(\"msWrites\").default(0).add(right(\"_source\")(\"dev\")(\"io\")(dev)(\"msWrites\").default(0)),\r\n                                numReads:    left(\"_source\")(\"dev\")(\"io\")(dev)(\"numReads\").default(0).add(right(\"_source\")(\"dev\")(\"io\")(dev)(\"numReads\").default(0)),\r\n                                numWrites:   left(\"_source\")(\"dev\")(\"io\")(dev)(\"numWrites\").default(0).add(right(\"_source\")(\"dev\")(\"io\")(dev)(\"numWrites\").default(0)),\r\n                                secReads:    left(\"_source\")(\"dev\")(\"io\")(dev)(\"secReads\").default(0).add(right(\"_source\")(\"dev\")(\"io\")(dev)(\"secReads\").default(0)),\r\n                                secWrites:   left(\"_source\")(\"dev\")(\"io\")(dev)(\"secWrites\").default(0).add(right(\"_source\")(\"dev\")(\"io\")(dev)(\"secWrites\").default(0)),\r\n                                wmsIO:       left(\"_source\")(\"dev\")(\"io\")(dev)(\"wmsIO\").default(0).add(right(\"_source\")(\"dev\")(\"io\")(dev)(\"wmsIO\").default(0)),\r\n                            }\r\n                        ]\r\n                    }).coerceTo(\"object\"),\r\n                    size: left(\"_source\")(\"dev\")(\"size\").keys().setUnion(right(\"_source\")(\"dev\")(\"size\").keys()).map(function(dev)   {\r\n                        return [\r\n                            dev, {\r\n                                free:        left(\"_source\")(\"dev\")(\"size\")(dev)(\"free\").default(0).add(right(\"_source\")(\"dev\")(\"size\")(dev)(\"free\").default(0)),\r\n                                used:        left(\"_source\")(\"dev\")(\"size\")(dev)(\"used\").default(0).add(right(\"_source\")(\"dev\")(\"size\")(dev)(\"used\").default(0)),\r\n                            }\r\n                        ]\r\n                    }).coerceTo(\"object\"),\r\n                },\r\n                net: left(\"_source\")(\"net\").keys().setUnion(right(\"_source\")(\"net\").keys()).map(function(iface){\r\n                    return [\r\n                        iface, {\r\n                            rxBytes: left(\"_source\")(\"net\")(iface)(\"rxBytes\").default(0).add(right(\"_source\")(\"net\")(iface)(\"rxBytes\").default(0)),\r\n                            rxDrop:  left(\"_source\")(\"net\")(iface)(\"rxDrop\").default(0).add(right(\"_source\")(\"net\")(iface)(\"rxDrop\").default(0)),\r\n                            rxErr:   left(\"_source\")(\"net\")(iface)(\"rxErr\").default(0).add(right(\"_source\")(\"net\")(iface)(\"rxErr\").default(0)),\r\n                            rxMulti: left(\"_source\")(\"net\")(iface)(\"rxMulti\").default(0).add(right(\"_source\")(\"net\")(iface)(\"rxMulti\").default(0)),\r\n                            rxPack:  left(\"_source\")(\"net\")(iface)(\"rxPack\").default(0).add(right(\"_source\")(\"net\")(iface)(\"rxPack\").default(0)),\r\n                            txBytes: left(\"_source\")(\"net\")(iface)(\"txBytes\").default(0).add(right(\"_source\")(\"net\")(iface)(\"txBytes\").default(0)),\r\n                            txDrop:  left(\"_source\")(\"net\")(iface)(\"txDrop\").default(0).add(right(\"_source\")(\"net\")(iface)(\"txDrop\").default(0)),\r\n                            txErr:   left(\"_source\")(\"net\")(iface)(\"txErr\").default(0).add(right(\"_source\")(\"net\")(iface)(\"txErr\").default(0)),\r\n                            txPack:  left(\"_source\")(\"net\")(iface)(\"txPack\").default(0).add(right(\"_source\")(\"net\")(iface)(\"txPack\").default(0)),\r\n                        }\r\n                    ]\r\n                }).coerceTo(\"object\")\r\n            },\r\n            count: left(\"count\").add(right(\"count\"))\r\n        }\r\n    }\r\n).map( function(reducedObject) {\r\n    // here reducedObject(\"count\") is the number of doc we have in each group (we mapped each do to 1, then did the sum)\r\n    return {\r\n        logTime: reducedObject(\"group\"),\r\n        _source: {\r\n            cpu: {\r\n                loadAvg: [\r\n                    reducedObject(\"reduction\")(\"_source\")(\"cpu\")(\"loadAvg\").nth(0).default(0).div(reducedObject(\"reduction\")(\"count\")),\r\n                    reducedObject(\"reduction\")(\"_source\")(\"cpu\")(\"loadAvg\").nth(1).default(0).div(reducedObject(\"reduction\")(\"count\")),\r\n                    reducedObject(\"reduction\")(\"_source\")(\"cpu\")(\"loadAvg\").nth(2).default(0).div(reducedObject(\"reduction\")(\"count\")),\r\n                ],\r\n                procsBlocked: reducedObject(\"reduction\")(\"_source\")(\"cpu\")(\"procsBlocked\").default(0).div( reducedObject(\"reduction\")(\"count\") ),\r\n                procsRunning: reducedObject(\"reduction\")(\"_source\")(\"cpu\")(\"procsRunning\").default(0).div( reducedObject(\"reduction\")(\"count\") ),\r\n                times: {\r\n                    idle:    reducedObject(\"reduction\")(\"_source\")(\"cpu\")(\"times\")(\"idle\").default(0).div( reducedObject(\"reduction\")(\"count\") ),\r\n                    iowait:  reducedObject(\"reduction\")(\"_source\")(\"cpu\")(\"times\")(\"iowait\").default(0).div( reducedObject(\"reduction\")(\"count\") ),\r\n                    irq:     reducedObject(\"reduction\")(\"_source\")(\"cpu\")(\"times\")(\"irq\").default(0).div( reducedObject(\"reduction\")(\"count\") ),\r\n                    nice:    reducedObject(\"reduction\")(\"_source\")(\"cpu\")(\"times\")(\"nice\").default(0).div( reducedObject(\"reduction\")(\"count\") ),\r\n                    softirq: reducedObject(\"reduction\")(\"_source\")(\"cpu\")(\"times\")(\"softirq\").default(0).div( reducedObject(\"reduction\")(\"count\") ),\r\n                    steal:   reducedObject(\"reduction\")(\"_source\")(\"cpu\")(\"times\")(\"steal\").default(0).div( reducedObject(\"reduction\")(\"count\") ),\r\n                    system:  reducedObject(\"reduction\")(\"_source\")(\"cpu\")(\"times\")(\"system\").default(0).div( reducedObject(\"reduction\")(\"count\") ),\r\n                    user:    reducedObject(\"reduction\")(\"_source\")(\"cpu\")(\"times\")(\"user\").default(0).div( reducedObject(\"reduction\")(\"count\") ),\r\n                }\r\n            },\r\n            mem: reducedObject(\"reduction\")(\"_source\")(\"mem\").keys().map(function(mt) {\r\n                return [mt, reducedObject(\"reduction\")(\"_source\")(\"mem\")(mt).div(reducedObject(\"reduction\")(\"count\"))]\r\n            }).coerceTo(\"object\"),\r\n            dev: {\r\n                io: reducedObject(\"reduction\")(\"_source\")(\"dev\")(\"io\").keys().map(function(dev){\r\n                    return [\r\n                        dev, {\r\n                            currIO:      reducedObject(\"reduction\")(\"_source\")(\"dev\")(\"io\")(dev)(\"currIO\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                            mergeReads:  reducedObject(\"reduction\")(\"_source\")(\"dev\")(\"io\")(dev)(\"mergeReads\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                            mergeWrites: reducedObject(\"reduction\")(\"_source\")(\"dev\")(\"io\")(dev)(\"mergeWrites\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                            msIO:        reducedObject(\"reduction\")(\"_source\")(\"dev\")(\"io\")(dev)(\"msIO\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                            msReads:     reducedObject(\"reduction\")(\"_source\")(\"dev\")(\"io\")(dev)(\"msReads\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                            msWrites:    reducedObject(\"reduction\")(\"_source\")(\"dev\")(\"io\")(dev)(\"msWrites\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                            numReads:    reducedObject(\"reduction\")(\"_source\")(\"dev\")(\"io\")(dev)(\"numReads\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                            numWrites:   reducedObject(\"reduction\")(\"_source\")(\"dev\")(\"io\")(dev)(\"numWrites\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                            secReads:    reducedObject(\"reduction\")(\"_source\")(\"dev\")(\"io\")(dev)(\"secReads\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                            secWrites:   reducedObject(\"reduction\")(\"_source\")(\"dev\")(\"io\")(dev)(\"secWrites\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                            wmsIO:       reducedObject(\"reduction\")(\"_source\")(\"dev\")(\"io\")(dev)(\"wmsIO\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                        }\r\n                    ]\r\n                }).coerceTo(\"object\"),\r\n                size: reducedObject(\"reduction\")(\"_source\")(\"dev\")(\"size\").keys().map(function(dev){\r\n                    return [\r\n                        dev, {\r\n                            free:        reducedObject(\"reduction\")(\"_source\")(\"dev\")(\"size\")(dev)(\"free\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                            used:        reducedObject(\"reduction\")(\"_source\")(\"dev\")(\"size\")(dev)(\"used\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                        }\r\n                    ]\r\n                }).coerceTo(\"object\"),\r\n            },\r\n            net: reducedObject(\"reduction\")(\"_source\")(\"net\").keys().map(function(iface){\r\n                return [\r\n                    iface, {\r\n                        rxBytes: reducedObject(\"reduction\")(\"_source\")(\"net\")(iface)(\"rxBytes\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                        rxDrop:  reducedObject(\"reduction\")(\"_source\")(\"net\")(iface)(\"rxDrop\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                        rxErr:   reducedObject(\"reduction\")(\"_source\")(\"net\")(iface)(\"rxErr\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                        rxMulti: reducedObject(\"reduction\")(\"_source\")(\"net\")(iface)(\"rxMulti\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                        rxPack:  reducedObject(\"reduction\")(\"_source\")(\"net\")(iface)(\"rxPack\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                        txBytes: reducedObject(\"reduction\")(\"_source\")(\"net\")(iface)(\"txBytes\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                        txDrop:  reducedObject(\"reduction\")(\"_source\")(\"net\")(iface)(\"txDrop\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                        txErr:   reducedObject(\"reduction\")(\"_source\")(\"net\")(iface)(\"txErr\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                        txPack:  reducedObject(\"reduction\")(\"_source\")(\"net\")(iface)(\"txPack\").div( reducedObject(\"reduction\")(\"count\") ),\r\n                    }\r\n                ]\r\n            }).coerceTo(\"object\")\r\n        },\r\n    }\r\n})\r\n```"
  , issueCommentId = 46636558
  }