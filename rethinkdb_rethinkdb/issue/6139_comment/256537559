IssueComment
  { issueCommentUpdatedAt = 2016 (-10) (-27) 03 : 27 : 31 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 877936
        , simpleUserLogin = N "marshall007"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/877936?v=3"
        , simpleUserUrl = "https://api.github.com/users/marshall007"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/256537559"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/6139#issuecomment-256537559"
  , issueCommentCreatedAt = 2016 (-10) (-27) 03 : 27 : 31 UTC
  , issueCommentBody =
      "@danielmewes I think I have a query that reproduces this error consistently. On OS X (single node) I don't get a backtrace and the error is not reproducible every time. On Linux (3 node cluster, 3 shards, 3 replicas), I've been able to reproduce consistently and I get the following backtrace:\r\n\r\n```\r\nVersion: rethinkdb 2.3.5 (GCC 4.8.5)\r\nerror: Error in src/arch/runtime/thread_pool.cc at line 367:\r\nerror: Segmentation fault from reading the address 0x1f4.\r\nerror: Backtrace:\r\nerror: Thu Oct 27 03:08:47 2016\r\n1 [0xb20f80]: backtrace_t::backtrace_t() at ??:?\r\n2 [0xb212e0]: format_backtrace(bool) at ??:?\r\n3 [0xd6d683]: report_fatal_error(char const*, int, char const*, ...) at ??:?\r\n4 [0xa42773]: linux_thread_pool_t::fatal_signal_handler(int, siginfo_t*, void*) at ??:?\r\n5 [0x7f3f50435100]: /lib64/libpthread.so.0(+0xf100) [0x7f3f50435100] at 0x7f3f50435100 (/lib64/libpthread.so.0)\r\n6 [0x82bc38]: profile::trace_t::start(std::string const&) at ??:?\r\n7 [0x9b454d]: ql::runtime_term_t::eval_on_current_stack(ql::scope_env_t*, ql::eval_flags_t) const at ??:?\r\n8 [0x9b495f]: ql::runtime_term_t::eval(ql::scope_env_t*, ql::eval_flags_t) const at ??:?\r\n9 [0x8fb961]: ql::reql_func_t::call(ql::env_t*, std::vector<ql::datum_t, std::allocator<ql::datum_t> > const&, ql::eval_flags_t) const at ??:?\r\n10 [0x8fb3c2]: ql::func_t::call(ql::env_t*, ql::datum_t, ql::eval_flags_t) const at ??:?\r\n11 [0x99759a]: ql::lt_cmp_t::operator()(ql::env_t*, profile::sampler_t*, ql::datum_t, ql::datum_t) const at ??:?\r\n12 [0x8f015b]: void std::__adjust_heap<__gnu_cxx::__normal_iterator<ql::ordered_union_datum_stream_t::merge_cache_item_t*, std::vector<ql::ordered_union_datum_stream_t::merge_cache_item_t, std::allocator<ql::ordered_union_datum_stream_t::merge_cache_item_t> > >, long, ql::ordered_union_datum_stream_t::merge_cache_item_t, ql::ordered_union_datum_stream_t::merge_less_t>(__gnu_cxx::__normal_iterator<ql::ordered_union_datum_stream_t::merge_cache_item_t*, std::vector<ql::ordered_union_datum_stream_t::merge_cache_item_t, std::allocator<ql::ordered_union_datum_stream_t::merge_cache_item_t> > >, long, long, ql::ordered_union_datum_stream_t::merge_cache_item_t, ql::ordered_union_datum_stream_t::merge_less_t) at ??:?\r\n13 [0x8dee98]: ql::ordered_union_datum_stream_t::next_raw_batch(ql::env_t*, ql::batchspec_t const&) at ??:?\r\n14 [0x8de301]: ql::eager_datum_stream_t::next_grouped_batch(ql::env_t*, ql::batchspec_t const&, std::map<ql::datum_t, std::vector<ql::datum_t, std::allocator<ql::datum_t> >, optional_datum_less_t, std::allocator<std::pair<ql::datum_t const, std::vector<ql::datum_t, std::allocator<ql::datum_t> > > > >*) at ??:?\r\n15 [0x8de865]: ql::eager_datum_stream_t::next_batch_impl(ql::env_t*, ql::batchspec_t const&) at ??:?\r\n16 [0x8d9a17]: ql::datum_stream_t::next_batch(ql::env_t*, ql::batchspec_t const&) at ??:?\r\n17 [0x8015ef]: ql::query_cache_t::ref_t::serve(ql::env_t*, ql::response_t*) at ??:?\r\n18 [0x8024ad]: ql::query_cache_t::ref_t::fill_response(ql::response_t*) at ??:?\r\n19 [0x8c2583]: rdb_query_server_t::run_query(ql::query_params_t*, ql::response_t*, signal_t*) at ??:?\r\n20 [0xb1ddc7]: void save_exception<void query_server_t::connection_loop<json_protocol_t>(linux_tcp_conn_t*, unsigned long, ql::query_cache_t*, signal_t*)::{lambda()#1}::operator()() const::{lambda()#1}>(std::__exception_ptr::exception_ptr*, std::string*, cond_t*, void query_server_t::connection_loop<json_protocol_t>(linux_tcp_conn_t*, unsigned long, ql::query_cache_t*, signal_t*)::{lambda()#1}::operator()() const::{lambda()#1}&&) at ??:?\r\n21 [0xb1e330]: void query_server_t::connection_loop<json_protocol_t>(linux_tcp_conn_t*, unsigned long, ql::query_cache_t*, signal_t*)::{lambda()#1}::operator()() const at ??:?\r\n22 [0xa45147]: coro_t::run() at ??:?\r\nerror: Exiting.\r\n```\r\n\r\nHere's the query (apologies for formatting, it's generated in code):\r\n\r\n```js\r\n\r\nr.union(\r\n  r.table(\"replication_results\").between([\"6fe94067-3a69-4071-b4b1-bd50524ccf1b\", r.minval], [\"6fe94067-3a69-4071-b4b1-bd50524ccf1b\", r.maxval], {\r\n    index: \"replication_test_code\"\r\n  }).orderBy({\r\n    index: \"replication_test_code\"\r\n  }),\r\n  r.table(\"replication_results\").between([\"1c75e0f4-5ba6-4e49-920b-8350f86383c7\", r.minval], [\"1c75e0f4-5ba6-4e49-920b-8350f86383c7\", r.maxval], {\r\n    index: \"replication_test_code\"\r\n  }).orderBy({\r\n    index: \"replication_test_code\"\r\n  }),\r\n  r.table(\"replication_results\").between([\"d7a44d39-b962-4d89-a059-1749648a15fb\", r.minval], [\"d7a44d39-b962-4d89-a059-1749648a15fb\", r.maxval], {\r\n    index: \"replication_test_code\"\r\n  }).orderBy({\r\n    index: \"replication_test_code\"\r\n  }),\r\n  r.table(\"replication_results\").between([\"2d4610c4-b671-41a3-90b7-2600bca0c268\", r.minval], [\"2d4610c4-b671-41a3-90b7-2600bca0c268\", r.maxval], {\r\n    index: \"replication_test_code\"\r\n  }).orderBy({\r\n    index: \"replication_test_code\"\r\n  }),\r\n  r.table(\"replication_results\").between([\"7f00fe69-0ed3-4e96-b8d3-9599a3347159\", r.minval], [\"7f00fe69-0ed3-4e96-b8d3-9599a3347159\", r.maxval], {\r\n    index: \"replication_test_code\"\r\n  }).orderBy({\r\n    index: \"replication_test_code\"\r\n  }),\r\n  r.table(\"replication_results\").between([\"acf25d39-3ad4-46ed-a1a5-6782495dbd37\", r.minval], [\"acf25d39-3ad4-46ed-a1a5-6782495dbd37\", r.maxval], {\r\n    index: \"replication_test_code\"\r\n  }).orderBy({\r\n    index: \"replication_test_code\"\r\n  }),\r\n  r.table(\"replication_results\").between([\"3e6c355c-a380-4f5b-b5f2-cc9501b30d08\", r.minval], [\"3e6c355c-a380-4f5b-b5f2-cc9501b30d08\", r.maxval], {\r\n    index: \"replication_test_code\"\r\n  }).orderBy({\r\n    index: \"replication_test_code\"\r\n  }),\r\n  { interleave: \"test_id\" }\r\n)\r\n.pluck(\"id\", \"source_id\", \"replication_id\", \"test_id\", \"url\", \"data\")\r\n```"
  , issueCommentId = 256537559
  }