IssueComment
  { issueCommentUpdatedAt = 2016 (-10) (-28) 18 : 29 : 01 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 877936
        , simpleUserLogin = N "marshall007"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/877936?v=3"
        , simpleUserUrl = "https://api.github.com/users/marshall007"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/256974731"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/6139#issuecomment-256974731"
  , issueCommentCreatedAt = 2016 (-10) (-28) 17 : 06 : 10 UTC
  , issueCommentBody =
      "I compiled a binary using [this patch](https://github.com/rethinkdb/rethinkdb/compare/v2.3.5...marshall007:cc31990) suggested by @danielmewes as a workaround. The query still segfaults with the same backtrace:\r\n\r\n<details>\r\n```\r\nVersion: rethinkdb 2.3.5-1-gcc3199 (GCC 4.8.5)\r\nerror: Error in src/arch/runtime/thread_pool.cc at line 367:\r\nerror: Segmentation fault from reading the address (nil).\r\nerror: Backtrace:\r\nerror: Fri Oct 28 16:43:44 2016\r\n1 [0xd65a40]: backtrace_t::backtrace_t() at backtrace.cc:221 (discriminator 1)\r\n2 [0xd65da0]: format_backtrace(bool) at backtrace.cc:330\r\n3 [0xd736b3]: report_fatal_error(char const*, int, char const*, ...) at errors.cc:85\r\n4 [0x81d0c3]: linux_thread_pool_t::fatal_signal_handler(int, siginfo_t*, void*) at thread_pool.cc:369\r\n5 [0x7f2be7c6b100]: /lib64/libpthread.so.0(+0xf100) [0x7f2be7c6b100] at 0x7f2be7c6b100 (/lib64/libpthread.so.0)\r\n6 [0xb4e52f]: ql::env_t::do_eval_callback() at env.cc:29\r\n7 [0xc3e7b8]: ql::runtime_term_t::eval_on_current_stack(ql::scope_env_t*, ql::eval_flags_t) const at term.cc:265\r\n8 [0xc3ebaf]: ql::runtime_term_t::eval(ql::scope_env_t*, ql::eval_flags_t) const at term.cc:299\r\n9 [0xcef441]: ql::reql_func_t::call(ql::env_t*, std::vector<ql::datum_t, std::allocator<ql::datum_t> > const&, ql::eval_flags_t) const at datum.hpp:110\r\n10 [0xceeea2]: ql::func_t::call(ql::env_t*, ql::datum_t, ql::eval_flags_t) const at func.cc:26 (discriminator 2)\r\n11 [0xb512ba]: ql::lt_cmp_t::operator()(ql::env_t*, profile::sampler_t*, ql::datum_t, ql::datum_t) const at order_util.cc:112\r\n12 [0xb3e51b]: void std::__adjust_heap<__gnu_cxx::__normal_iterator<ql::ordered_union_datum_stream_t::merge_cache_item_t*, std::vector<ql::ordered_union_datum_stream_t::merge_cache_item_t, std::allocator<ql::ordered_union_datum_stream_t::merge_cache_item_t> > >, long, ql::ordered_union_datum_stream_t::merge_cache_item_t, ql::ordered_union_datum_stream_t::merge_less_t>(__gnu_cxx::__normal_iterator<ql::ordered_union_datum_stream_t::merge_cache_item_t*, std::vector<ql::ordered_union_datum_stream_t::merge_cache_item_t, std::allocator<ql::ordered_union_datum_stream_t::merge_cache_item_t> > >, long, long, ql::ordered_union_datum_stream_t::merge_cache_item_t, ql::ordered_union_datum_stream_t::merge_less_t) at datum.hpp:110\r\n13 [0xb2cf28]: ql::ordered_union_datum_stream_t::next_raw_batch(ql::env_t*, ql::batchspec_t const&) at stl_heap.h:343\r\n14 [0xb2c371]: ql::eager_datum_stream_t::next_grouped_batch(ql::env_t*, ql::batchspec_t const&, std::map<ql::datum_t, std::vector<ql::datum_t, std::allocator<ql::datum_t> >, optional_datum_less_t, std::allocator<std::pair<ql::datum_t const, std::vector<ql::datum_t, std::allocator<ql::datum_t> > > > >*) at stl_vector.h:646\r\n15 [0xb2c8d5]: ql::eager_datum_stream_t::next_batch_impl(ql::env_t*, ql::batchspec_t const&) at stl_map.h:435\r\n16 [0xb27ab7]: ql::datum_stream_t::next_batch(ql::env_t*, ql::batchspec_t const&) at datum_stream.cc:1400\r\n17 [0xc10a4f]: ql::query_cache_t::ref_t::serve(ql::env_t*, ql::response_t*) at query_cache.cc:319\r\n18 [0xc1190d]: ql::query_cache_t::ref_t::fill_response(ql::response_t*) at query_cache.cc:214\r\n19 [0xc148c3]: rdb_query_server_t::run_query(ql::query_params_t*, ql::response_t*, signal_t*) at query_server.cc:50\r\n20 [0xd70487]: void save_exception<void query_server_t::connection_loop<json_protocol_t>(linux_tcp_conn_t*, unsigned long, ql::query_cache_t*, signal_t*)::{lambda()#1}::operator()() const::{lambda()#1}>(std::__exception_ptr::exception_ptr*, std::string*, cond_t*, void query_server_t::connection_loop<json_protocol_t>(linux_tcp_conn_t*, unsigned long, ql::query_cache_t*, signal_t*)::{lambda()#1}::operator()() const::{lambda()#1}&&) at scoped.hpp:104\r\n21 [0xd709f0]: void query_server_t::connection_loop<json_protocol_t>(linux_tcp_conn_t*, unsigned long, ql::query_cache_t*, signal_t*)::{lambda()#1}::operator()() const at server.cc:607\r\n22 [0x81af97]: coro_t::run() at coroutines.cc:282\r\nerror: Exiting.\r\n```\r\n</details>"
  , issueCommentId = 256974731
  }