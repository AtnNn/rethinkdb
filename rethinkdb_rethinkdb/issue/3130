Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2016 (-03) (-18) 18 : 49 : 01 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/3130/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/3130"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "0052cc"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:ReQL_proposal"
          , labelName = "tp:ReQL_proposal"
          }
      ]
  , issueNumber = 3130
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 1366
        , simpleUserLogin = N "deontologician"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1366?v=3"
        , simpleUserUrl = "https://api.github.com/users/deontologician"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Proposal: drop() and create()"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/3130"
  , issueCreatedAt = 2014 (-10) (-01) 22 : 22 : 13 UTC
  , issueBody =
      Just
        "``` js\nr.tableCreate('foo')  /* becomes */ r.table('foo').create()\nr.tableDrop('foo') /* becomes */ r.table('foo').drop()\n```\n\nAll optargs from the terms on the left become optargs of the new terms on the right.\n\n**Pros:**\n- Consistent with other stuff like `table().info()`\n- It's less awkward to turn `r.table('foo').create()` into `r.table('foo')...` in the data explorer (and hence better for demos, talks and live-coding).\n- The current names are repetitive and we already have a `table` term. Contrast this with terms like `index_create` which have no first class `index` term currently\n\n**Cons:**\n- At least `table().create()` would require a change in how terms are evaluated. (I assume, not being familiar with the code myself). To do `create` in this way, you'd need to postpone checking if the table exists until a later term absolutely requires it.\n- Making changes like this solely for consistency is a slippery slope. Now do indexes have to become first class objects too?\n\nThis is worth thinking about at least. The largest objection I anticipate is that the effort/reward ratio is probably bad. But it makes ReQL tighter.\n"
  , issueState = "open"
  , issueId = Id 44626181
  , issueComments = 39
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 882
          , milestoneNumber = 2
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone are not an immediate priority, and will be periodically revisited. When we decide to work on an issue in backlog, we'll move it to next."
          , milestoneTitle = "backlog"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/2"
          , milestoneCreatedAt = 2012 (-11) (-11) 14 : 16 : 11 UTC
          , milestoneState = "open"
          }
  }