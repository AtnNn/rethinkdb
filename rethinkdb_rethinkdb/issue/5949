Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2016 (-07) (-18) 23 : 46 : 48 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5949/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/5949"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "fef2c0"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/JavaScript%20/%20Coffee"
          , labelName = "JavaScript / Coffee"
          }
      ]
  , issueNumber = 5949
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 1932776
        , simpleUserLogin = N "Calavoow"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1932776?v=3"
        , simpleUserUrl = "https://api.github.com/users/Calavoow"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Call stack size exceeded with `r.args`"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5949"
  , issueCreatedAt = 2016 (-07) (-14) 12 : 30 : 42 UTC
  , issueBody =
      Just
        "In the case where we want to update 100k documents by id at once,  we want to perform a selection on 100k ids. However, the JavaScript library throws an Error when constructing a `getAll(...ids)` where `ids.length === 1e6`:\r\n```\r\n    RangeError: Uncaught error: Maximum call stack size exceeded\r\n    at /.../node_modules/rethinkdb/ast.js:1087:43\r\n    at Table.RDBVal.getAll (/.../node_modules/rethinkdb/ast.js:1089:7)\r\n    ....\r\n```\r\n\r\nTo resolve this error I made a proof of concept modification to the ast.coffee library file that supports such large operations without giving an error. It is available here: https://gist.github.com/Calavoow/714705fa6bdeeb2479af6f2db531be76/. When calling `getAll(ids)` (note: no rest arguments) the query completes successfully. Thus RethinkDB itself is able to handle this operation, but the JavaScript interface is not.\r\n\r\nOf course this poses is an issue for indices that _are_ arrays. But I think it would be a good addition to support large selections so that batch updates do not have to be chunked. Honestly, to us it seems that `getAll` should rather take indices as elements of an array rather than arguments. Since it maps a list of ids to a list of results. It would be the list analogue of `get`. I.e. `getAll = [ids].map(get)`. Alternatively, another operator could be introduced requiring the ids as a list. For example a `getBatch` function."
  , issueState = "open"
  , issueId = Id 165550454
  , issueComments = 10
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 883
          , milestoneNumber = 2
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone are not an immediate priority, and will be periodically revisited. When we decide to work on an issue in backlog, we'll move it to next."
          , milestoneTitle = "backlog"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/2"
          , milestoneCreatedAt = 2012 (-11) (-11) 14 : 16 : 11 UTC
          , milestoneState = "open"
          }
  }