Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2016 (-08) (-22) 11 : 05 : 19 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5100/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/5100"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "009800"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/good_for_contributors"
          , labelName = "good_for_contributors"
          }
      , IssueLabel
          { labelColor = "fef2c0"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/Python"
          , labelName = "Python"
          }
      ]
  , issueNumber = 5100
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 3856600
        , simpleUserLogin = N "gamesbrainiac"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/3856600?v=3"
        , simpleUserUrl = "https://api.github.com/users/gamesbrainiac"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Adding `async` and `await` support for Python 3.5"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5100"
  , issueCreatedAt = 2015 (-11) (-16) 18 : 05 : 45 UTC
  , issueBody =
      Just
        "Hi guys!\n\nWith the advent of `async` and `await` keywords in Python 3.5, I think we need to add some convenience methods to the connection object that is returned when we make a `r.connect(...` function call. This would not be difficult to do, because we can already do a `yield r.connect` anyways.\n\nSo, the proposal is to add an `__await__` method to the connection object. This will not be hard to implement though, as you can see with `aiohttp`'s [`await` implementation](https://sourcegraph.com/github.com/KeepSafe/aiohttp@master/.tree/aiohttp/client.py?startline=482&endline=484):\n\n``` python\n@asyncio.coroutine\ndef __iter__(self):\n    resp = yield from self._coro\n    return resp\nif PY_35:\n    def __await__(self):\n        resp = yield from self._coro\n        return resp\n```\n"
  , issueState = "open"
  , issueId = Id 117184322
  , issueComments = 14
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 505365
                , simpleUserLogin = N "danielmewes"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/505365?v=3"
                , simpleUserUrl = "https://api.github.com/users/danielmewes"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 54
          , milestoneNumber = 119
          , milestoneClosedIssues = 8
          , milestoneDescription = Nothing
          , milestoneTitle = "2.3.x"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/119"
          , milestoneCreatedAt = 2016 (-04) (-06) 18 : 05 : 18 UTC
          , milestoneState = "open"
          }
  }