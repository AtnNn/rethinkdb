IssueComment
  { issueCommentUpdatedAt = 2015 (-04) (-08) 20 : 49 : 15 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 297060
        , simpleUserLogin = N "nviennot"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/297060?v=3"
        , simpleUserUrl = "https://api.github.com/users/nviennot"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/91032071"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/4029#issuecomment-91032071"
  , issueCommentCreatedAt = 2015 (-04) (-08) 20 : 44 : 38 UTC
  , issueCommentBody =
      "Oh, and a quick note to @mlucy :\r\nthe method `safe_synchronize` defined here: https://github.com/rethinkdb/rethinkdb/blob/next/drivers/ruby/lib/net.rb#L619-L629 is actually not safe.\r\n1) The naming is weird, consider using `reentrant_synchronize`\r\n2) the variable `@rdb_owner` is set before getting into the synchronize block, and thus the whole thing is racy.\r\n\r\nBut there is no need to implement such thing: In Ruby, if you want reentrant Mutexes, you use Monitors instead: http://ruby-doc.org/stdlib-2.1.2/libdoc/monitor/rdoc/Monitor.html\r\n\r\nedit: you might want to look at the example here: http://ruby-doc.org/stdlib-1.9.3/libdoc/monitor/rdoc/MonitorMixin.html which uses condition variables as well (see the use of `wait_while`)"
  , issueCommentId = 91032071
  }