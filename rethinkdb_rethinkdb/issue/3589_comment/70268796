IssueComment
  { issueCommentUpdatedAt = 2015 (-01) (-16) 15 : 31 : 18 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 265071
        , simpleUserLogin = N "kofalt"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/265071?v=3"
        , simpleUserUrl = "https://api.github.com/users/kofalt"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/70268796"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3589#issuecomment-70268796"
  , issueCommentCreatedAt = 2015 (-01) (-16) 15 : 24 : 25 UTC
  , issueCommentBody =
      "From the [security documentation](http://www.rethinkdb.com/docs/security/), it seems they largely rely on correctly configured networks:\r\n\r\n> The best way to secure a RethinkDB cluster is to run it on a protected network that doesn't allow access from the outside world. \r\n\r\nThere is an optional authentication system, but it is (probably deliberately) kept very simple:\r\n\r\n> Note: the authentication key will be transmitted to and stored on the RethinkDB server in plain text, and neither the key nor the data passed between the client and the server will be encrypted. The key provides basic protection against unauthorized access, but if the client port is open to outside networks it's strongly suggested you use SSH tunneling for protection (see below).\r\n\r\nIMO this is 100% the right way to do it. The network is a powerful access management tool available to an administrator, and should be treated accordingly. The alternative is only selecting systems that all attempt to implement something that is not their core competency.\r\n\r\nOther examples of excellent software taking the same approach include the [redis security docs](http://redis.io/topics/security):\r\n\r\n> Redis is designed to be accessed by trusted clients inside trusted environments. This means that usually it is not a good idea to expose the Redis instance directly to the internet or, in general, to an environment where untrusted clients can directly access the Redis TCP port or UNIX socket.\r\n\r\nThis matches how I expect competent systems to be designed: keep your [attack surface small](http://www.sans.edu/research/security-laboratory/article/did-attack-surface), spend a lot of effort securing your attack surface, and everything else goes behind access restrictions. This is defence in depth 101, and is a battle-tested & industry-standard security doctrine.\r\n\r\nIn summary I would disagree with development effort being spent on a feature like this because it runs counter to my understanding of best practices for secure environments. That all said, I'm not employed by RethinkDB, and have no say in the matter :)"
  , issueCommentId = 70268796
  }