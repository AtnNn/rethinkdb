Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2016 (-02) (-09) 07 : 20 : 20 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4008/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/4008"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "0052cc"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:ReQL_proposal"
          , labelName = "tp:ReQL_proposal"
          }
      ]
  , issueNumber = 4008
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 519940
        , simpleUserLogin = N "elifarley"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/519940?v=3"
        , simpleUserUrl = "https://api.github.com/users/elifarley"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "TTL syntax suggestions"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4008"
  , issueCreatedAt = 2015 (-04) (-02) 19 : 21 : 27 UTC
  , issueBody =
      Just
        "Here are some examples on how TTL can be used.\n\nDefines a default value of 1000 ms for TTL (but each document can have its own 'ttl' attribute),\ncreates a read-only attribute 'date-created' for every document and creates an index called 'date-created':\n\n``` Javascript\ndb.tableCreate(\"foo\", {ttl: 1000} )\n\n// Uses an alternate index name:\ndb.tableCreate(\"foo\", {ttl: {'my-timestamp': 1000}} ) // ttl based on a user-created index named 'my-timestamp'\n```\n\n``` Javascript\n// checks table-defined TTL (if there is one, like the above example) and returns a NOT-FOUND error if doc is too old\nr.table(\"foo\").get(1)\n\n// checks table-defined TTL (if there is one, like the above example) and returns only those documents that are not too old\nr.table(\"foo\").getAll('man_of_steel', {index:'code_name'})\n\noverriding a document's TTL:\n\n// If the doc doesn't have a column named 'date-created', returns it. Otherwise, checks doc age according to the TTL passed as argument and returns a NOT-FOUND error if doc is too old\nr.table(\"foo\").get(1, {ttl: 500})\n\n// Omits only docs that have an attr named 'date-created' AND are too old, according to the TTL passed as argument\nr.table(\"foo\").getAll('man_of_steel', {index:'code_name', ttl: 500})\n\n// Omits only docs that have an attr named 'my-timestamp' AND are too old, according to the TTL passed as argument\nr.table(\"foo\").getAll('man_of_steel', {index:'code_name', ttl: {'my-timestamp': 500}})\n```\n\nIf a table is creaetd with a 'ttl' option, then the TTL garbage collector will take care of it. But this garbage collector doesn't have to be coded first - we can have passive TTL functionality for now (as suggested on a comment on #746).\n\nOr there could also be a command that asks the cluster to purge old entries, like:\n\180\180\180Javascript\nr.db('test').purge({sync: _boolean_})\ndb.table('foo').purge({sync: _boolean_})\n\180\180\180\nWhen _sync_ is true, the command only returns after all changes have been committed to storage.\nWhen it's false (the default), the return is immediate, much like the way indexCreate works.\n\nThe **purge** command can be used to get a changefeed, like this:\n\n``` Javascript\n// shows documents as soon as they are purged either by the GC or by a get\nr.db('test').purge().changes()\ndb.table('foo').purge().changes()\n```\n\nAnd here's an alternate way to purge old entries which gives more flexibility:\n\n``` Javascript\n// delete all entries that have already expired but haven't been collected by the GC\nr.db('test').expired().delete()\ndb.table('foo').expired().delete()\n\n// As soon as an entry expires (but before it's deleted), it'll be seen on these changefeeds:\n// (this one will be expensive)\nr.db('test').expired().changes()\ndb.table('foo').expired().changes()\n```\n"
  , issueState = "open"
  , issueId = Id 65993924
  , issueComments = 7
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 268
          , milestoneNumber = 41
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone will be revisited after each major release during the planning stage for the major release after it. They will be moved to a specific release milestone if chosen for that release."
          , milestoneTitle = "subsequent"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/41"
          , milestoneCreatedAt = 2013 (-06) (-30) 07 : 32 : 52 UTC
          , milestoneState = "open"
          }
  }