IssueComment
  { issueCommentUpdatedAt = 2013 (-06) (-27) 21 : 55 : 56 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/20157787"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1089#issuecomment-20157787"
  , issueCommentCreatedAt = 2013 (-06) (-27) 21 : 55 : 56 UTC
  , issueCommentBody =
      "That would be really nice! Lambdas ftw.\r\n\r\nOn Thursday, June 27, 2013, Michel wrote:\r\n\r\n> r.expr([1,2,3,4]).changeAt(2, function(doc) { return doc+1})\r\n>\r\n> I would expect to get back [1,2, 4, 4], but now we get\r\n>\r\n> RqlRuntimeError: Expected type DATUM but found FUNCTION:\r\n> OPAQUE VALUE FUNCTION in:\r\n> r([1, 2, 3, 4]).changeAt(2, function(var_0) { return \"var_01\"; })\r\n>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n>\r\n> We have a work around now with\r\n>\r\n> r.expr([1,2,3,4]).do(function(ar) {\r\n>   return ar.changeAt(2, ar.nth(2).add(1))\r\n> })\r\n>\r\n> But it's not as good as with a lambda function.\r\n>\r\n> \8212\r\n> Reply to this email directly or view it on GitHub<https://github.com/rethinkdb/rethinkdb/issues/1089>\r\n> .\r\n>"
  , issueCommentId = 20157787
  }