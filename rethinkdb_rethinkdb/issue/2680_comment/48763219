IssueComment
  { issueCommentUpdatedAt = 2014 (-07) (-11) 18 : 05 : 04 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 316661
        , simpleUserLogin = N "timmaxw"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/316661?v=3"
        , simpleUserUrl = "https://api.github.com/users/timmaxw"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/48763219"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2680#issuecomment-48763219"
  , issueCommentCreatedAt = 2014 (-07) (-11) 18 : 05 : 04 UTC
  , issueCommentBody =
      "> I propose to solve this problem by storing UUIDs internally, but converting them to the name when the user reads the document.\r\n\r\nOn further thought, this can fail in some really awkward ways. Where do we store the UUID<->name conversion table?\r\n* We could use the list of accessible servers. But then what do we show in the document if a server is no longer accessible?\r\n* We could cache the \"last known name\" of each server. But suppose a server goes down, then another server is renamed to the name of the server that went down; do we show both servers under the same name?\r\n* We could keep the server names in the semilattices or a similar persistent database. But then we would need explicit management tools for removing old servers from the database.\r\n\r\nThere are some other problems:\r\n* What if two servers are renamed to the same thing simultaneously? If we never expose UUIDs, the user has no way of renaming one of them from the web UI. The only way to prevent name conflicts would be a cluster-wide consensus algorithm.\r\n\r\nI don't have a good solution off the top of my head. I'll let you know if I think of anything."
  , issueCommentId = 48763219
  }