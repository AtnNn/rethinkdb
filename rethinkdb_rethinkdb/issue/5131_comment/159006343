IssueComment
  { issueCommentUpdatedAt = 2015 (-11) (-23) 17 : 37 : 58 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1366
        , simpleUserLogin = N "deontologician"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1366?v=3"
        , simpleUserUrl = "https://api.github.com/users/deontologician"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/159006343"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/5131#issuecomment-159006343"
  , issueCommentCreatedAt = 2015 (-11) (-23) 17 : 37 : 58 UTC
  , issueCommentBody =
      "What about something like `cursor.iter_batches()` which would return an iterator where `.next()` gets the entire next batch.\r\n\r\nIn tornado it'd look like:\r\n```py\r\nfeed = yield r.table(table).changes(squash=3, include_initial=False).run(conn)\r\nbatches = feed.iter_batches()  # shouldn't need to block\r\nwhile (yield batches.fetch_next()):\r\n    batch = yield batches.next()  # yields a list\r\n```\r\n\r\nIn synchronous python:\r\n```py\r\nquery = r.table(table).changes(squash=3, include_initial=False)\r\nfor batch in query.run(conn).iter_batches():\r\n    print batch\r\n```"
  , issueCommentId = 159006343
  }