IssueComment
  { issueCommentUpdatedAt = 2014 (-07) (-21) 18 : 10 : 21 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 218725
        , simpleUserLogin = N "dminkovsky"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/218725?v=3"
        , simpleUserUrl = "https://api.github.com/users/dminkovsky"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/49641909"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/195#issuecomment-49641909"
  , issueCommentCreatedAt = 2014 (-07) (-21) 18 : 02 : 00 UTC
  , issueCommentBody =
      "@deontologician It was really nice to look at the example, though, whatever outstanding pieces there may be. Thanks again. This is the first time I'm building something that will need this kind of functionality, and the example was really helpful to confirm my understanding of the basics of this architecture.\r\n\r\n@neumino Thanks for the response. I'm not as much concerned about the buffer filling up or the server going down. The buffer filling up doesn't seem to be a problem. And if RethinkDB goes down, well then of course the feed is down, but so is everything else, right?\r\n\r\nBut I am concerned with the apparent single point of failure on listening to a change feed. If I launch a process that opens a changes feed and starts listening to it, that process becomes a single point of failure, right? If that's the case, which approach would you take to mitigate this? I mean, if a process that's listening to a changes feed goes away, not only do you lose the buffer it hadn't read yet, but you also lose any future changes until that process comes back up. I don't get the impression that a feed can be shared by multiple processes. So it appears that multiple processes, with unique handles on logically identical feeds need to exist in order to mitigate this issue? Such processes would then need to coordinate the redundancy of receiving multiple, identical change streams. "
  , issueCommentId = 49641909
  }