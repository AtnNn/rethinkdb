IssueComment
  { issueCommentUpdatedAt = 2015 (-04) (-15) 20 : 21 : 17 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/93554682"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/4063#issuecomment-93554682"
  , issueCommentCreatedAt = 2015 (-04) (-15) 20 : 21 : 17 UTC
  , issueCommentBody =
      "Thanks for opening the issue @reidja.\r\n\r\n@AtnNn, @reidja and I had briefly discussed this on IRC.\r\n\r\n`intersects` is non-deterministic because it can give different results on different servers. However in contrast to some other non-deterministic operations (like accessing another table, or random operations), it is deterministic per server.\r\n\r\n@mlucy do changefeeds like these actually require that the function is deterministic across servers?\r\n\r\nIf not, I propose that we make the non-determinism flag for terms more fine-grained to allow this.\r\nWe should also consider how this will interact with resumable changefeeds in the future, especially for the case where we support resuming a changefeed after an old primary has gone down.\r\n\r\nAn `ignoreNonDeterminism` flag might work, but we should understand (and explain) very well which consequences that can have. In the case of updates we can provide `nonAtomic` because we can actually fall back to an alternative processing scheme which maintains all guarantees, except for atomicity."
  , issueCommentId = 93554682
  }