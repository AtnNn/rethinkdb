IssueComment
  { issueCommentUpdatedAt = 2015 (-10) (-20) 07 : 14 : 05 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 6277212
        , simpleUserLogin = N "tatsujin1"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/6277212?v=3"
        , simpleUserUrl = "https://api.github.com/users/tatsujin1"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/149458480"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3579#issuecomment-149458480"
  , issueCommentCreatedAt = 2015 (-10) (-20) 07 : 14 : 05 UTC
  , issueCommentBody =
      "Thanks for the thorough response!\r\n\r\nThat changes arrive amongst initial state documents is not a problem; the two sets are simple to serialize in application code. Hmm... come to think of it, I'm not sure that is strictly required. :)  (especially as the initial is sent first, as you mentioned)\r\n\r\nSorting the initial state is something I need, however; the inter-document arrival order has meaning in my case, e.g. A then B means X; B then A means Y.\r\n\r\nBut hey, I hadn't thought of using an indexed `.order_by()`! As it is required to be first in the query chain I thought it would be too slow to \"sort the entire data set\", but I tried it now and it is surprisingly fast! :) \r\n\r\nYeah, I know of the `state` documents, but since I'm doing the initial+changes queries manually it's not currently used, but they of course will be once this feature is in use. If the initial+changes sets need to be serialized that is..."
  , issueCommentId = 149458480
  }