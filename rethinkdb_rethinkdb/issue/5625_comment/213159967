IssueComment
  { issueCommentUpdatedAt = 2016 (-04) (-21) 23 : 36 : 23 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 273857
        , simpleUserLogin = N "andyburke"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/273857?v=3"
        , simpleUserUrl = "https://api.github.com/users/andyburke"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/213159967"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/5625#issuecomment-213159967"
  , issueCommentCreatedAt = 2016 (-04) (-21) 23 : 36 : 23 UTC
  , issueCommentBody =
      "Sadly, version numbers have been imbued with this idea from a marketing perspective: 2.0 is better than 1.0, right?\r\n\r\nOne way some people/companies are separating information/PR/marketing (none of which are bad) from versioning is to have named releases. It's fun, and it leaves the versions mostly out of it so they can be driven by the APIs and developer needs, eg:\r\n\r\n```\r\n\"Rocketship\" (2.3.2)\r\n  - Added fast new API!\r\n\r\n...\r\n\r\n\"Slothtoes\" (2.7.0)\r\n  - Added homomorphic encryption support\r\n```\r\n\r\nIn the example, backwards compatibility has been maintained, but major new features have also been added. By using names to call out the big bundles of work instead of a major version bump, code can continue to understand when it can and cannot interoperate.\r\n\r\nThanks for considering and discussing the issue, I appreciate it."
  , issueCommentId = 213159967
  }