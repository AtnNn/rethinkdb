IssueComment
  { issueCommentUpdatedAt = 2015 (-11) (-26) 00 : 33 : 40 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/159765737"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/5144#issuecomment-159765737"
  , issueCommentCreatedAt = 2015 (-11) (-26) 00 : 33 : 40 UTC
  , issueCommentBody =
      "I'm a bit sceptical of this as well to be honest, but for different reasons than @ha1331 .\r\n\r\nI think if we implement general (slow) transactions, they would cover a big chunk of use cases for this model as well. Their performance might be somewhat worse, but the functionality would certainly be there.\r\n\r\nHowever if we implement AO tables (which would be some considerable work I think, since we need that \"truncate\" operation) and transactions on those, that doesn't give us an obvious path to general transactions. It would solve a subset of requirements, but wouldn't bring us any closer to solving the larger set of requirements as far as I can tell.\r\n\r\nI might be wrong about this. But I think this isn't something we should dedicate too much time to for the next 6 months or so.\r\n\r\n@elifarley It sounds like you actually have an acute need for this feature. If you are ok with only a single server and no failover, you could implement this relatively easily yourself in the application I think. All you'd need for the \"truncate\" would be a source of incrementing keys for inserting the documents. Together with a mutex for the commit stage, that should provide all the functionality?"
  , issueCommentId = 159765737
  }