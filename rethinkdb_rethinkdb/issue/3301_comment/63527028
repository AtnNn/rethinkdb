IssueComment
  { issueCommentUpdatedAt = 2014 (-11) (-18) 19 : 12 : 34 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 258437
        , simpleUserLogin = N "srh"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/258437?v=3"
        , simpleUserUrl = "https://api.github.com/users/srh"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/63527028"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3301#issuecomment-63527028"
  , issueCommentCreatedAt = 2014 (-11) (-18) 19 : 12 : 34 UTC
  , issueCommentBody =
      "You shouldn't fuck with users' data.  If a user wants their strings to be Unicode-normalized, let them normalize it themselves. The only reason given for normalizing so far is the really nerdy one, that the strings are the same on the meaning level, just not the binary level.  This is completely irrelevant to how the world works.  Lots of strings have the same meaning.  \"I am Sam.\" has the same meaning as \" I am Sam.\"  Yet they don't compare equal.\r\n\r\nDoing suprising stuff with unicode is a big source of bugs and security flaws.  An example:  Application logic has been added that says that a certain set of usernames should have their contact information invisible.  The code checks that the requested username doesn't match any in that set, then performs the request.  RethinkDB unicode-normalizes the query and returns the user's private data.\r\n\r\nUnless the query explicitly asks for a custom Unicode experience, rethinkdb should be treating strings like a dumb sequence of Unicode codepoints, in a way that doesn't surprise people."
  , issueCommentId = 63527028
  }