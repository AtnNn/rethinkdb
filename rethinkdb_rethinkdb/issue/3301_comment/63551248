IssueComment
  { issueCommentUpdatedAt = 2014 (-11) (-18) 21 : 46 : 47 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/63551248"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3301#issuecomment-63551248"
  , issueCommentCreatedAt = 2014 (-11) (-18) 21 : 46 : 47 UTC
  , issueCommentBody =
      "@mlucy\r\n> * If the user compares two strings, compare them as if they had been normalized. @AtnNn tells me that there's a fast algorithm in ICU to compare two non-normalized strings that always produces the same ordering as normalizing and then comparing those strings.\r\n* If the user uses a string as an on-disk key, normalize the string before calling our key serialization function on it. This might cause confusion if the user has two canonical-equivalent strings that their app thinks are different and they try to use them both as keys, but it seems better than the alternative.\r\n\r\nNote that this would still have the same security issues as if we normalized everything."
  , issueCommentId = 63551248
  }