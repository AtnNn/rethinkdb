IssueComment
  { issueCommentUpdatedAt = 2015 (-05) (-15) 19 : 21 : 32 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/102499652"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/4236#issuecomment-102499652"
  , issueCommentCreatedAt = 2015 (-05) (-15) 19 : 21 : 32 UTC
  , issueCommentBody =
      "I think the difference is that if we use two arguments, you can avoid using a function in many cases.\r\nFor example if you want to replace every occurrence of `\"a\"` by `\"b\"` in an array, you could just write\r\n`r.expr([\"a\", \"b\", \"c\", \"d\"]).changeAt(\"a\", \"b\")` -> `[\"b\", \"b\", \"c\", \"d\"]`.\r\n\r\nThe single function case is already covered by `map` actually.\r\n\r\n:+1: for passing the index to the function as well.\r\n\r\nUnfortunately now that I'm thinking more about this, it turns out that that the function-less syntax is ambiguous if the thing you want to replace is a number. In that case we cannot distinguish `changeAt(2, 3)` meaning replace every occurrence of the number 2 by 3, from `changeAt(2, 3)` meaning replace the element at index 2 by 3.\r\n\r\nThis makes it look like a much worse idea to me. We could introduce a new term for this operation.\r\nHowever https://github.com/rethinkdb/rethinkdb/issues/2692 at this point seems far superior."
  , issueCommentId = 102499652
  }