IssueComment
  { issueCommentUpdatedAt = 2013 (-04) (-04) 22 : 24 : 22 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 646357
        , simpleUserLogin = N "wmrowan"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/646357?v=3"
        , simpleUserUrl = "https://api.github.com/users/wmrowan"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/15927986"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/609#issuecomment-15927986"
  , issueCommentCreatedAt = 2013 (-04) (-04) 22 : 24 : 22 UTC
  , issueCommentBody =
      "Yes, the code in that branch does fix that issue. There is some conflict though over whether it solves the problem appropriately. My solution was to raise an error when we find an incorrect token value. You don't think this is adequate and want to throw away the errant response and continue waiting for the correct token. I don't think this solution will work though because combining these two behaviors can result in deadlock. It is much better for the user to get an error indicating the problem so that they can rewrite their script to avoid it. The only way I can think of for a user to get out of order tokens is for them to run two queries simultaneously on the same connection from two different threads. The connection object is not designed for such usage and the user should get a clear error indicating the problem, not deadlock."
  , issueCommentId = 15927986
  }