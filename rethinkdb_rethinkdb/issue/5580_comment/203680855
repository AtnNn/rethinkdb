IssueComment
  { issueCommentUpdatedAt = 2016 (-03) (-30) 23 : 27 : 33 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/203680855"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/5580#issuecomment-203680855"
  , issueCommentCreatedAt = 2016 (-03) (-30) 23 : 27 : 33 UTC
  , issueCommentBody =
      "Hmm so it's like a `return`, except that it causes `map` to also skip this element?\r\n\r\nMaybe we should just implement `return`, and one can use `concatMap` if some inputs don't generate any outputs. That might be a bit clearer in terms of semantics.\r\n\r\nIn that case you would write:\r\n```js\r\nr([1,2,3,4,5,6]).concatMap(value => {\r\n    return r.branch(value.gt(3), r.return([]), [value]);\r\n})\r\n```"
  , issueCommentId = 203680855
  }