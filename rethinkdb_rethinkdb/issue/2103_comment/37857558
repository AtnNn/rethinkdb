IssueComment
  { issueCommentUpdatedAt = 2014 (-03) (-17) 19 : 12 : 47 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 605591
        , simpleUserLogin = N "josephglanville"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/605591?v=3"
        , simpleUserUrl = "https://api.github.com/users/josephglanville"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/37857558"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/pull/2103#issuecomment-37857558"
  , issueCommentCreatedAt = 2014 (-03) (-17) 19 : 12 : 11 UTC
  , issueCommentBody =
      "@coffeemug signed.\r\n\r\nAgreed about standardisation.\r\nWhat I feel is the real requirements here is a differentiation between ReQL query errors (aka user errors) and retry-able system errors due to lack of connectivity or system failures.\r\n\r\nWhich is why I think lack of write availability needs a separate exception object as it's likely going to be treated differently than a connectivity failure.\r\n\r\nFor instance connecting to another instance in the cluster is not going to help you if your table is unwritable because there are no primary shards right now. It will however be useful if the problem was that you couldn't connect to that specific instance.\r\n\r\nRelated but tangential I think connection pooling support with automatic failover should probably be integrated into the canonical driver. I have my own hacky implementation for now but I would be interested in contributing a better written one at least for Ruby/Python if it's something that would be accepted."
  , issueCommentId = 37857558
  }