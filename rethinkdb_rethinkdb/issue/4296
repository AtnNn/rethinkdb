Issue
  { issueClosedAt = Just 2015 (-06) (-30) 00 : 01 : 36 UTC
  , issueUpdatedAt = 2015 (-06) (-30) 00 : 01 : 36 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4296/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/4296"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "e10c02"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/pr:high"
          , labelName = "pr:high"
          }
      , IssueLabel
          { labelColor = "fbda04"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/st:review"
          , labelName = "st:review"
          }
      , IssueLabel
          { labelColor = "007575"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:API_settled"
          , labelName = "tp:API_settled"
          }
      , IssueLabel
          { labelColor = "0052cc"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:ReQL_proposal"
          , labelName = "tp:ReQL_proposal"
          }
      ]
  , issueNumber = 4296
  , issueAssignee =
      Just
        SimpleUser
          { simpleUserId = Id 1777134
          , simpleUserLogin = N "mlucy"
          , simpleUserAvatarUrl =
              "https://avatars.githubusercontent.com/u/1777134?v=3"
          , simpleUserUrl = "https://api.github.com/users/mlucy"
          , simpleUserType = OwnerUser
          }
  , issueUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueTitle =
      "Clearly distinguish failed writes from indeterminate writes."
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4296"
  , issueCreatedAt = 2015 (-05) (-28) 02 : 40 : 06 UTC
  , issueBody =
      Just
        "This is the current state of error reporting for writes in RethinkDB:\r\n* If an error occurs that prevents the write from succeeding on a specific document, we set the `errors` field of the result document and continue executing other writes.\r\n* If an error occurs that prevents the write from succeeding at all (e.g. we can't contact the primary or we get a type error before the write even executes), we throw a ReQL error.\r\n* If an error occurs that prevents us from knowing whether or not the write succeeded, or if the write succeeded on the master but wasn't acked by a majority of replicas, we throw a ReQL error and somewhere in the text of the error we describe the problem.\r\n\r\nIt's possible by regex matching on error messages to determine from the output of a ReQL query whether or not a write is known to have failed, but it's tricky and easy to miss a case.  This is making integrating with the jepsen tests hard, and is probably inconvenient for users as well.\r\n\r\nI think we should find a way to make clear in the return value whether or not the write is known to have failed or is in an indeterminate state.  Here are a few options:\r\n\r\n#### 1. We use the object/error distinction.\r\n\r\nBasically the rule would be \"If you get back a result object with `errors: n` where `n != 0`, one or more of your writes is known to have failed.  If you get back a ReQL error, your write is in an indeterminate state.\"\r\n\r\n#### 2. We introduce more error types.\r\n\r\nWe currently just have compilation, runtime, and driver errors.  We've been meaning to introduce more error types for a while.  We could have `WriteFailedError` and `WriteIndeterminateError` which subclass from `WriteError`.\r\n\r\n#### 3. We add meta information on the error to the response notes.\r\n\r\nWe'd have a note `WriteFailed` or `WriteIndeterminate`.  This has the advantage of not breaking existing drivers, but it also makes it easy for driver writers to blithely ignore the existence of this distinction and thus not expose it to users.\r\n\r\n---\r\n\r\n@coffeemug, @danielmewes, @timmaxw -- thoughts?"
  , issueState = "closed"
  , issueId = Id 81724804
  , issueComments = 3
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 316661
                , simpleUserLogin = N "timmaxw"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/316661?v=3"
                , simpleUserUrl = "https://api.github.com/users/timmaxw"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 0
          , milestoneNumber = 95
          , milestoneClosedIssues = 217
          , milestoneDescription =
              Just "To-do list before shipping auto-failover"
          , milestoneTitle = "2.1"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/95"
          , milestoneCreatedAt = 2015 (-03) (-04) 21 : 09 : 42 UTC
          , milestoneState = "closed"
          }
  }