Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2015 (-11) (-19) 12 : 22 : 53 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/375/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/375"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "02d7e1"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/cp:reql"
          , labelName = "cp:reql"
          }
      , IssueLabel
          { labelColor = "0052cc"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:ReQL_proposal"
          , labelName = "tp:ReQL_proposal"
          }
      ]
  , issueNumber = 375
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 43867
        , simpleUserLogin = N "jdoliner"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/43867?v=3"
        , simpleUserUrl = "https://api.github.com/users/jdoliner"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Add default dicts."
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/375"
  , issueCreatedAt = 2013 (-02) (-25) 20 : 56 : 45 UTC
  , issueBody =
      Just
        "Along with dealing with missing attributes when the arise it would be very useful to specify ahead of time what the default value of a dictionary is. This is particularly useful in examples where there is a sensible default value for all the entries in it. For example suppose you had a schema where users made posts and these posts could have various tags on them. You want to store on each user the number of posts made with each tag on them. There could be a huge (and always growing) number of tags with each users posts only representing a small subset of them. Having a default dict lets your syntax look like this:\r\n\r\n    users.insert({\"name\" : \"foo\", \"tag_counts\": default_dict(0)})\r\n\r\nAnd now you never need to worry about writing default again. When you want to get the users with fewer than 10 posts with a certain tag you just do:\r\n\r\n    users.filter(lambda x: x[\"tag_counts\"][tag] < 10)\r\n\r\n\r\nIn speaking with @mlucy about this he had some worries about how this would be represented in languages that don't have a default dict type built in (Python and Ruby do, JS I believe doesn't). He was pretty happy with the solution of adding in a special purpose field on dicts: \"__default__\" is used as the default for the dictionary. If I recall correctly he seemed to really like this and I'm pretty okay with it myself."
  , issueState = "open"
  , issueId = Id 11380213
  , issueComments = 9
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 883
          , milestoneNumber = 2
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone are not an immediate priority, and will be periodically revisited. When we decide to work on an issue in backlog, we'll move it to next."
          , milestoneTitle = "backlog"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/2"
          , milestoneCreatedAt = 2012 (-11) (-11) 14 : 16 : 11 UTC
          , milestoneState = "open"
          }
  }