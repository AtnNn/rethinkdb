IssueComment
  { issueCommentUpdatedAt = 2014 (-11) (-24) 20 : 36 : 35 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 316661
        , simpleUserLogin = N "timmaxw"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/316661?v=3"
        , simpleUserUrl = "https://api.github.com/users/timmaxw"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/64259629"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3365#issuecomment-64259629"
  , issueCommentCreatedAt = 2014 (-11) (-24) 20 : 35 : 24 UTC
  , issueCommentBody =
      "Yes, but I'm not sure if the stronger guarantees that `table_wait()` provides are actually useful. If I recall correctly, the main argument for providing the stronger guarantees was that `table_wait(\"a\", \"b\")` looked like it should provide strong guarantees, and we were afraid users would be confused if we only provided weak guarantees. But I can't think of a good use case for the stronger guarantees.\r\n\r\nHowever, given that we provide `r.db(...).reconfigure()`, I guess it's pretty likely that people will want `r.db(...).wait()`.\r\n\r\nEdit: But I don't think we need the `r.db(...).wait('a', 'b')` form. It's inconsistent with `reconfigure()`. Also, it's easy for the user to just run `wait()` on the two tables sequentially, so it feels redundant to me."
  , issueCommentId = 64259629
  }