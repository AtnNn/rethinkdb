IssueComment
  { issueCommentUpdatedAt = 2015 (-04) (-21) 23 : 57 : 20 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/94976287"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3719#issuecomment-94976287"
  , issueCommentCreatedAt = 2015 (-04) (-21) 23 : 49 : 13 UTC
  , issueCommentBody =
      "I'm sorry to bring this up now, as this issue seems to be settled, but since we're going through another reql proposal period, I'd like share an opinion on this API. I think everything decided here is great, but option 2 might be a bad choice.\r\n\r\nFirstly, as @danielmewes pointed out you can't get a diff. Since you can't get a diff, returning `old_vals` seems kind of pointless -- there isn't really anything the user can do with that data. Additionally, the API is a little confusing because it appears the actual values are arrays. We're sort of shoehorning the new functionality into an old API in a way that IMO (a) isn't very useful, and (b) confusing/inelegant.\r\n\r\nI'd like to propose a different option.\r\n\r\nReturn `[{old_val: ..., new_val: ...}, {old_val: ..., new_val: ...}, ...]`. Unchanged values will have only `old_val`, but no `new_val` (as is, the `new_val` field would be missing). I think this API is *slightly* harder to use, but is more general, more useful, and is still pretty easy to explain.\r\n\r\nWe could also consider other options, I just think option 2 is a little bit sloppy.\r\n\r\n"
  , issueCommentId = 94976287
  }