IssueComment
  { issueCommentUpdatedAt = 2015 (-02) (-07) 02 : 07 : 13 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 877936
        , simpleUserLogin = N "marshall007"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/877936?v=3"
        , simpleUserUrl = "https://api.github.com/users/marshall007"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/73344867"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3719#issuecomment-73344867"
  , issueCommentCreatedAt = 2015 (-02) (-07) 02 : 07 : 13 UTC
  , issueCommentBody =
      "> I imagined the idea was that you could just overwrite the whole data with a set of new values, which you would find in `new_val` when `include_all` is set.\r\n\r\nFor the use case I originally described that is correct. However, if your code cares about comparing the new/old values (for sanity checks, audit logging, etc) its nice to be able to write a generic function that takes `{ new_val, old_val }` and can be used in both cases.\r\n\r\nIf all I want to do is blow away my old set I can just do `r.table(...).changes({ include_all: true })('new_val')` so what I proposed still supports both use cases.\r\n\r\nAlso for the `.getAll(...)` case you'd end up with sparsely populated arrays when rows are deleted/added which seems annoying."
  , issueCommentId = 73344867
  }