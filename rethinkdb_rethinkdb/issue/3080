Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2014 (-09) (-30) 23 : 00 : 31 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/3080/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/3080"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "444444"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:performance"
          , labelName = "tp:performance"
          }
      ]
  , issueNumber = 3080
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 3847
        , simpleUserLogin = N "evmar"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/3847?v=3"
        , simpleUserUrl = "https://api.github.com/users/evmar"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Database fragmentation on btrfs"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/3080"
  , issueCreatedAt = 2014 (-09) (-21) 22 : 29 : 09 UTC
  , issueBody =
      Just
        "In a test program, I found that `rethinkdb_data` on a btrfs partition lead to a rather fragmented file.\r\n\r\nI'm not sure whether this actually has an effect on performance.  For a not-very-scientific test program that just attempts to write a bunch of small records I think I got roughly the same performance with and without the +C flag (implemented by recreating the `rethinkdb_data` directory on each run, either with or without the flag set on it) though I had imagined two layers of btrees should have an impact.  After ~5k writes the table has ~1400 extents according to `filefrag`, which seems a bit suspicious; the same test (again, not scientific: I just hit ctl-c after it wrote for a few seconds) on ext4 has 11 extents.\r\n\r\nNote: the manpage for `chattr` suggests that for btrfs turning off CoW via `chattr +C` requires that you do it on the directory before any files are made in it, or on files before any data is added.  I think you can check whether the +C on the directory actually affected the files via `lsattr rethinkdb_data`, and it's not exactly clear what adding +C on an existing file does:\r\n\r\n> Note: For btrfs, the 'C' flag should be set on new or empty files.  If it is set on a file which already has data blocks,  it is undefined when the blocks assigned to the file will be fully stable. If the 'C' flag is set on a directory, it will have no  effect  on  the directory,  but  new  files  created  in that directory will the No_COW attribute.\r\n\r\nHowever, I don't think this flag affected the fragmentation of the rethinkdb data."
  , issueState = "open"
  , issueId = Id 43347672
  , issueComments = 2
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 882
          , milestoneNumber = 2
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone are not an immediate priority, and will be periodically revisited. When we decide to work on an issue in backlog, we'll move it to next."
          , milestoneTitle = "backlog"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/2"
          , milestoneCreatedAt = 2012 (-11) (-11) 14 : 16 : 11 UTC
          , milestoneState = "open"
          }
  }