Issue
  { issueClosedAt = Just 2014 (-09) (-26) 03 : 23 : 58 UTC
  , issueUpdatedAt = 2014 (-09) (-30) 18 : 51 : 37 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/3089/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/3089"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "ededed"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:hygiene"
          , labelName = "tp:hygiene"
          }
      , IssueLabel
          { labelColor = "444444"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:performance"
          , labelName = "tp:performance"
          }
      ]
  , issueNumber = 3089
  , issueAssignee =
      Just
        SimpleUser
          { simpleUserId = Id 258437
          , simpleUserLogin = N "srh"
          , simpleUserAvatarUrl =
              "https://avatars.githubusercontent.com/u/258437?v=3"
          , simpleUserUrl = "https://api.github.com/users/srh"
          , simpleUserType = OwnerUser
          }
  , issueUser =
      SimpleUser
        { simpleUserId = Id 258437
        , simpleUserLogin = N "srh"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/258437?v=3"
        , simpleUserUrl = "https://api.github.com/users/srh"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Replace counted_t<val_t> with scoped_ptr_t<val_t>."
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/3089"
  , issueCreatedAt = 2014 (-09) (-23) 18 : 04 : 43 UTC
  , issueBody =
      Just
        "This has already been implemented, in the branch sam_scoped_val.  There were no roadblocks to converting it.\n\nWe would want to do this because val's are essentially destructive by nature.  Calling as_selection on them is something you can only do once.  Eventually we would want to make the type movable and drop the scoped_ptr_t (thus doing less allocation).  It's also inherently bad to see `counted_t<T>` anywhere if `T` is a non-const type.  The code is now safer-looking in some places, because we now see `->as_selection` being called on a `scoped_ptr_t<val_t>` and we can see that the val_t object in question will be destroyed afterwards.\n\nThe reason it was easy is that val_t is used to carry the return value of term_t::eval, and isn't really used for anything else.  It is datum_t's that seem to need a shared, reference-counted structure -- val_t's don't have any of that.  The only place I saw actual sharing of a val_t was because `datum_term_t` held a `counted_t<val_t>` and returned a copy, instead of holding a `datum_t` and constructing a new `counted_t<val_t>` each time.\n\nThe reason this is an issue and not a fait accompli code review is because maybe there is a reason we shouldn't do this.\n"
  , issueState = "closed"
  , issueId = Id 43662726
  , issueComments = 3
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Just 2015 (-01) (-23) 08 : 00 : 00 UTC
          , milestoneOpenIssues = 0
          , milestoneNumber = 81
          , milestoneClosedIssues = 321
          , milestoneDescription = Just ""
          , milestoneTitle = "1.16"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/81"
          , milestoneCreatedAt = 2014 (-09) (-04) 04 : 49 : 30 UTC
          , milestoneState = "closed"
          }
  }