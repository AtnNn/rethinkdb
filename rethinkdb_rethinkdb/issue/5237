Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2016 (-04) (-29) 22 : 59 : 38 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5237/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/5237"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "0052cc"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:ReQL_proposal"
          , labelName = "tp:ReQL_proposal"
          }
      ]
  , issueNumber = 5237
  , issueAssignee =
      Just
        SimpleUser
          { simpleUserId = Id 1777134
          , simpleUserLogin = N "mlucy"
          , simpleUserAvatarUrl =
              "https://avatars.githubusercontent.com/u/1777134?v=3"
          , simpleUserUrl = "https://api.github.com/users/mlucy"
          , simpleUserType = OwnerUser
          }
  , issueUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Add a way to recursively search for data"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5237"
  , issueCreatedAt = 2015 (-12) (-26) 08 : 14 : 49 UTC
  , issueBody =
      Just
        "People have asked for this occasionally.  The basic task is something like this:\n- You have data of the following form: `{id: 'Alice', parents: ['Bob', 'Carol'], children: ['Dave']}`.\n- You want to write a query like \"Is PERSON X related to PERSON Y\".\n\nI'd like to propose that we introduce a BFS query.  You'd write something like this:\n\n``` rb\nr.table('test').get('PERSON_X').bfs {|person|\n  r.table('test').getAll(person['parents'] + person['children'])\n}.contains {|person|\n  person['name'].eq('PERSON_Y')\n}\n```\n\n(We could probably pick a less computer-sciency name.)\n\nThe basic semantics are that `bfs` takes a function with the signature `X -> ARRAY[X]` and, well, does breadth-first search using it.  (We'd probably define it so that calling it on an sequence does BFS with the the elements of the sequence as the first set of root nodes, so that `.getAll.bfs` does what you expect.  This might make it slightly confusing if you ever write `ARRAY.bfs`, but I think that should be fine.)\n\nWe need a way to make sure the recursion doesn't go on forever.  Since we need to avoid cycles anyway, I think it would be OK to use memory proportional to the number of elements searched and use the array size limit to prevent infinite loops.\n"
  , issueState = "open"
  , issueId = Id 123916279
  , issueComments = 0
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 882
          , milestoneNumber = 2
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone are not an immediate priority, and will be periodically revisited. When we decide to work on an issue in backlog, we'll move it to next."
          , milestoneTitle = "backlog"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/2"
          , milestoneCreatedAt = 2012 (-11) (-11) 14 : 16 : 11 UTC
          , milestoneState = "open"
          }
  }