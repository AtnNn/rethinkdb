IssueComment
  { issueCommentUpdatedAt = 2015 (-04) (-28) 01 : 39 : 43 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1366
        , simpleUserLogin = N "deontologician"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1366?v=3"
        , simpleUserUrl = "https://api.github.com/users/deontologician"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/96871625"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/4100#issuecomment-96871625"
  , issueCommentCreatedAt = 2015 (-04) (-28) 01 : 39 : 12 UTC
  , issueCommentBody =
      "So it seems the culprit is indeed the graph library. That leaves us with a few options (that I can think of):\r\n\r\n1. Put in the time to fix the graph library. This probably won't be trivial since it's not JS heap that's out of control. The JS heap usage stayed relatively constant while the task memory kept increasing by leaps and bounds.\r\n2. Replace the graph library with something else (i.e. #3720 ). This has it's own risks: it may not solve the problem, it may also introduce new problems. This is likely too much for a point release and would have to be put out in 2.1 or 2.2 depending on scheduling. We could potentially shave some time off this if we didn't tweak the visual style of the graph too much and stuck with default styling, even if it didn't fit in with the rest of the style of the webui.\r\n3. Set the update resolution on the graph to something much lower. It seems the speed of memory increase is linked to how fast the graph is scrolling. This is a quick bandaid which doesn't really solve the problem, but it would be quick to implement and could reasonably go out in a point release, with us solving the problem properly later.\r\n\r\n@danielmewes @mglukhovsky thoughts?\r\n"
  , issueCommentId = 96871625
  }