IssueComment
  { issueCommentUpdatedAt = 2015 (-06) (-30) 03 : 48 : 12 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/116935625"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/4473#issuecomment-116935625"
  , issueCommentCreatedAt = 2015 (-06) (-30) 03 : 48 : 12 UTC
  , issueCommentBody =
      "Thanks for the bug report!\r\n\r\n> So the programming error was all mine, but I wouldn't expect an invalid query to crash the database?\r\n\r\nIt looks like the problem here is that when setting the `db` optarg we try to evaluate `r.table(...)`, which itself involves looking up the `db` optarg, and we blow the stack in the resulting recursion.  I was under the impression that we didn't allow global optargs to reference themselves like that, so I'm not quite sure why the query doesn't get discarded earlier; I'm looking into that now.\r\n\r\n(There's also the separate problem of why we aren't detecting the runaway recursion and aborting the query.  https://github.com/rethinkdb/rethinkdb/issues/2639 should have fixed that, so I'll look into that too.)"
  , issueCommentId = 116935625
  }