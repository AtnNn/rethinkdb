IssueComment
  { issueCommentUpdatedAt = 2016 (-07) (-17) 23 : 12 : 37 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 690517
        , simpleUserLogin = N "mike-marcacci"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/690517?v=3"
        , simpleUserUrl = "https://api.github.com/users/mike-marcacci"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/233209588"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1032#issuecomment-233209588"
  , issueCommentCreatedAt = 2016 (-07) (-17) 23 : 07 : 12 UTC
  , issueCommentBody =
      "I'd like to add to this proposal. As far as I currently understand, the plan is to:\r\n\r\n- start indexing `null` values\r\n- ignore rows that return an \"undefined\" type using `r.absent()` or the existing `r.literal()`\r\n\r\nI'd like to also reconsider the behavior of an `r.error()` (or an implicit error, like operating on the wrong type or not specifying a default) when returned by an index function. I'd propose that a write operation fail if *any* index returns an error. Likewise, I would propose that creating an index should fail if *any* documents return such an error.\r\n\r\nThis would ensure our indices are expecting the correct document structures, and aren't silently missing documents that we would expect to have indexed. This would also have the effect of validating every document in the table.\r\n\r\nTo ensure backwards-compatibility and ease the process of schema migrations, `indexCreate` could receive a boolean option of `strict` to enable this behavior.\r\n\r\nPiggy-backing on the same logic, rethinkdb could introduce the concept of \"validators\" which would function similarly to \"strict\" indices, but wouldn't actually create the b-trees. This could essentially accomplish #5494, #5879, and #4210, as any json-schema or Joi schema could be compiled into a rql expression and stored as a \"validator\" expression in the database.\r\n\r\n---\r\n\r\nEDIT: after reading my comment, I realized it should probably be its own issue to avoid hijacking this one. I just posted it as #5967."
  , issueCommentId = 233209588
  }