IssueComment
  { issueCommentUpdatedAt = 2014 (-01) (-09) 23 : 15 : 26 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 297060
        , simpleUserLogin = N "nviennot"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/297060?v=3"
        , simpleUserUrl = "https://api.github.com/users/nviennot"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/31987668"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1032#issuecomment-31987668"
  , issueCommentCreatedAt = 2014 (-01) (-09) 23 : 15 : 26 UTC
  , issueCommentBody =
      "I don't like the `r.error` thingy so much.\r\n\r\nIdeally, (or intuitively), `get_all(something, :index => field)` and `filter { |doc| doc['field'].eq(something) }` should return the same thing.\r\n\r\nWhat would mean `filter { |doc| doc['field'].eq(r.error) }` ? It's weird. I much prefer `r.undefined`, there is no question of what that means. Now if you want to alias `r.undefined` to `r.error` internally, I wouldn't mind.\r\n\r\nIt's really weird to me to say that an index had an error because a field is undefined. In production, when you want to start using a new field on an existing table, and you need to have fast queries, you have to create the index first. It's weird to me that something that is part of normal operations will be considered as an \"error\" by the database. The semantic of the word error is scary to me.\r\n\r\nI understand that the error value is important when using arbitrarily user defined functions that may do random things, but I don't want to have a user being scared because he sees a bunch of \"error\" keywords all around the place in his queries when he tries to debug his app. So I'd be happy with some sort of smart alias `r.undefined` to `r.error`."
  , issueCommentId = 31987668
  }