IssueComment
  { issueCommentUpdatedAt = 2013 (-06) (-18) 06 : 07 : 57 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/19592674"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1032#issuecomment-19592674"
  , issueCommentCreatedAt = 2013 (-06) (-18) 06 : 07 : 32 UTC
  , issueCommentBody =
      "> So, another option worth thinking about would be to make `get_all(null)` return all the rows that were excluded from the index.\r\n\r\nHow would we implement that?\r\n\r\n> Are we going to have `r.table(\"foo\").update( { field: null} )` equivalent to `r.table(\"foo\").replace( r.row.without(\"field\") )`? [...] \r\n\r\nNo -- we agreed to treat that differently, but when getting documents we'll try to treat these as equivalent whenever possible. We're trying to do what's useful at any given time and use the idea of nulls being equivalent to non-existence as an overarching principle whenever possible.\r\n\r\n> I feel like we are going to add more and more inconsistencies in RQL by having null meaning absence of value... which means making RQL just more and more complicated.\r\n\r\nTreatment of non-existence *is* complicated. Look at SQL -- it's an established standard designed by very smart people, and the treatment of non-existence there is a mess. ReQL is way simpler in comparison, but there will be messy parts. It's a messy problem, and as much as I'd like to find a simple and elegant solution, we've searched and searched and there doesn't seem to be one."
  , issueCommentId = 19592674
  }