IssueComment
  { issueCommentUpdatedAt = 2013 (-06) (-19) 08 : 02 : 48 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/19668425"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1032#issuecomment-19668425"
  , issueCommentCreatedAt = 2013 (-06) (-19) 08 : 02 : 48 UTC
  , issueCommentBody =
      "Here's a very rough set of rules that seem to adequately express my intuition (probably inconsistent and incomplete):\r\n\r\n1. When storing things, treat nulls and missing attrs differently.\r\n2. When selecting for existence (e.g. `age == 20`, `age != 20`), treat nulls and missing attrs in the same way (as non-existence; e.g. filtering for `age != 20` when age is null should skip the row)\r\n3. When selecting for non-existence (e.g. `age == null`, `getAll(null)`, etc.), treat nulls and missing attrs differently.\r\n4. When filtering out non-existence (e.g. `has_fields('age')`), treat nulls and missing attrs in the same way.\r\n\r\nA system that adheres to these rules would feel extremely intuitive to me -- I *think* it would do exactly what I would expect most of the time, would allow me to do most everything I want, and wouldn't feel forced or icky. This is the kind of DB I'd like to actually use (wrt nulls), I think."
  , issueCommentId = 19668425
  }