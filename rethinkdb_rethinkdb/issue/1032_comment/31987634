IssueComment
  { issueCommentUpdatedAt = 2014 (-01) (-09) 23 : 14 : 55 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/31987634"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1032#issuecomment-31987634"
  , issueCommentCreatedAt = 2014 (-01) (-09) 23 : 14 : 55 UTC
  , issueCommentBody =
      "@mlucy's suggestion sounds reasonable to me.\r\nHaving the special \"error value\" called `r.error` is something that confused me at first.\r\nAfter thinking about it for a moment it now makes sense though. I previously thought of `r.error` as a function that generates an error, similar to `throw` in a language that supports exceptions. However in a functional environment it probably is more appropriate to think of it as an *error value*, kind of similar to NaN in floating point arithmetic. One can then define any function possible in ReQL as being the identity with respect to `r.error` (with the exception of `r.default`), and everything fits together. :-)"
  , issueCommentId = 31987634
  }