IssueComment
  { issueCommentUpdatedAt = 2013 (-06) (-18) 04 : 30 : 27 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/19590314"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1032#issuecomment-19590314"
  , issueCommentCreatedAt = 2013 (-06) (-18) 04 : 29 : 59 UTC
  , issueCommentBody =
      "A good way to think of this is `r.row(\"field\").eq( null )` being equivalent to `r.row.has_fields(\"field\")`. The fact that you say `eq` is an artifact of treatment of nulls which unfortunately we can't do much about (other than undefining `eq(null)`, which worse). We've in general established that we should move towards `null` being equivalent to non-existence, and while we can't do it in every case and we'll always have inconsistencies like these, it's in general better than the alternative.\r\n\r\nYou can still index on nulls the same way you'd index on non-existant values (e.g. `createIndex('foo', r.row.has_fields('foo').not()`) and I think we should keep it this way because the alternative is worse.\r\n\r\nI move that we close this issue and treat null as non-existence whenever possible."
  , issueCommentId = 19590314
  }