IssueComment
  { issueCommentUpdatedAt = 2013 (-05) (-14) 23 : 36 : 51 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/17912146"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/809#issuecomment-17912146"
  , issueCommentCreatedAt = 2013 (-05) (-14) 23 : 35 : 56 UTC
  , issueCommentBody =
      "Ah, I see. This is different because in order to do a geolocation query you have to build a geospacial index. So, to do the query in the example above, I'd have to prebuild a 3-d index on attributes 'a', 'b', and 'c'. I can then do an efficient bounding box in the 3-d space to find the intersection.\r\n\r\nOn the other hand, the query above uses single attribute indexes ad-hoc. You *could* implement it by first building an n-dimensional index and querying that index, but that's very different (performance-wise) from having the user providing a query that uses an arbitrary set of indexes and finding an index intersection ad-hoc. This doesn't involve building an entire new index to satisfy the query (or asking the user to pre-create such an index).\r\n\r\nAlso, as far as I understand, implementing a 2-d geospacial index is a significantly less involved engineering effort than building a generalized n-dimensional geospacial index."
  , issueCommentId = 17912146
  }