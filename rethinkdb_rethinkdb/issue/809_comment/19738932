IssueComment
  { issueCommentUpdatedAt = 2013 (-06) (-20) 09 : 09 : 14 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/19738932"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/809#issuecomment-19738932"
  , issueCommentCreatedAt = 2013 (-06) (-20) 09 : 09 : 14 UTC
  , issueCommentBody =
      "@coffeemug is correct. Every added dimension makes the index a lot less efficient. (I have been working with these things on a daily basis for quite a while)\r\n\r\nImplementing an n-dimensional index rather than a 2-dimensional makes no difference as far as I can see. For a kd-tree, this is extremely easy. For 2 dimensions, I believe one would usually use a quadtree. The latter can also be expanded trivially to arbitrary dimensionalities, even though it might not scale so well with respect to space efficiency.\r\n\r\nIf you want efficient intersection operations, I believe R-trees are the standard technique in databases. Not sure what exactly the tradeoffs are for those.\r\n\r\nAs Sam mentioned, the poor man's spatial index a special encoding on top of a one-dimensional one, such as this one: https://en.wikipedia.org/wiki/Z-order_curve ."
  , issueCommentId = 19738932
  }