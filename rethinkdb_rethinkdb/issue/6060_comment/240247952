IssueComment
  { issueCommentUpdatedAt = 2016 (-08) (-16) 21 : 45 : 18 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 877936
        , simpleUserLogin = N "marshall007"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/877936?v=3"
        , simpleUserUrl = "https://api.github.com/users/marshall007"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/240247952"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/6060#issuecomment-240247952"
  , issueCommentCreatedAt = 2016 (-08) (-16) 21 : 39 : 26 UTC
  , issueCommentBody =
      "> Assuming that the table does not already exist, and that you have not specified `--shards` or `--replicas` on the command line, we already only create a single shard.\r\n\r\n@larkost right, to be clear, my comment on that portion only applies when you're trying to provision a multi-shard environment (using `--shards`). I was simply saying that I've noticed it can be faster to restore onto a db with a single shard first before updating the config with the desired number of shards.\r\n\r\nNot sure how we could determine in advance which method would be faster and your point about not having enough space on disk to support a single shard complicates that further. I think you're right that there's not a whole lot we could do there for now.\r\n\r\nI would appreciate if someone could comment on exactly *why* restoring onto a cluster isn't always faster than a single node, though.\r\n\r\n> So I am going to change that last bit in the near future, but I think that will be the only change we will take from this.\r\n\r\nSounds good! I wasn't sure if it made sense to do post-construction by default. Personally I'd be fine with that, but if you care about immediate availability doing so first would still make sense, right?"
  , issueCommentId = 240247952
  }