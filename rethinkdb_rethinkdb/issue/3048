Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2015 (-03) (-25) 22 : 31 : 41 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/3048/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/3048"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "02e10c"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:enhancement"
          , labelName = "tp:enhancement"
          }
      , IssueLabel
          { labelColor = "0052cc"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:ReQL_proposal"
          , labelName = "tp:ReQL_proposal"
          }
      ]
  , issueNumber = 3048
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 139396
        , simpleUserLogin = N "wojons"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/139396?v=3"
        , simpleUserUrl = "https://api.github.com/users/wojons"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "r.parse / r.sscanf"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/3048"
  , issueCreatedAt = 2014 (-09) (-12) 23 : 23 : 00 UTC
  , issueBody =
      Just
        "Come into a use case where an r.parse or r.scanf would be useful. I like to off load a lot of my work load into rethinkdb. I would like to see a feature where you can parse a raw string into json object. I would see the format something like this.\r\n\r\n```js\r\nr.expr('127.0.0.1 - - [08/Sep/2014:01:39:51 -0700] \"GET /path/to.css HTTP/1.1\" 304 0 \"http://localhost/\" \"Some user agent\"').parse('{0} - {1} - [{2}] \"{3} {4} {5}\" {6} {7} \"{8}\" \"{9}\"', {ip: {0}, 'user': {1}, 'datetime': {2}, 'method': {3}, 'path': {4}, 'proto': {5}, 'code': {6}, 'length': {7}, 'host': {8}, 'user_agent': {9}})\r\n```\r\n\r\nAbove would be a simple way to parse the string above into a json object it can then be inserted or what ever. Now if a user provided a list of access logs they would be able to parse each line with a map and then calling parse returning an array of json objects. I also think that parse should accept an array of parse string and default objects this way if the first parse string does not match what your trying to do it can try the next. \r\n\r\n```js\r\nr.expr('127.0.0.1 - - [08/Sep/2014:01:39:51 -0700] \"GET /path/to.css HTTP/1.1\" 304 0 \"http://localhost/\" \"Some user agent\"').parse('{0%s} - {1} - [{2}] \"{3} {4} {5}\" {6%d} {7%d} \"{8%d}\" \"{9}\"', {ip: {0}, 'user': {1}, 'datetime': {2}, 'method': {3}, 'path': {4}, 'proto': {5}, 'code': {6}, 'length': {7}, 'host': {8}, 'user_agent': {9}})\r\n```\r\n\r\nThis opne is just like the first one but forces that some things are strings and some things are numbers for it to pase this parser. I know its not perfect but this is an idea also i think it would be useful if all of these took lamda so you can query the database to get a list of your parses out of the db or to merge it with a record in the database. \r\n\r\nThe usecase for this is like above parsing log data that you put in the database and now are doing grouped map reduce on raw data so you dont have to bring it into code to parse first. Another use case is when dealing with Intresting data coming out of the r.http you can set up some parsing that is more complex then looking for a regex match."
  , issueState = "open"
  , issueId = Id 42679622
  , issueComments = 3
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 883
          , milestoneNumber = 2
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone are not an immediate priority, and will be periodically revisited. When we decide to work on an issue in backlog, we'll move it to next."
          , milestoneTitle = "backlog"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/2"
          , milestoneCreatedAt = 2012 (-11) (-11) 14 : 16 : 11 UTC
          , milestoneState = "open"
          }
  }