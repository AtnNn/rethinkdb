IssueComment
  { issueCommentUpdatedAt = 2014 (-12) (-05) 03 : 00 : 18 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/65741165"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3393#issuecomment-65741165"
  , issueCommentCreatedAt = 2014 (-12) (-05) 02 : 59 : 51 UTC
  , issueCommentBody =
      "I looked into this more, and section 12.7 of https://isocpp.org/files/papers/N3690.pdf says:\r\n\r\n> For an object with a non-trivial constructor, referring to any non-static member or base class of the object before the constructor begins execution results in undefined behavior. For an object with a non-trivial destructor, referring to any non-static member or base class of the object after the destructor finishes execution results in undefined behavior.\r\n\r\nWhich seems to give us a bit more leeway.  In practice, since the destructor itself needs to be able to manipulate the object freely, I have trouble imagining an optimization that would allow the destructor to behave correctly in all circumstances but prevent a function running in another coroutine from accessing the object safely."
  , issueCommentId = 65741165
  }