IssueComment
  { issueCommentUpdatedAt = 2013 (-05) (-20) 11 : 38 : 26 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 34433
        , simpleUserLogin = N "fuwaneko"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/34433?v=3"
        , simpleUserUrl = "https://api.github.com/users/fuwaneko"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/18143162"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/846#issuecomment-18143162"
  , issueCommentCreatedAt = 2013 (-05) (-20) 11 : 38 : 26 UTC
  , issueCommentBody =
      "> We used to have this functionality, but we took it out because it confused too many users.\r\n\r\nThanks, I get the point, but I have to store connection in some global object anyway as I'm working on web application and it's not very convenient. I.e. I call r.connect and store connection object from callback somewhere. I wouldn't want to open new connection on every HTTP request. Or actually not having a single persistent connection is better? I think I'll do some benchmarks. And I think in our app we don't have any possibilities for global connection object to be overwritten: there is only one connection per process and it's opened on app launch.\r\n\r\n> We're looking forward to porting Mongoose to RethinkDB\r\n\r\nI think it would be better to write JugglingDB backend instead.\r\n\r\n> This is difficult because ReQL is chainable -- you can follow up any query with an addition query\r\n\r\nWell, yes, but I was talking about joining calls like insert().run() or update().run() in one insert/update call. Just a little syntactic sugar :)"
  , issueCommentId = 18143162
  }