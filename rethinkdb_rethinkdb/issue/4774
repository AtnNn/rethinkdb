Issue
  { issueClosedAt = Just 2015 (-08) (-31) 17 : 49 : 10 UTC
  , issueUpdatedAt = 2015 (-09) (-04) 20 : 55 : 26 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4774/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/4774"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "fbda04"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/st:review"
          , labelName = "st:review"
          }
      , IssueLabel
          { labelColor = "e102d8"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:bug"
          , labelName = "tp:bug"
          }
      ]
  , issueNumber = 4774
  , issueAssignee =
      Just
        SimpleUser
          { simpleUserId = Id 1777134
          , simpleUserLogin = N "mlucy"
          , simpleUserAvatarUrl =
              "https://avatars.githubusercontent.com/u/1777134?v=3"
          , simpleUserUrl = "https://api.github.com/users/mlucy"
          , simpleUserType = OwnerUser
          }
  , issueUser =
      SimpleUser
        { simpleUserId = Id 552910
        , simpleUserLogin = N "Tryneus"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/552910?v=3"
        , simpleUserUrl = "https://api.github.com/users/Tryneus"
        , simpleUserType = OwnerUser
        }
  , issueTitle =
      "Crash during table fuzzing: Guarantee failed: [pair.second]"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4774"
  , issueCreatedAt = 2015 (-08) (-28) 01 : 46 : 42 UTC
  , issueBody =
      Just
        "Happened on `next`, but this should be present in `v2.1.x`.  This appears to be during a changefeed construction.  The changefeeds currently used by the fuzzer are:\n\n`r.db(db).table(table).between(r.minval, r.maxval, index=index).changes()`\nand\n`r.db('rethinkdb').table(random.choice(system_tables)).changes()`\n\n``` cpp\n2015-08-27T18:36:48.599090336 266.204515s error: Error in ../src/rdb_protocol/protocol.cc at line 580:\n2015-08-27T18:36:48.612374072 266.217799s error: Guarantee failed: [pair.second]\n2015-08-27T18:36:48.616282413 266.221707s error: Backtrace:\n2015-08-27T18:36:51.159049844 268.764475s error: Thu Aug 27 18:36:48 2015\n\n1: backtrace_t::backtrace_t() at backtrace.cc:203\n2: lazy_backtrace_formatter_t::lazy_backtrace_formatter_t() at basic_string.h:269\n3: format_backtrace(bool) at backtrace.cc:197\n4: report_fatal_error(char const*, int, char const*, ...) at basic_string.h:287\n5: unshard_stamps(std::vector<changefeed_stamp_response_t*, std::allocator<changefeed_stamp_response_t*> > const&, changefeed_stamp_response_t*) at protocol.cc:580\n6: rdb_r_unshard_visitor_t::operator()(changefeed_stamp_t const&) at stl_vector.h:142\n7: read_t::unshard(read_response_t*, unsigned long, read_response_t*, rdb_context_t*, signal_t*) const at protocol.cc:841\n8: void table_query_client_t::dispatch_immediate_op<read_t, fifo_enforcer_sink_t::exit_read_t, read_response_t>(void (primary_query_client_t::*)(fifo_enforcer_sink_t::exit_read_t*), void (primary_query_client_t::*)(read_t const&, read_response_t*, order_token_t, fifo_enforcer_sink_t::exit_read_t*, signal_t*), read_t const&, read_response_t*, order_token_t, signal_t*) at optional.hpp:438\n9: table_query_client_t::read(read_t const&, read_response_t*, order_token_t, signal_t*) at table_query_client.cc:103\n10: ql::changefeed::range_sub_t::to_stream(ql::env_t*, std::string, namespace_interface_t*, mailbox_addr_t<void (ql::changefeed::stamped_msg_t)> const&, counted_t<ql::datum_stream_t>, scoped_ptr_t<ql::changefeed::subscription_t>&&, ql::backtrace_id_t) at variant.hpp:1811\n11: ql::changefeed::client_t::new_stream(ql::env_t*, counted_t<ql::datum_stream_t>, ql::configured_limits_t, ql::datum_t const&, bool, uuid_u const&, ql::backtrace_id_t, std::string const&, boost::variant<ql::changefeed::keyspec_t::range_t, ql::changefeed::keyspec_t::limit_t, ql::changefeed::keyspec_t::point_t, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_> const&) at counted.hpp:60\n12: real_table_t::read_changes(ql::env_t*, counted_t<ql::datum_stream_t>, ql::configured_limits_t, ql::datum_t const&, bool, boost::variant<ql::changefeed::keyspec_t::range_t, ql::changefeed::keyspec_t::limit_t, ql::changefeed::keyspec_t::point_t, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_>&&, ql::backtrace_id_t, std::string const&) at counted.hpp:60\n13: ql::changes_term_t::eval_impl(ql::scope_env_t*, ql::args_t*, ql::eval_flags_t) const at vector.tcc:95\n14: ql::op_term_t::term_eval(ql::scope_env_t*, ql::eval_flags_t) const at scoped.hpp:70\n15: ql::runtime_term_t::eval(ql::scope_env_t*, ql::eval_flags_t) const at term.cc:350\n16: ql::query_cache_t::ref_t::run(ql::env_t*, Response*) at scoped.hpp:103\n17: ql::query_cache_t::ref_t::fill_response(Response*) at query_cache.cc:248\n18: ql::run(ql::query_id_t&&, ql::protob_t<Query>, Response*, ql::query_cache_t*, signal_t*) at scoped.hpp:70\n19: rdb_query_server_t::run_query(ql::query_id_t&&, ql::protob_t<Query> const&, Response*, ql::query_cache_t*, signal_t*) at counted.hpp:60\n20: void query_server_t::connection_loop<json_protocol_t>(linux_tcp_conn_t*, unsigned long, ql::query_cache_t*, signal_t*)::query_server_t::connection_loop<json_protocol_t>::{lambda(std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > >, signal_t*)#1}::operator()(std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > >, signal_t*) const::{lambda()#1}::operator()() const at protob.cc:616\n21: void save_exception<void query_server_t::connection_loop<json_protocol_t>(linux_tcp_conn_t*, unsigned long, ql::query_cache_t*, signal_t*)::query_server_t::connection_loop<json_protocol_t>::{lambda(std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > >, signal_t*)#1}::operator()(std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > >, signal_t*) const::{lambda()#1}>(std::__exception_ptr::exception_ptr*, std::string*, cond_t*, void query_server_t::connection_loop<json_protocol_t>(linux_tcp_conn_t*, unsigned long, ql::query_cache_t*, signal_t*)::query_server_t::connection_loop<json_protocol_t>::{lambda(std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > >, signal_t*)#1}::operator()(std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > >, signal_t*) const::{lambda()#1}&&) at protob.cc:564\n22: void query_server_t::connection_loop<json_protocol_t>(linux_tcp_conn_t*, unsigned long, ql::query_cache_t*, signal_t*)::query_server_t::connection_loop<json_protocol_t>::{lambda(std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > >, signal_t*)#1}::operator()(std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > >, signal_t*) const at protob.cc:625\n23: coro_pool_t<std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > > >::worker_run(std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > >, auto_drainer_t::lock_t) at coro_pool.hpp:69\n24: void std::_Bind<std::_Mem_fn<void (coro_pool_t<std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > > >::*)(std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > >, auto_drainer_t::lock_t)> (coro_pool_t<std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > > >*, std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > >, auto_drainer_t::lock_t)>::__call<void, , 0, 1, 2>(std::tuple<>&&, std::_Index_tuple<0, 1, 2>) at functional:550\n25: callable_action_instance_t<std::_Bind<std::_Mem_fn<void (coro_pool_t<std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > > >::*)(std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > >, auto_drainer_t::lock_t)> (coro_pool_t<std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > > >*, std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > >, auto_drainer_t::lock_t)> >::run_action() at callable_action.hpp:31\n26: coro_t::run() at coroutines.cc:214\n```\n"
  , issueState = "closed"
  , issueId = Id 103628948
  , issueComments = 2
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 505365
                , simpleUserLogin = N "danielmewes"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/505365?v=3"
                , simpleUserUrl = "https://api.github.com/users/danielmewes"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Just 2015 (-09) (-04) 07 : 00 : 00 UTC
          , milestoneOpenIssues = 0
          , milestoneNumber = 107
          , milestoneClosedIssues = 17
          , milestoneDescription = Just ""
          , milestoneTitle = "2.1.3"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/107"
          , milestoneCreatedAt = 2015 (-09) (-04) 20 : 55 : 16 UTC
          , milestoneState = "closed"
          }
  }