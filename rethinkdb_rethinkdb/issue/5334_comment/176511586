IssueComment
  { issueCommentUpdatedAt = 2016 (-01) (-29) 21 : 40 : 12 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1366
        , simpleUserLogin = N "deontologician"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1366?v=3"
        , simpleUserUrl = "https://api.github.com/users/deontologician"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/176511586"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/5334#issuecomment-176511586"
  , issueCommentCreatedAt = 2016 (-01) (-29) 01 : 29 : 19 UTC
  , issueCommentBody =
      "I think the value is that it makes explicit what to do with the change. The current change object on orderBy.limit changefeeds is unintuitive to use correctly, and I think the fact that we have to emulate the server's sorting is an annoying burden on end users. So I don't think this is a big problem for that *certain other project*, since we know the limitations and the correct strategy, but it's pretty imperative for anyone else using the database.\r\n\r\nIt's one of those things where you don't realize what a colossal pain in the ass we're thrusting on users until you try to do it yourself. Also, the efficiency argument doesn't seem too big of a deal. The nature of these queries is that the result set is small. To put it in perspective, immediately after resizing and moving the array like this, most frontend frameworks are going to immediately regenerate their entire page's markup, and then run a diff algorithm on it vs. the old version of the page to decide what to change in the DOM. The ease of use of this strategy trumps any minor efficiency gains that might be had by avoiding shifting elements in the original array."
  , issueCommentId = 176511586
  }