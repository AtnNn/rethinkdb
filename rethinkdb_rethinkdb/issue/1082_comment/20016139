IssueComment
  { issueCommentUpdatedAt = 2013 (-06) (-25) 23 : 29 : 55 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 646357
        , simpleUserLogin = N "wmrowan"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/646357?v=3"
        , simpleUserUrl = "https://api.github.com/users/wmrowan"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/20016139"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1082#issuecomment-20016139"
  , issueCommentCreatedAt = 2013 (-06) (-25) 23 : 29 : 55 UTC
  , issueCommentBody =
      "The issue here is that `do` always returns a generic ReQL value (as do almost all other operations) which doesn't have `table` defined on it. Alternatively you can think of it that `r.db(...)` doesn't return a normal generic ReQL value like most other operations since there really isn't any such thing as a \"db\" object in the query language. It just serves as a reference point for making table references.\r\n\r\nI have no idea how the server would treat this case (`r.do(return r.db()).table()`) but if we want it would be pretty easy to fold the database type into the generic ReQL type in the JS driver allowing such a query to be constructed."
  , issueCommentId = 20016139
  }