Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2016 (-08) (-12) 18 : 49 : 33 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/6048/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/6048"
  , issueClosedBy = Nothing
  , issueLabels = []
  , issueNumber = 6048
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 4752708
        , simpleUserLogin = N "evoshawkins"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/4752708?v=3"
        , simpleUserUrl = "https://api.github.com/users/evoshawkins"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Extended 'Round' support"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/6048"
  , issueCreatedAt = 2016 (-08) (-12) 15 : 30 : 41 UTC
  , issueBody =
      Just
        "Sum aggregation of common decimal values produces floating point drift in the result. For use cases that require money values, business management apps and analytics there is a need for simplified rounding support to get the expected display results. \r\n\r\nUsing Data Explorer the following commands demonstrate both how easy it is to produce results unfit for display and how cumbersome it is to convert the aggregate to, for example, a max 2 decimal places. A common approach is to multiply the value and 100, round, then divide by 100. I have chosen to use exponential notation to represent 100. This demonstrates how 'max _n_ decimal places' could be implemented by passing in _n_ as an argument to Round (ex: 'e'+n, 'e-'+n).\r\n\r\n**Could we have a similar implementation of Round that takes an argument _n_?**\r\n\r\nI have broken out each step to show the interim values. For now I don't care that the number value doesn't convert to string with integrity in step # 4 because it doesn't effect the results, but it is strange.\r\n\r\n// Create a collection 'floatsumdrift' with two items having 'decimal' attribute. The first value should be 0.1 and the 2nd value 0.2\r\n\r\n// Step 1, Create collection\r\nr.tableCreate('floatsumdrift')\r\n\r\n// Step 2, Add items [{ decimal: 0.1 }, { decimal: 0.2 }]\r\nr.table('floatsumdrift').insert([{ decimal: 0.1 }, { decimal: 0.2 }])\r\n  \r\n// Step 3, Sum the values 0.1 and 0.2 (notice the floating point drift) \r\nr.table('floatsumdrift').sum('decimal')\r\n// 0.30000000000000004\r\n \r\n// Step 4, Convert to string\r\nr.table('floatsumdrift').sum('decimal').coerceTo('string')\r\n// \"0.30000000000000007\"\r\n  \r\n// Step 5, multiply by 100\r\nr.table('floatsumdrift').sum('decimal').coerceTo('string').add('e2')\r\n// 0.30000000000000007e2\r\n\r\n// Step 6, Convert to number\r\nr.table('floatsumdrift').sum('decimal').coerceTo('string').add('e2').coerceTo('number')\r\n// 30.000000000000007\r\n  \r\n// Step 7, Round the result\r\nr.table('floatsumdrift').sum('decimal').coerceTo('string').add('e2').coerceTo('number').round()\r\n// 30\r\n\r\n// Step 8, Convert to string\r\nr.table('floatsumdrift').sum('decimal').coerceTo('string').add('e2').coerceTo('number').round().coerceTo('string')\r\n// \"30\"\r\n\r\n// Step 9, Divide by 100\r\nr.table('floatsumdrift').sum('decimal').coerceTo('string').add('e2').coerceTo('number').round().coerceTo('string').add('e-2')\r\n// \"30e-2\"\r\n\r\n// Step 10, Convert to number\r\nr.table('floatsumdrift').sum('decimal').coerceTo('string').add('e2').coerceTo('number').round().coerceTo('string').add('e-2').coerceTo('number')\r\n// **0.3** (This is the expected result)\r\n"
  , issueState = "open"
  , issueId = Id 170897784
  , issueComments = 2
  , issueMilestone = Nothing
  }