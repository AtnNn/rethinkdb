IssueComment
  { issueCommentUpdatedAt = 2014 (-06) (-19) 23 : 37 : 23 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 258437
        , simpleUserLogin = N "srh"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/258437?v=3"
        , simpleUserUrl = "https://api.github.com/users/srh"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/46630327"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2574#issuecomment-46630327"
  , issueCommentCreatedAt = 2014 (-06) (-19) 23 : 36 : 51 UTC
  , issueCommentBody =
      "> Also, just to be clear, why do you think making map variadic would be bad?\r\n\r\nI think it might be bad.  Unknown unknowns.  `r.args`.  The fact that many drivers aren't good at that sort of thing.  The code would be more complicated.  The fact that in all the Haskell use I've had, almost never have I ~needed~ wanted zip3.  (Edit: wanted.  You never *need* zip3.)\r\n\r\nInstead of a two-argument map, we might just want a plain parallel-merge function that takes two sequences and merges them into a sequence of objects `{left: ..., right: ...}`.  One sequence can be shorter than another, and this provides a non-ambiguous way to communicate that information, in the case where the sequences have unequal length, by making the last documents have only a `{left: }` or `{right: }` field."
  , issueCommentId = 46630327
  }