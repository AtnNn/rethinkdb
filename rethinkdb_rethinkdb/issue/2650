Issue
  { issueClosedAt = Just 2014 (-07) (-03) 19 : 39 : 01 UTC
  , issueUpdatedAt = 2014 (-07) (-03) 19 : 40 : 32 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/2650/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/2650"
  , issueClosedBy = Nothing
  , issueLabels = []
  , issueNumber = 2650
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 316661
        , simpleUserLogin = N "timmaxw"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/316661?v=3"
        , simpleUserUrl = "https://api.github.com/users/timmaxw"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Assertion failed: [ptr_] in unit tests"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/2650"
  , issueCreatedAt = 2014 (-07) (-03) 19 : 30 : 52 UTC
  , issueBody =
      Just
        "On next in 2570f3f2820e7d902340752ffe218d2987691082, I get the following error when running `rethinkdb-unittest` in debug mode:\r\n\r\n```\r\n[ RUN      ] BTreeSindex.BtreeStoreAPI\r\nVersion: rethinkdb 1.13.1-442-g2570f3 (debug) (GCC 4.6.3)\r\nerror: Error in ./src/containers/scoped.hpp at line 102:\r\nPrevious message may not have been written to the log file (cannot open or find log file).\r\nerror: Assertion failed: [ptr_] \r\nPrevious message may not have been written to the log file (cannot open or find log file).\r\nerror: Backtrace:\r\nPrevious message may not have been written to the log file (cannot open or find log file).\r\nerror: Thu Jul  3 12:28:49 2014\r\n       \r\n       1: rethinkdb_backtrace(void**, int) at rethinkdb_backtrace.cc:101\r\n       2: backtrace_t::backtrace_t() at backtrace.cc:203\r\n       3: lazy_backtrace_formatter_t::lazy_backtrace_formatter_t() at backtrace.cc:283\r\n       4: format_backtrace(bool) at backtrace.cc:198\r\n       5: report_fatal_error(char const*, int, char const*, ...) at errors.cc:83\r\n       6: scoped_ptr_t<intrusive_list_t<alt_snapshot_node_t> >::operator->() const at scoped.hpp:102\r\n       7: cache_t::add_snapshot_node(unsigned long, alt_snapshot_node_t*) at alt.cc:121\r\n       8: buf_lock_t::snapshot_subdag() at alt.cc:661\r\n       9: get_btree_superblock_and_txn_for_reading(cache_conn_t*, cache_snapshotted_t, scoped_ptr_t<real_superblock_t>*, scoped_ptr_t<txn_t>*) at operations.cc:782\r\n       10: store_t::acquire_superblock_for_read(object_buffer_t<fifo_enforcer_sink_t::exit_read_t>*, scoped_ptr_t<txn_t>*, scoped_ptr_t<real_superblock_t>*, signal_t*, bool) at btree_store.cc:1186\r\n       11: unittest::run_BTreeSindex_BtreeStoreAPI() at btree_sindex.cc:228\r\n       12: std::_Function_handler<void (), void (*)()>::_M_invoke(std::_Any_data const&) at functional:1780\r\n       13: std::function<void ()>::operator()() const at functional:2162\r\n       14: starter_t::run_wrapper(std::function<void ()> const&) at runtime.cc:61\r\n       15: std::_Mem_fn<void (starter_t::*)(std::function<void ()> const&)>::operator()(starter_t*, std::function<void ()> const&) const at functional:551\r\n       16: void std::_Bind<std::_Mem_fn<void (starter_t::*)(std::function<void ()> const&)> (starter_t*, std::function<void ()>)>::__call<void, , 0, 1>(std::tuple<>&&, std::_Index_tuple<0, 1>) at functional:1147\r\n       17: void std::_Bind<std::_Mem_fn<void (starter_t::*)(std::function<void ()> const&)> (starter_t*, std::function<void ()>)>::operator()<, void>() at functional:1206\r\n       18: std::_Function_handler<void (), std::_Bind<std::_Mem_fn<void (starter_t::*)(std::function<void ()> const&)> (starter_t*, std::function<void ()>)> >::_M_invoke(std::_Any_data const&) at functional:1780\r\n       19: std::function<void ()>::operator()() const at functional:2162\r\n       20: callable_action_instance_t<std::function<void ()> >::run_action() at callable_action.hpp:28\r\n       21: callable_action_wrapper_t::run() at runtime_utils.cc:43\r\n       22: coro_t::run() at coroutines.cc:199\r\n       23: coro_t* coro_t::spawn_sometime<std::function<void ()> >(std::function<void ()> const&) at coroutines.hpp:58\r\n       24: starter_t::on_thread_switch() at runtime.cc:57\r\n       25: linux_message_hub_t::on_event(int) at message_hub.cc:154\r\n       26: epoll_event_queue_t::run() at epoll.cc:115\r\n       27: linux_thread_pool_t::start_thread(void*) at thread_pool.cc:160\r\n       28: /lib/x86_64-linux-gnu/libpthread.so.0(+0x7e9a) [0x7f7a7771de9a] at 0x7f7a7771de9a (/lib/x86_64-linux-gnu/libpthread.so.0)\r\n       29: clone+0x6d at 0x7f7a7744a3fd (/lib/x86_64-linux-gnu/libc.so.6)\r\nPrevious message may not have been written to the log file (cannot open or find log file).\r\nerror: Exiting.\r\nPrevious message may not have been written to the log file (cannot open or find log file).\r\nTrace/breakpoint trap (core dumped)\r\n```\r\n@srh: I suspect this is related to your work with pointer containers."
  , issueState = "closed"
  , issueId = Id 37115848
  , issueComments = 1
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 706854
                , simpleUserLogin = N "AtnNn"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/706854?v=3"
                , simpleUserUrl = "https://api.github.com/users/AtnNn"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 1
          , milestoneNumber = 17
          , milestoneClosedIssues = 593
          , milestoneDescription =
              Just
                "The scope of this issue is covered by another issue. The closing comment should link to the other issue."
          , milestoneTitle = "duplicate"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/17"
          , milestoneCreatedAt = 2013 (-03) (-29) 20 : 23 : 12 UTC
          , milestoneState = "closed"
          }
  }