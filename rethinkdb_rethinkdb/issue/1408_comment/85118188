IssueComment
  { issueCommentUpdatedAt = 2015 (-03) (-23) 19 : 46 : 45 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/85118188"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1408#issuecomment-85118188"
  , issueCommentCreatedAt = 2015 (-03) (-23) 17 : 37 : 31 UTC
  , issueCommentBody =
      "Here's a proposal for this from @elifarley https://github.com/rethinkdb/rethinkdb/issues/3962 (copied here):\r\n\r\n\r\n> The 'resolution' (or 'precision') function can help in grouping by a given duration.\r\n>\r\n> It should return the same time, but rounded to a lower precision (like an hour precision, or 10-minute precision and so on).\r\n>\r\n> Take [InfluxDB's example] (http://influxdb.com/docs/v0.8/api/aggregate_functions.html#count):\r\n> \r\n> ```SQL\r\n> SELECT COUNT(column_name) FROM series_name group by time(10m) ...\r\n> ```\r\n> \r\n> In ReQL:\r\n>\r\n> ```Python\r\n> r.table('series_name').group(lambda x: x['when'].resolution(10.minutes)).count()...\r\n> ```\r\n> \r\n> For group in intervals of 2 hours and a half:\r\n> ```Python\r\n> r.table('series_name').group(lambda x: x['when'].resolution(2.hours + 30.minutes)).count()...\r\n> ```\r\n>\r\n> or\r\n> \r\n> ```Python\r\n> r.table('series_name').group(lambda x: x['when'].resolution(2.hours.30.minutes)).count()...\r\n> ```\r\n> \r\n> Or maybe:\r\n> ```Python\r\n> r.table('series_name').group(lambda x: x['when'].resolution(r.duration('2h 30min')).count()...\r\n> ```\r\n"
  , issueCommentId = 85118188
  }