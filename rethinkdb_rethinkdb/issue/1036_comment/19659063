IssueComment
  { issueCommentUpdatedAt = 2013 (-06) (-19) 02 : 30 : 46 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 43867
        , simpleUserLogin = N "jdoliner"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/43867?v=3"
        , simpleUserUrl = "https://api.github.com/users/jdoliner"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/19659063"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1036#issuecomment-19659063"
  , issueCommentCreatedAt = 2013 (-06) (-19) 02 : 30 : 46 UTC
  , issueCommentBody =
      "I kind of dislike both of these behaviors. I thought to main use case for `has_fields` was for cases where you wanted to run some operation over a sequence of objects that requires them to have a certain field. For example:\r\n\r\n```Python\r\nseq.reduce(lambda x,y: {\"foo\": x[\"foo\"] + y[\"foo\"]})\r\n```\r\nmight be failing because some elements of the sequence don't have a field with key \"foo\" in them so you would replace it with:\r\n\r\n```Python\r\nseq.has_fields(\"foo\").reduce(lambda x, y: {\"foo\" : x[\"foo\"] + y[\"foo\"]})\r\n```\r\n\r\nbut this recursive behavior means that this no longer always solves your problems. I really like having `has_fields(\"attr\")` give you the invariant that anything that remains in the sequence is guaranteed to return a non `null` value if you call `[\"attr\"]` on it.\r\n"
  , issueCommentId = 19659063
  }