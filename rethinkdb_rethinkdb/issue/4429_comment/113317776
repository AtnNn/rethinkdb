IssueComment
  { issueCommentUpdatedAt = 2015 (-06) (-18) 23 : 31 : 07 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 622337
        , simpleUserLogin = N "joaojeronimo"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/622337?v=3"
        , simpleUserUrl = "https://api.github.com/users/joaojeronimo"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/113317776"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/4429#issuecomment-113317776"
  , issueCommentCreatedAt = 2015 (-06) (-18) 23 : 28 : 56 UTC
  , issueCommentBody =
      "That would be indeed very cool, also there's the [N1QL](http://docs.couchbase.com/4.0/n1ql/index.html) project by Couchbase that also aims to create a SQL-like query language for object data stores (in this case specifically for Couchbase) but it is [open source](https://github.com/couchbase/query) so if it's any good (which I have no idea) it could be a starting point to build this for RethinkDB.\r\n\r\nIt could/should also be a completely separate project to be implemented as a driver, something that compiles for instance `SELECT * FROM test.test WHERE a = 1` directly to `[39,[[15,[[14,[\"test\"]],\"test\"]],{\"a\":1}]]` and send it through the wire without even going compiling it first to `r.db('test').table('test').filter({a:1})`.\r\n\r\nOne benefit of this is that it would be way easier to start supporting RethinkDB in other languages that do not have official/good drivers, because writing a driver that accepts a string with a SQLish query is way simpler, also making RethinkDB even easier for people who understand SQL (a lot)."
  , issueCommentId = 113317776
  }