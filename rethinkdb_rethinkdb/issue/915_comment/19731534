IssueComment
  { issueCommentUpdatedAt = 2013 (-06) (-20) 05 : 22 : 51 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/19731534"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/915#issuecomment-19731534"
  , issueCommentCreatedAt = 2013 (-06) (-20) 05 : 22 : 51 UTC
  , issueCommentBody =
      "@coffeemug -- I would be pretty opposed to that solution.  We currently have the rule \"to use an index, add `:index => ...` to the end of your query\", and this is true of all commands that accept indexes (e.g. `between`).  We're also planning to make even more commands, like `eq_join`, behave this way.  Having `get_all` be the one exception seems really bad to me.  I would probably rather just not make `get_all` be variadic.\r\n\r\nTo me this really comes down to the question of whether or not we're going to want to let people use objects as primary keys in the future.  If we don't, which I previously thought was the case, then this is ugly but unambiguous, and the error message is nowhere near the worst error message we produce (plus we could make it better).\r\n\r\nHow likely do we think we are to make that change?  I think all our original arguments for not doing so still stand.\r\n\r\n(Also, as an aside, not being able to add optional arguments to commands that take a variable number of objects kinda sucks.  Can anyone think of a clever way around that problem?)"
  , issueCommentId = 19731534
  }