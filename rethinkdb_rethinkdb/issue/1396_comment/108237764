IssueComment
  { issueCommentUpdatedAt = 2015 (-06) (-03) 08 : 07 : 02 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 12630927
        , simpleUserLogin = N "tkodw"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/12630927?v=3"
        , simpleUserUrl = "https://api.github.com/users/tkodw"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/108237764"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1396#issuecomment-108237764"
  , issueCommentCreatedAt = 2015 (-06) (-03) 08 : 07 : 02 UTC
  , issueCommentBody =
      "It's good to hear you've already given these things quite a bit of thought @mlucy .\r\n> In a perfect world we'd be able to use a compression scheme that makes use of entropy encoding, because it turns out our serialization format responds very well to that (I did some rough benchmarks on typical data about a year ago).\r\n\r\nThe very fastest entropy encoding methods tend to require several times the computation power of byte oriented compression methods. Every byte of data produced from an entropy coding method will likely require a series of additions, masks, and shifts, unlike byte oriented methods which produce data mostly though reasonably sized memory copy operations that are exceptionally fast. I advise you to use caution when pursuing entropy coding compression methods, since they push into diminishing returns when comparing the improvement in compression ratio to the increase in CPU cost. \r\n\r\nWhat I would like to see in RethinkDB is an always on compression method that greatly improves throughput and reduces storage requirements on common workloads without incurring any significant increase in CPU usage. For this goal, entropy coding's extra CPU cost is problematic. I think that accepting a far less than optimal compression ratio is necessary to prevent compression from being abandoned or relegated to an opt-in feature."
  , issueCommentId = 108237764
  }