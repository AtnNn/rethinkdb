IssueComment
  { issueCommentUpdatedAt = 2014 (-12) (-28) 20 : 46 : 11 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 265071
        , simpleUserLogin = N "kofalt"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/265071?v=3"
        , simpleUserUrl = "https://api.github.com/users/kofalt"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/68218819"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3249#issuecomment-68218819"
  , issueCommentCreatedAt = 2014 (-12) (-28) 20 : 44 : 35 UTC
  , issueCommentBody =
      "It should be noted that the trivial query `r.and(true, true, true)` takes about four thousandths of a millisecond in the profiler, 12 ms with the Web UI, and 0.66 ms with the golang driver.\r\n\r\nA data query `r.db('a').table('b')` retrieving 30 documents, each  with 10 fields (about 8KB of data, give or take) is 2.35 ms in the profiler, 21 ms in the web UI, and 3.91 ms in the golang driver.\r\n\r\nI lack the background knowledge to definitively state how long that transfer should reasonably take on localhost. My intuition is \"no time at all\", as that table read was almost certainly in-memory.\r\n\r\nThis is a (small) cause of latency in my usage, which would be lovely to optimize out.\r\nProbably call it a \"nice to have\" - I haven't seen anything disastrous from this.\r\n\r\nI wonder if #1884 (unix sockets) would trim this further, presumably removing the whole TCP stack?\r\n"
  , issueCommentId = 68218819
  }