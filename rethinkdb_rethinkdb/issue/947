Issue
  { issueClosedAt = Just 2013 (-06) (-07) 17 : 57 : 05 UTC
  , issueUpdatedAt = 2013 (-07) (-25) 01 : 21 : 02 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/947/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/947"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "444444"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:performance"
          , labelName = "tp:performance"
          }
      ]
  , issueNumber = 947
  , issueAssignee =
      Just
        SimpleUser
          { simpleUserId = Id 1777134
          , simpleUserLogin = N "mlucy"
          , simpleUserAvatarUrl =
              "https://avatars.githubusercontent.com/u/1777134?v=3"
          , simpleUserUrl = "https://api.github.com/users/mlucy"
          , simpleUserType = OwnerUser
          }
  , issueUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Research pluck ineffiency"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/947"
  , issueCreatedAt = 2013 (-06) (-05) 08 : 36 : 24 UTC
  , issueBody =
      Just
        "I was taking a brief look at YCSB and noticed that for point gets, we are doing a pluck. This is perfectly sane. Efficiently implemented, pluck should be a practically zero-cost operator.\r\n\r\nBut it isn't. Here's a quick experiment:\r\n\r\nFirst the output:\r\n```\r\nGet: 875.38309583279qps\r\nGetAll: 841.41265312264qps\r\nGet pluck: 542.69162263385qps\r\nGetAll pluck: 733.0771512848qps\r\n```\r\n\r\nThe code:\r\n```\r\nr\\db('test')->tableCreate('t55')->run($conn);\r\n$doc = array('id' => \"1\", 'foo' => 'test');\r\n\tr\\table('t55')->insert($doc)->run($conn);\r\n\r\n// Experiment 1:\r\n$t = microtime(true);\r\nfor ($i = 0; $i < 10000; ++$i)\r\n    r\\table('t55')->get(1)->run($conn);\r\necho \"Get: \" . 10000 / (microtime(true) - $t) . \"qps\\n\";\r\n\r\n// Experiment 2:\r\n$t = microtime(true);\r\nfor ($i = 0; $i < 10000; ++$i)\r\n    r\\table('t55')->getAll(1)->run($conn);\r\necho \"GetAll: \" . 10000 / (microtime(true) - $t) . \"qps\\n\";\r\n\r\n// Experiment 3:\r\n$t = microtime(true);\r\nfor ($i = 0; $i < 10000; ++$i)\r\n    r\\table('t55')->get(1)->pluck(array('id', 'foo'))->run($conn);\r\necho \"Get pluck: \" . 10000 / (microtime(true) - $t) . \"qps\\n\";\r\n\r\n// Experiment 4:\r\n$t = microtime(true);\r\nfor ($i = 0; $i < 10000; ++$i)\r\n    r\\table('t55')->getAll(1)->pluck(array('id', 'foo'))->run($conn);\r\necho \"GetAll pluck: \" . 10000 / (microtime(true) - $t) . \"qps\\n\";\r\n```\r\n\r\nRethinkDB CPU utilization while running the different parts:\r\nGet: 60 %\r\nGetAll: 60 %\r\nGet + Pluck: 69 %\r\nGetAll + Pluck: 55 %\r\n\r\n\r\nConclusion: Pluck makes gets slower by about 40 %. While I am using only a single client/connection, this cannot be attributed to a longer delay alone, as the CPU usage is actually higher with pluck, while processing fewer queries per second. Weirdly, pluck on sequences seems to be significantly faster than pluck on a single object.\r\nWe should find out what makes pluck so slow, and check if the same issue affects other operations as well."
  , issueState = "closed"
  , issueId = Id 15159444
  , issueComments = 15
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Just 2013 (-06) (-06) 07 : 00 : 00 UTC
          , milestoneOpenIssues = 0
          , milestoneNumber = 31
          , milestoneClosedIssues = 67
          , milestoneDescription =
              Just
                "The primary purpose of this release is to make ReQL improvements we've been waiting to make for so long.\r\n\r\n"
          , milestoneTitle = "1.6"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/31"
          , milestoneCreatedAt = 2013 (-04) (-27) 01 : 30 : 17 UTC
          , milestoneState = "closed"
          }
  }