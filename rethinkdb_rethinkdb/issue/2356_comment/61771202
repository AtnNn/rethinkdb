IssueComment
  { issueCommentUpdatedAt = 2014 (-11) (-05) 07 : 53 : 00 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 583701
        , simpleUserLogin = N "internalfx"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/583701?v=3"
        , simpleUserUrl = "https://api.github.com/users/internalfx"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/61771202"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2356#issuecomment-61771202"
  , issueCommentCreatedAt = 2014 (-11) (-05) 07 : 53 : 00 UTC
  , issueCommentBody =
      "I'm gonna go against the grain here and say a query optimizer is needed....\r\n\r\nExplicit usage is nice, I don't think it should be removed. I think query optimization should be an option.\r\n\r\nI have been using RTDB on a large project and there are some edge cases where I have to work much harder than I normally would.\r\n\r\nRTDB gets hard when you are working with queries generated on the fly. Not every situation gives me the ability to \"hand tune\" every query. Sometimes it would be really nice to just chain on all the filters, fire it at RTDB, with a note that says \"Please run this as efficiently as you can!\"\r\n\r\nEssentially what I ended up doing was writing my own subpar query optimizer. I have to assume the RTDB devs could write something much better, which would DRASTICALLY reduce the complexity of some parts of my project. Not to mention that RTDB has local access to which indexes are available, etc.\r\n\r\nThe database server is the right place to automatically optimize queries...\r\n\r\nI think it might work as some kind of flag that tells the server its free to run it as it sees fit. Which would preserve the original functionality."
  , issueCommentId = 61771202
  }