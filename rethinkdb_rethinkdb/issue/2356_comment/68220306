IssueComment
  { issueCommentUpdatedAt = 2014 (-12) (-28) 22 : 17 : 47 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 265071
        , simpleUserLogin = N "kofalt"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/265071?v=3"
        , simpleUserUrl = "https://api.github.com/users/kofalt"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/68220306"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2356#issuecomment-68220306"
  , issueCommentCreatedAt = 2014 (-12) (-28) 21 : 34 : 12 UTC
  , issueCommentBody =
      "Regarding @danielmewes' comment - being that ReQL has all the pleasant properties of an AST, an LLVM-like series of modular optimizing passes would be *outstanding*. This would be similar to and competitive with similar products in this space whose optimizers are quite effective.\r\n\r\nIn the context of this particular ticket, I'd like to agree with @internalfx that (at least the option of) automatically using indexes would be a huge boon. Since ReQL is so friendly to programmatic manipulation, I've been building multiple applications with few-to-none 'static' queries; they're generated on the fly by an in-house library using some context information about the table(s) in question.\r\n\r\nThis does not currently take indexes into account, and the complexity of programmatically constructing a query goes up quite a bit if nearly every Term may require zero-to-many additional parameters. That doubles my cyclomatic complexity? More?\r\n\r\nReally, the database is the best place to be making those decisions, as it has the most context about the pending operation and separates concerns from \"here's what I want to do\" and \"here's how to do it quickly.\"\r\n\r\nIMO, this particular optimization could be implemented as a single AST -> AST' pass, with clear ground laid for more advanced passes in the future. I don't have any huge opinion about defaulting / opt-in, but I would mention that coming from the land of SQL, I had internally assumed that adding an index was everything RDB needed to accelerate my queries.\r\n\r\nAlso worth mentioning is that even ignoring programmatic queries, explicit index usage can only become more of a maintenance burden as the size of an application increases. I'm very used to discovering performance problems months or years into a production deployment, and having a single source of truth (list of indexes) for fixing those problems is a huge maintenance win.\r\n"
  , issueCommentId = 68220306
  }