Issue
  { issueClosedAt = Just 2013 (-06) (-10) 22 : 48 : 18 UTC
  , issueUpdatedAt = 2013 (-06) (-10) 22 : 49 : 48 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/342/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/342"
  , issueClosedBy = Nothing
  , issueLabels = []
  , issueNumber = 342
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Implement a destructuring/pattern-matching pluck"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/342"
  , issueCreatedAt = 2013 (-02) (-14) 22 : 17 : 00 UTC
  , issueBody =
      Just
        "We currently have a `pluck` function (with some proposals for how to make it good on a hierarchy), and `values` function. I think what ReQL is missing is a really powerful, easy to use primitive to take an object and transform it into an object with a different structure. Currently to do anything even remotely like this the user has to resort to `map` and `merge` which becomes really frustrating very quickly. I think @al3xandru's proposal is *definitely* going in the right direction. @mlucy has some ideas on what to borrow from common lisp and ML to make this better, would love to hear what you think.\r\n\r\nHere is @al3xandru's proposal:\r\n\r\nCurrently `pluck` functionality is very limited in the sense that it\r\nis useful only when doing projections at the top level fields of a\r\nrow. Dealing with embedded objects and arrays (and arrays of objects)\r\nis not as easy as it should be.\r\n\r\n\r\n## Projections (Pluck) ##\r\n\r\nExample row:\r\n\r\n```\r\n{\r\n    native_field: val,\r\n    object_field: {\r\n                          native_field: val,\r\n                          object_field: {},\r\n                          array_natives: [...],\r\n                          array_objects: [{\8230}, {\8230}, \8230 , {\8230}]\r\n                       },\r\n     array_native: [val1, val2, \8230, val_n],\r\n     array_objects: [{\8230}, {\8230}, \8230, {...}]\r\n}\r\n```\r\n\r\nA. Simple solution (simple pattern matching):\r\n\r\n1. top level only:\r\n\r\n```\r\npluck( {\r\n            native_field: true,\r\n            object_field: true,\r\n            array_native: true,\r\n            array_objects: true\r\n          }\r\n)\r\n```\r\n\r\n2. embedded objects:\r\n\r\n```\r\npluck(\r\n  {\r\n       object_field: {\r\n                            native_field: true,\r\n                            array_objects: true\r\n       }\r\n  }\r\n)\r\n```\r\n\r\n3. arrays with objects (apply to pattern to each element of the array):\r\n\r\n```\r\npluck( { array_objects: [ {native_field: true, array_native: true} ] } )\r\n```\r\n\r\n_Note_: all additional fields of a projection, plus array filtering\r\nshould be applied prior to pluck. Basically `pluck` would remain a\r\nsimple projection function.\r\n\r\nB. Advanced:\r\n\r\nInstead of simply providing a true value or a \"descriptor object\", we\r\ncould allow using random ReQL expressions or functions for each\r\nattribute.\r\n\r\nEach expression can evaluate to a value or it could be a marker value\r\nto indicate the inclusion of the attribute value.\r\n\r\n_Note_: the advanced approach would basically incorporate both the\r\nfunctionality of `pluck` and the currently missing `map_merge`. The\r\nonly thing I don't like about it is that I couldn't come up with a\r\nsimple solution for specifying the inclusion in the result of the\r\ndefault attribute value."
  , issueState = "closed"
  , issueId = Id 11016237
  , issueComments = 2
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 706854
                , simpleUserLogin = N "AtnNn"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/706854?v=3"
                , simpleUserUrl = "https://api.github.com/users/AtnNn"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 1
          , milestoneNumber = 17
          , milestoneClosedIssues = 593
          , milestoneDescription =
              Just
                "The scope of this issue is covered by another issue. The closing comment should link to the other issue."
          , milestoneTitle = "duplicate"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/17"
          , milestoneCreatedAt = 2013 (-03) (-29) 20 : 23 : 12 UTC
          , milestoneState = "closed"
          }
  }