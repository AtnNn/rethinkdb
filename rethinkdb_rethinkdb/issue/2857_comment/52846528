IssueComment
  { issueCommentUpdatedAt = 2014 (-08) (-20) 21 : 24 : 18 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 316661
        , simpleUserLogin = N "timmaxw"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/316661?v=3"
        , simpleUserUrl = "https://api.github.com/users/timmaxw"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/52846528"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2857#issuecomment-52846528"
  , issueCommentCreatedAt = 2014 (-08) (-20) 21 : 24 : 18 UTC
  , issueCommentBody =
      "> If `server2` goes down, and I declare it dead, I then have to call again reconfigure, which we currently do not need. As soon as a server is declared dead, we'll move replicas around.\r\n\r\nYes, this is correct. In the proposed API, after you permanently remove a server, you will get an error saying \"`table_config` refers to a server that doesn't exist\". Then you need to call `table.reconfigure()`, issue a new config manually through the pseudo-table API, or bring up a new server with the same name.\r\n\r\n> Also we should provide a way to get the current configuration such that people don't need to remember what were the previous settings (not sure if this is already part of the spec)\r\n\r\nYou can retrieve the low-level config by reading the pseudo-table. But there's no way to recover the last set of parameters to `table.reconfigure()`; they're not stored anywhere. We'll encourage people to write a script that contains a bunch of calls to `table.reconfigure()`, and store their cluster's state that way."
  , issueCommentId = 52846528
  }