IssueComment
  { issueCommentUpdatedAt = 2014 (-08) (-13) 22 : 06 : 35 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 316661
        , simpleUserLogin = N "timmaxw"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/316661?v=3"
        , simpleUserUrl = "https://api.github.com/users/timmaxw"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/52118430"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2857#issuecomment-52118430"
  , issueCommentCreatedAt = 2014 (-08) (-13) 22 : 06 : 05 UTC
  , issueCommentBody =
      "* We should consider adding a `prioritize` optarg, with values `\"similarity\"` and `\"distribution\"`. `\"similarity\"` means to generate a config that is as similar to the current state as possible, to minimize the amount of backfilling. `\"distribution\"` means to generate a config that distributes data as evenly as possible. The current clustering code already makes this decision when creating a blueprint; it prioritizes similarity most of the time, but it prioritizes distribution when the user changes the sharding settings.\r\n\r\n   Alternatively, we might be able to find some sort of workaround. I suspect that the reason for the current behavior is because otherwise, if a shard is split, the cluster will decide to keep both halves of the shard on the same machine (because that's where the data is). If we always prioritize similarity, subject to the constraint that we will never generate an oversharded blueprint, then it might produce sane behavior in every situation. But even then I can see use cases for `prioritize=\"distribution\"`."
  , issueCommentId = 52118430
  }