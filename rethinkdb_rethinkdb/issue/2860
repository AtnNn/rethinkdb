Issue
  { issueClosedAt = Just 2014 (-08) (-22) 22 : 49 : 41 UTC
  , issueUpdatedAt = 2015 (-01) (-02) 21 : 16 : 50 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/2860/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/2860"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "207de5"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/cp:clustering"
          , labelName = "cp:clustering"
          }
      ]
  , issueNumber = 2860
  , issueAssignee =
      Just
        SimpleUser
          { simpleUserId = Id 316661
          , simpleUserLogin = N "timmaxw"
          , simpleUserAvatarUrl =
              "https://avatars.githubusercontent.com/u/316661?v=3"
          , simpleUserUrl = "https://api.github.com/users/timmaxw"
          , simpleUserType = OwnerUser
          }
  , issueUser =
      SimpleUser
        { simpleUserId = Id 316661
        , simpleUserLogin = N "timmaxw"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/316661?v=3"
        , simpleUserUrl = "https://api.github.com/users/timmaxw"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Table name collision resolution"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/2860"
  , issueCreatedAt = 2014 (-08) (-11) 21 : 18 : 59 UTC
  , issueBody =
      Just
        "As part of #2680, we'll be using table names as primary keys on some pseudo-tables. So if there are two tables with the same name, one will be inaccessible. The solution is to automatically rename one of the tables to `<old name>_renamed`. In `reql_admin` as of 9f2954cc9cb84113fc5a88fb99f9ce7c52ac73ff, we already automatically rename servers, so perhaps some of the code can be shared between them.\n\nThis is a bit trickier than server renaming because there's a danger of two servers trying to rename the same table at the same time. This might be OK, especially if we implement the proposal in #2784. Alternatively, we could have some sort of simple consensus protocol to do the renaming; i.e. we could say that a server will only attempt to automatically rename a table if it cannot see any server with a higher peer ID than its peer ID.\n\nThere will still be some gap during which there are two tables with the same name. We should consider showing the user an illusion that one of the tables has already been renamed. For example, suppose that there are two tables named `foo`, and the user asks for a list of all the tables and their names. We could return `foo` and `foo_renamed`, in anticipation of one of the `foo` tables being renamed. We can use the same algorithm here that we use for the actual table renaming, in order to ensure that the predicted renaming is what actually happens. If we do this, we should probably do the same thing for servers as well.\n"
  , issueState = "closed"
  , issueId = Id 40001761
  , issueComments = 12
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Just 2015 (-01) (-23) 08 : 00 : 00 UTC
          , milestoneOpenIssues = 0
          , milestoneNumber = 81
          , milestoneClosedIssues = 321
          , milestoneDescription = Just ""
          , milestoneTitle = "1.16"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/81"
          , milestoneCreatedAt = 2014 (-09) (-04) 04 : 49 : 30 UTC
          , milestoneState = "closed"
          }
  }