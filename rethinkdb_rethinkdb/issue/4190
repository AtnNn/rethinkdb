Issue
  { issueClosedAt = Just 2015 (-06) (-09) 17 : 34 : 07 UTC
  , issueUpdatedAt = 2015 (-06) (-09) 17 : 34 : 07 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4190/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/4190"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "e102d8"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:bug"
          , labelName = "tp:bug"
          }
      ]
  , issueNumber = 4190
  , issueAssignee =
      Just
        SimpleUser
          { simpleUserId = Id 552910
          , simpleUserLogin = N "Tryneus"
          , simpleUserAvatarUrl =
              "https://avatars.githubusercontent.com/u/552910?v=3"
          , simpleUserUrl = "https://api.github.com/users/Tryneus"
          , simpleUserType = OwnerUser
          }
  , issueUser =
      SimpleUser
        { simpleUserId = Id 1461947
        , simpleUserLogin = N "neumino"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1461947?v=3"
        , simpleUserUrl = "https://api.github.com/users/neumino"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Returning a function in `r.js` crashes the server"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4190"
  , issueCreatedAt = 2015 (-05) (-06) 05 : 38 : 15 UTC
  , issueBody =
      Just
        "Query:\r\n```\r\nr.expr([1,2,3,4,5]).filter(r.js('(function(row) { return function() {} })'))\r\n```\r\n\r\nBacktrace:\r\n```\r\nerror: Error in src/extproc/js_runner.cc at line 230:\r\nerror: Guarantee failed: [cache_res.second] js_runner_t cached two functions with the same source\r\nerror: Backtrace:\r\naddr2line: 'rethinkdb': No such file\r\naddr2line: 'rethinkdb': No such file\r\nerror: Tue May  5 22:37:13 2015\r\n       \r\n       1: backtrace_t::backtrace_t() at 0x97e280 (rethinkdb)\r\n       2: format_backtrace(bool) at 0x97e5f9 (rethinkdb)\r\n       3: report_fatal_error(char const*, int, char const*, ...) at 0xb8e68d (rethinkdb)\r\n       4: js_runner_t::cache_id(unsigned long, std::string const&) at 0x8d4b1e (rethinkdb)\r\n       5: js_runner_t::call(std::string const&, std::vector<ql::datum_t, std::allocator<ql::datum_t> > const&, js_runner_t::req_config_t const&) at 0x8d5590 (rethinkdb)\r\n       6: ql::js_func_t::call(ql::env_t*, std::vector<ql::datum_t, std::allocator<ql::datum_t> > const&, ql::eval_flags_t) const at 0xa5290f (rethinkdb)\r\n       7: ql::js_func_t::filter_helper(ql::env_t*, ql::datum_t) const at 0xa51da2 (rethinkdb)\r\n       8: ql::func_t::filter_call(ql::env_t*, ql::datum_t, counted_t<ql::func_t const>) const at 0xa51252 (rethinkdb)\r\n       9: ql::filter_trans_t::lst_transform(ql::env_t*, std::vector<ql::datum_t, std::allocator<ql::datum_t> >*, ql::datum_t const&) at 0x9fa721 (rethinkdb)\r\n       10: ql::ungrouped_op_t::operator()(ql::env_t*, std::map<ql::datum_t, std::vector<ql::datum_t, std::allocator<ql::datum_t> >, optional_datum_less_t, std::allocator<std::pair<ql::datum_t const, std::vector<ql::datum_t, std::allocator<ql::datum_t> > > > >*, ql::datum_t const&) at 0x9f8ff3 (rethinkdb)\r\n       11: ql::eager_datum_stream_t::next_grouped_batch(ql::env_t*, ql::batchspec_t const&, std::map<ql::datum_t, std::vector<ql::datum_t, std::allocator<ql::datum_t> >, optional_datum_less_t, std::allocator<std::pair<ql::datum_t const, std::vector<ql::datum_t, std::allocator<ql::datum_t> > > > >*) at 0xad4a03 (rethinkdb)\r\n       12: ql::eager_datum_stream_t::next_batch_impl(ql::env_t*, ql::batchspec_t const&) at 0xad4e5d (rethinkdb)\r\n       13: ql::datum_stream_t::next_batch(ql::env_t*, ql::batchspec_t const&) at 0xad27b2 (rethinkdb)\r\n       14: ql::datum_stream_t::next(ql::env_t*, ql::batchspec_t const&) at 0xad2fdb (rethinkdb)\r\n       15: ql::array_datum_stream_t::next(ql::env_t*, ql::batchspec_t const&) at 0xad3205 (rethinkdb)\r\n       16: ql::eager_datum_stream_t::as_array(ql::env_t*) at 0xad2c3b (rethinkdb)\r\n       17: ql::array_datum_stream_t::as_array(ql::env_t*) at 0xade748 (rethinkdb)\r\n       18: ql::val_t::val_t(ql::env_t*, counted_t<ql::datum_stream_t>, ql::protob_t<Backtrace const>) at 0xaeffd7 (rethinkdb)\r\n       19: scoped_ptr_t<ql::val_t> make_scoped<ql::val_t, ql::env_t*, counted_t<ql::datum_stream_t>, ql::protob_t<Backtrace const> const&>(ql::env_t*&&, counted_t<ql::datum_stream_t>&&, ql::protob_t<Backtrace const> const&) at 0xa75318 (rethinkdb)\r\n       20: ql::filter_term_t::eval_impl(ql::scope_env_t*, ql::args_t*, ql::eval_flags_t) const at 0xa9dd09 (rethinkdb)\r\n       21: ql::op_term_t::term_eval(ql::scope_env_t*, ql::eval_flags_t) const at 0xad0734 (rethinkdb)\r\n       22: ql::runtime_term_t::eval(ql::scope_env_t*, ql::eval_flags_t) const at 0xacd33d (rethinkdb)\r\n       23: ql::query_cache_t::ref_t::run(ql::env_t*, Response*) at 0xae80f1 (rethinkdb)\r\n       24: ql::query_cache_t::ref_t::fill_response(Response*) at 0xae9a7e (rethinkdb)\r\n       25: ql::run(ql::query_id_t&&, ql::protob_t<Query>, Response*, ql::query_cache_t*, signal_t*) at 0xacd6e0 (rethinkdb)\r\n       26: rdb_query_server_t::run_query(ql::query_id_t&&, ql::protob_t<Query> const&, Response*, ql::query_cache_t*, signal_t*) at 0xaf2c2f (rethinkdb)\r\n       27: void save_exception<void query_server_t::connection_loop<json_protocol_t>(linux_tcp_conn_t*, unsigned long, ql::query_cache_t*, signal_t*)::{lambda(std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > >, signal_t*)#1}::operator()(std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > >, signal_t*) const::{lambda()#1}>(std::__exception_ptr::exception_ptr*, std::string*, cond_t*, void query_server_t::connection_loop<json_protocol_t>(linux_tcp_conn_t*, unsigned long, ql::query_cache_t*, signal_t*)::{lambda(std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > >, signal_t*)#1}::operator()(std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > >, signal_t*) const::{lambda()#1}&&) at 0x9284b1 (rethinkdb)\r\n       28: void query_server_t::connection_loop<json_protocol_t>(linux_tcp_conn_t*, unsigned long, ql::query_cache_t*, signal_t*)::{lambda(std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > >, signal_t*)#1}::operator()(std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > >, signal_t*) const at 0x928ab2 (rethinkdb)\r\n       29: coro_pool_t<std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > > >::worker_run(std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > >, auto_drainer_t::lock_t) at 0x9266a4 (rethinkdb)\r\n       30: callable_action_instance_t<std::_Bind<std::_Mem_fn<void (coro_pool_t<std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > > >::*)(std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > >, auto_drainer_t::lock_t)> (coro_pool_t<std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > > >*, std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > >, auto_drainer_t::lock_t)> >::run_action() at 0x9261b4 (rethinkdb)\r\n       31: coro_t::run() at 0xbb13e8 (rethinkdb)\r\nerror: Exiting.\r\nTrace/breakpoint trap (core dumped)\r\n```"
  , issueState = "closed"
  , issueId = Id 73522614
  , issueComments = 5
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 505365
                , simpleUserLogin = N "danielmewes"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/505365?v=3"
                , simpleUserUrl = "https://api.github.com/users/danielmewes"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 0
          , milestoneNumber = 101
          , milestoneClosedIssues = 9
          , milestoneDescription = Just ""
          , milestoneTitle = "2.0.3"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/101"
          , milestoneCreatedAt = 2015 (-06) (-03) 19 : 26 : 22 UTC
          , milestoneState = "closed"
          }
  }