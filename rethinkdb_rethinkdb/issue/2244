Issue
  { issueClosedAt = Just 2014 (-08) (-22) 23 : 21 : 16 UTC
  , issueUpdatedAt = 2014 (-09) (-04) 04 : 50 : 17 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/2244/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/2244"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "02e10c"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:enhancement"
          , labelName = "tp:enhancement"
          }
      , IssueLabel
          { labelColor = "444444"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:performance"
          , labelName = "tp:performance"
          }
      ]
  , issueNumber = 2244
  , issueAssignee =
      Just
        SimpleUser
          { simpleUserId = Id 505365
          , simpleUserLogin = N "danielmewes"
          , simpleUserAvatarUrl =
              "https://avatars.githubusercontent.com/u/505365?v=3"
          , simpleUserUrl = "https://api.github.com/users/danielmewes"
          , simpleUserType = OwnerUser
          }
  , issueUser =
      SimpleUser
        { simpleUserId = Id 258437
        , simpleUserLogin = N "srh"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/258437?v=3"
        , simpleUserUrl = "https://api.github.com/users/srh"
        , simpleUserType = OwnerUser
        }
  , issueTitle =
      "Reduce level of pointer indirection in datum_t by 1."
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/2244"
  , issueCreatedAt = 2014 (-04) (-11) 15 : 54 : 59 UTC
  , issueBody =
      Just
        "Right now we pass around `counted_t<const datum_t>`.  Instead, we should pass around a `datum_t`, which should be implemented to have reference-counted pointees instead of raw pointers, in its union.  The number of pointer indirections involved would be affected for each type, depending on implementation:\n\n| type | before | after |\n| --- | --- | --- |\n| bool | 1 | 1 or 0 |\n| double | 1 | 1 or 0 |\n| string | 2 | 1 |\n| array (element access) | 3 | 2 or 1 |\n| object (element access) | 2 + yuck | 1 + yuck |\n\nOne way to implement this is by defining a `variadic_counted_ptr<T...>` type that looks like a `struct { int tag; void *ptr; }` in memory.  Then use a `variant_counted_ptr<bool, double, counted_wrapper<wire_string_t>, counted_wrapper<std::vector<datum_t> >, counted_wrapper<std::map<std::string, datum_t> > >`.   This is easy to do, but it means we'd be indirecting for bools and doubles.  (This type would also be able to replace our boost::variant uses -- and consider that boost::variant does on-heap allocation for assignment.)\n\nWe could also use boost::variant.  The problem is that assigning to one of these is a bit nuts -- it creates and destroys an on-heap backup copy, in the pursuit of exception safety.  We could also make our own variant implementation (or use a different one) that doesn't have the bad properties of boost::variant.  (Beware: it might also lack a good property like having correct structure alignment.)  It could also be used for our other variant types, reducing symbol overhead in debug builds.  Then we would use `our_variant<bool, double, counted_t<counted_wrapper<wire_string_t> >, counted_t<counted_wrapper<std::vector<datum_t> > >, counted_t<counted_wrapper<std::map<std::string, datum_t> > > >` to implement `datum_t`.\n\nApparently boost::variant can avoid the heap allocation if the type traits boost::has_nothrow_copy or boost::has_nothrow_constructor defined -- see [here](http://www.boost.org/doc/libs/1_55_0/doc/html/variant/design.html#variant.design.never-empty.optimizations).  So maybe that is an acceptable implementation.  The downside is compile times and symbol size overhead that you get with boost::variant.\n\nWe could also make a custom type for datum_t that is a little better designed, that looks like `struct { int tag; union { bool b; double d; counted_wire_string_t *s; counted_wrapper<std::vector<datum_t> > *a; counted_wrapper<std::map<std::string, datum_t> > *o; }; }`.\n"
  , issueState = "closed"
  , issueId = Id 31339047
  , issueComments = 20
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 1777134
                , simpleUserLogin = N "mlucy"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/1777134?v=3"
                , simpleUserUrl = "https://api.github.com/users/mlucy"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 0
          , milestoneNumber = 76
          , milestoneClosedIssues = 60
          , milestoneDescription = Just ""
          , milestoneTitle = "1.15"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/76"
          , milestoneCreatedAt = 2014 (-07) (-30) 21 : 42 : 02 UTC
          , milestoneState = "closed"
          }
  }