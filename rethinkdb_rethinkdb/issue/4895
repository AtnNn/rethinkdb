Issue
  { issueClosedAt = Just 2015 (-10) (-09) 20 : 47 : 23 UTC
  , issueUpdatedAt = 2015 (-10) (-09) 20 : 47 : 35 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4895/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/4895"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "444444"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/cp:build"
          , labelName = "cp:build"
          }
      , IssueLabel
          { labelColor = "e10c02"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/pr:high"
          , labelName = "pr:high"
          }
      ]
  , issueNumber = 4895
  , issueAssignee =
      Just
        SimpleUser
          { simpleUserId = Id 505365
          , simpleUserLogin = N "danielmewes"
          , simpleUserAvatarUrl =
              "https://avatars.githubusercontent.com/u/505365?v=3"
          , simpleUserUrl = "https://api.github.com/users/danielmewes"
          , simpleUserType = OwnerUser
          }
  , issueUser =
      SimpleUser
        { simpleUserId = Id 7431361
        , simpleUserLogin = N "larkost"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/7431361?v=3"
        , simpleUserUrl = "https://api.github.com/users/larkost"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "build problem on next with clang"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4895"
  , issueCreatedAt = 2015 (-09) (-28) 22 : 49 : 47 UTC
  , issueBody =
      Just
        "I am getting a build problem on next (1cd2122) on my local system (MacOS/clang), and it looks like it is a side-effect from @Tryneus's recent merge removing protobuffs:\r\n\r\n```\r\nsrc/rdb_protocol/response.cc:58:22: error: comparison of constant -1 with expression of type 'const Response::ResponseType' (aka 'const Response_ResponseType') is always true [-Werror,-Wtautological-constant-out-of-range-compare]\r\n    do { if (!(type_ != -1)) { do { report_fatal_error(\"src/rdb_protocol/response.cc\", 58, \"Guarantee\" \" failed: [\" \"type_ != -1\" \"] \"); (raise(5)); } while (0); } } while (0);\r\n               ~~~~~ ^  ~~\r\nsrc/rdb_protocol/response.cc:63:22: error: comparison of constant -1 with expression of type 'const Response::ResponseType' (aka 'const Response_ResponseType') is always true [-Werror,-Wtautological-constant-out-of-range-compare]\r\n    do { if (!(type_ != -1)) { do { report_fatal_error(\"src/rdb_protocol/response.cc\", 63, \"Guarantee\" \" failed: [\" \"type_ != -1\" \"] \"); (raise(5)); } while (0); } } while (0);\r\n               ~~~~~ ^  ~~\r\nsrc/rdb_protocol/response.cc:68:22: error: comparison of constant -1 with expression of type 'const Response::ResponseType' (aka 'const Response_ResponseType') is always true [-Werror,-Wtautological-constant-out-of-range-compare]\r\n    do { if (!(type_ != -1)) { do { report_fatal_error(\"src/rdb_protocol/response.cc\", 68, \"Guarantee\" \" failed: [\" \"type_ != -1\" \"] \"); (raise(5)); } while (0); } } while (0);\r\n               ~~~~~ ^  ~~\r\nsrc/rdb_protocol/response.cc:73:22: error: comparison of constant -1 with expression of type 'const Response::ResponseType' (aka 'const Response_ResponseType') is always true [-Werror,-Wtautological-constant-out-of-range-compare]\r\n    do { if (!(type_ != -1)) { do { report_fatal_error(\"src/rdb_protocol/response.cc\", 73, \"Guarantee\" \" failed: [\" \"type_ != -1\" \"] \"); (raise(5)); } while (0); } } while (0);\r\n               ~~~~~ ^  ~~\r\nsrc/rdb_protocol/response.cc:78:22: error: comparison of constant -1 with expression of type 'const Response::ResponseType' (aka 'const Response_ResponseType') is always true [-Werror,-Wtautological-constant-out-of-range-compare]\r\n    do { if (!(type_ != -1)) { do { report_fatal_error(\"src/rdb_protocol/response.cc\", 78, \"Guarantee\" \" failed: [\" \"type_ != -1\" \"] \"); (raise(5)); } while (0); } } while (0);\r\n               ~~~~~ ^  ~~\r\nsrc/rdb_protocol/response.cc:83:22: error: comparison of constant -1 with expression of type 'const Response::ResponseType' (aka 'const Response_ResponseType') is always true [-Werror,-Wtautological-constant-out-of-range-compare]\r\n    do { if (!(type_ != -1)) { do { report_fatal_error(\"src/rdb_protocol/response.cc\", 83, \"Guarantee\" \" failed: [\" \"type_ != -1\" \"] \"); (raise(5)); } while (0); } } while (0);\r\n               ~~~~~ ^  ~~\r\n6 errors generated.\r\n```"
  , issueState = "closed"
  , issueId = Id 108762137
  , issueComments = 6
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 505365
                , simpleUserLogin = N "danielmewes"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/505365?v=3"
                , simpleUserUrl = "https://api.github.com/users/danielmewes"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Just 2015 (-11) (-11) 08 : 00 : 00 UTC
          , milestoneOpenIssues = 0
          , milestoneNumber = 92
          , milestoneClosedIssues = 84
          , milestoneDescription = Just ""
          , milestoneTitle = "2.2"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/92"
          , milestoneCreatedAt = 2015 (-02) (-03) 22 : 18 : 37 UTC
          , milestoneState = "closed"
          }
  }