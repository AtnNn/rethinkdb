Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2016 (-04) (-29) 22 : 41 : 37 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5146/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/5146"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "207de5"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/cp:clustering"
          , labelName = "cp:clustering"
          }
      ]
  , issueNumber = 5146
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueTitle =
      "Explicitly encode delay before failing-over a primary?"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5146"
  , issueCreatedAt = 2015 (-11) (-24) 20 : 25 : 18 UTC
  , issueBody =
      Just
        "As far as my understanding goes, we unintentionally have some interactions in effect that make the combination of `write_acks=\"majority\"` and `read_mode=\"single\"` *often* provide stronger consistency semantics *in practice* than what one would expect.\r\n\r\nSpecifically we *usually* appear to maintain the guarantee that `read_mode=\"single\"` reads will not return *outdated* results in case of a network partition (they can still return uncommitted writes).\r\nThe reason for this is because of how the timing in case of a partition works out.\r\n\r\nConsider three replicas A, B, C, and the following events:\r\n\r\n1. A is primary\r\n2. Partition A from B, C\r\n3. As long as A doesn't realize that the connections are interrupted, it will keep replying to single reads.\r\n4. However since both sides of the partition use the same heartbeat timeout, B, C will also not realize that the connection to A is lost. Hence they will not initiate a failover to select a new primary on their side of the net split.\r\n5. Once the heartbeat timeout is reached, A is going to stop serving single reads because it realizes that it's on the minority side of a partition.\r\n6. At approximately the same time (this is important!), B, C will realize that the primary is gone, and will start determining a new one. However bringing up a new primary takes a bit of extra time, so this will typically complete \8203*strictly after*\8203 step 5.\r\n7. The new primary selected among B, C starts accepting majority writes.\r\n\r\nThe important property here is that A stops serving `read_mode=\"single\"` reads *before* the new primary among B, C starts accepting new writes.\r\n\r\nAs far as I know this behavior was not explicitly intended, but it turns out to be quite useful (even though it's timing sensitive, so we can't fully rely on it).\r\n\r\nI wonder if we should add an *explicit* delay before bringing up the new primary in step 6. That way we will be less likely to unintentionally remove this useful behavior in the future.\r\n\r\nI do *not* propose to document and/or market this in any way, since it's clearly unstable. Delays due to VM pauses etc. aside, there are also all kinds of corner cases where the connection gets terminated before the common heartbeat timeout on one side of the partition but not the other (e.g. the operating system might realize that the connection got lost before the heartbeat timeout is reached, or the network drops most but not all packages, etc.).\r\n\r\nPinging @VeXocide and @timmaxw for comments."
  , issueState = "open"
  , issueId = Id 118695752
  , issueComments = 0
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 882
          , milestoneNumber = 2
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone are not an immediate priority, and will be periodically revisited. When we decide to work on an issue in backlog, we'll move it to next."
          , milestoneTitle = "backlog"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/2"
          , milestoneCreatedAt = 2012 (-11) (-11) 14 : 16 : 11 UTC
          , milestoneState = "open"
          }
  }