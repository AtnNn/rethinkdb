IssueComment
  { issueCommentUpdatedAt = 2014 (-10) (-13) 20 : 28 : 52 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 552910
        , simpleUserLogin = N "Tryneus"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/552910?v=3"
        , simpleUserUrl = "https://api.github.com/users/Tryneus"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/58949917"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2885#issuecomment-58949917"
  , issueCommentCreatedAt = 2014 (-10) (-13) 20 : 28 : 52 UTC
  , issueCommentBody =
      "@wojons and @neumino, thanks for bringing up these concerns, I'll try to address them here:\r\n\r\n* Having running totals of stats is fine in the `server_stats` table, but if we expose running totals in `table_stats`, there will be discontinuities if a server ever leaves/rejoins the cluster.  For this reason, I think table stats should only be active and per-second totals (summed from all servers), while server stats can also include totals since the launch of the process.\r\n\r\n* A lot of these stats are wishful thinking and may be too difficult to implement in a platform-agnostic manner.  That said, we are deciding on the structure we want stats to have so we can add these things later (in `reql-admin-polish`).  The cpu, memory, and network stats fall under this.\r\n\r\n> [...] for debugging reasons there should be a API call or command that restarts the running total's and sets them back to 0 [...]\r\n\r\nIf we want to provide a way to clear running totals, I propose allowing a delete of the table stats, like `r.db('rethinkdb').table('server_stats').get(<SERVER>).delete()`.\r\n\r\n> I was noticing that there are some stats that were in the table stats that were removed that related to extends, index blocks garbage collector, I find those all super useful stats to know what is going on per table.\r\n\r\nWe can add these back in, I omitted them to avoid giving too much information to users.  If we do give these kinds of stats to users, they would probably need to be per-server to avoid the discontinuities mentioned above.\r\n\r\n> What is network.cluster_latency_ms?  The average latency to other servers in the cluster?\r\n\r\nYes.  We currently don't have tracking for this, but it shouldn't be too hard to get it.  This is wishlist stuff and will not be in the first draft.\r\n\r\n> More stats mean more intra cluster traffic.\r\n\r\nMy biggest concern here is any stat that is both per-server and per-table.  For example, the `server_stats.disk.tables` and `server_stats.memory.tables` arrays would bloat up stats quite a bit on clusters with a large number of tables.  We may take some measures to make stats requests more efficient, such as only returning the subset of stats that are requested rather than the entire row.  This would require some more work on the `artificial_table_t` interface.  In any case, the Web UI should be able to pluck/reduce stats to just the information needed and keep browser <=> cluster traffic to a minimum.\r\n\r\n> We should somehow be able to report timeouts.\r\n\r\nWe could have a `timeout` field in the server stats row with a BOOL value.  If the request timed out, this is set to true (and the rest of the stats are not included), or it is false.  We shouldn't throw an error here, and I don't see another way to communicate a timeout to the user other than inline with the data.\r\n\r\n> What happens if a server is down? Do we report it with special values, or just drop it?\r\n\r\nWith how we're handling server membership in the cluster, I don't think we will have any special handling for a down server, it will just be omitted from the results.\r\n\r\n> Should we keep a short history? The time at which the stats were computed? Let users retrieve the stats for last second/minute/hour/day?\r\n\r\nI don't think this is feasible to track.  Existing perfmons don't give us a way to store history, and the memory requirements would be difficult to manage.  Stats are collected on-demand, though they are continuously 'computed'.\r\n\r\n> Note that getting the number of disk reads/writes for all tables at the same time is a bit cumbersome.\r\n\r\nI agree this results in a rather nasty query, and that #2708 would simplify this a lot.  Note that getting the rows read/written (rather than disk reads/writes) would be much simpler."
  , issueCommentId = 58949917
  }