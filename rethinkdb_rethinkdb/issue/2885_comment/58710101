IssueComment
  { issueCommentUpdatedAt = 2014 (-10) (-10) 20 : 16 : 03 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 552910
        , simpleUserLogin = N "Tryneus"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/552910?v=3"
        , simpleUserUrl = "https://api.github.com/users/Tryneus"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/58710101"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2885#issuecomment-58710101"
  , issueCommentCreatedAt = 2014 (-10) (-10) 20 : 14 : 33 UTC
  , issueCommentBody =
      "Good wishlist, I think a few things are infeasible, but most can be incorporated.  A few comments:\r\n\r\n> Ideally we would show how much of these resources are being used by RethinkDB, how much are used by non-RethinkDB processes/files on the same server, and (for memory and disk space) how much is available total.\r\n\r\nI don't think we should be tracking usage by things other than RethinkDB.  These stats should be for service-monitoring, not server-monitoring.  If users want that information, they should use real server monitoring tools, which we shouldn't be trying to compete with.\r\n\r\n>  CPU usage can be broken down by which activity is consuming the CPU.\r\n\r\nI think this would be prohibitively expensive to track, and would involve a lot of work, but perhaps it could be done.\r\n\r\n> We'd have to think about how to handle multiple disks.\r\n\r\nDo we officially support multiple disks on a single server?  I can imagine a user could use a work-around to make this work, but I think we should just report the disk used by the `rethinkdb_data` directory.\r\n\r\n> 50th/90th/99th percentile latencies\r\n\r\nIs this feasible to calculate in a moving window, or would this be for the entire lifetime of the cluster?  In particular, I don't think it's feasible to give this at a cluster level unless we're averaging these values across the cluster, which is incorrect/misleading.  As for giving these values for individual tables, it would be pretty difficult to categorize queries in that way, and we're probably better off giving per-server statistics like this.\r\n\r\n--------\r\n\r\nHere are updated proposals for the stats tables.  I tried to incorporate as much as I could.  This is a wishlist at the moment, but it should still be practical.\r\n\r\n#### server_stats\r\n* Added `memory`, `cpu`, and `network` fields\r\n* Added disk usage per-table\r\n* `memory.tables[n].used_bytes` would be the cache size in bytes for that table on the given server\r\n* `disk.tables[n].used_bytes` would be the size of the table file on the given server\r\n* Renamed `ops_running` to `active_queries` and added `queries_per_sec`, `total_queries`, and `query_duration_ms`\r\n```\r\n{\r\n  \"id\": <UUID>,\r\n  \"name\": <STRING>,\r\n  \"coroutines\": {\r\n    \"active\": <NUMBER>,\r\n    \"allocated\": <NUMBER>\r\n  },\r\n  \"query_language\": {\r\n    \"queries_per_sec\": <NUMBER>,\r\n    \"active_queries\": <NUMBER>,\r\n    \"total_queries\": <NUMBER>,\r\n    \"query_duration_ms\": {\r\n      \"50_percentile\": <NUMBER>,\r\n      \"90_percentile\": <NUMBER>,\r\n      \"99_percentile\": <NUMBER>\r\n    }\r\n  },\r\n  \"disk\": {\r\n    \"tables\": [ {\r\n      \"db\": <STRING>,\r\n      \"table\": <STRING>,\r\n      \"table_id\": <STRING>,\r\n      \"used_bytes\": <NUMBER>,\r\n      \"reads_per_sec\": <NUMBER>,\r\n      \"writes_per_sec\": <NUMBER> }, ...\r\n    ],\r\n    \"used_bytes\": <NUMBER>,\r\n    \"free_bytes\": <NUMBER>,\r\n    \"total_bytes\": <NUMBER>,\r\n    \"reads_per_sec\": <NUMBER>,\r\n    \"writes_per_sec\": <NUMBER>\r\n  },\r\n  \"memory\": {\r\n    \"tables\": [ {\r\n      \"db\": <STRING>,\r\n      \"table\": <STRING>,\r\n      \"table_id\": <UUID>,\r\n      \"used_bytes\": <NUMBER> }, ...\r\n    ],\r\n    \"used_bytes\": <NUMBER>,\r\n    \"free_bytes\": <NUMBER>,\r\n    \"total_bytes\": <NUMBER>,\r\n    \"active_swap\": <BOOL>\r\n  },\r\n  \"cpu\": {\r\n    \"cores\": [ {\r\n      \"usage\": <NUMBER>\r\n    } ],\r\n    \"usage\": <NUMBER>\r\n  },\r\n  \"network\": {\r\n    \"cluster_latency_ms\": <NUMBER>,\r\n    \"intracluster\": {\r\n      \"sent_bytes\": <NUMBER>,\r\n      \"received_bytes\": <NUMBER>,\r\n      \"active_connections\": <NUMBER>,\r\n      \"total_connections\": <NUMBER>\r\n    },\r\n    \"clients\": {\r\n      \"sent_bytes\": <NUMBER>,\r\n      \"received_bytes\": <NUMBER>,\r\n      \"active_connections\": <NUMBER>,\r\n      \"total_connections\": <NUMBER>\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n#### table_stats\r\n* Combined all per-server stats into one representation - this means we won't track totals to avoid discontinuities when servers leave/rejoin the cluster.  Now table disk usage will be tracked per-server in the server stats.\r\n* Each index is given in the `indexes` dict by name, since they are guaranteed to be unique\r\n* Added number of reads/writes active on a given index\r\n* Added the count of rows in a given index - for the primary key, this will be equivalent to `table.count`\r\n```\r\n{\r\n  \"id\": <UUID>,\r\n  \"name\": <STRING>,\r\n  \"primary_key\": <STRING>\r\n  \"indexes\": {\r\n    <name>: {\r\n      \"rows\": <NUMBER>,\r\n      \"reads_per_sec\": <NUMBER>,\r\n      \"reads_active\": <NUMBER>,\r\n      \"writes_per_sec\": <NUMBER>,\r\n      \"writes_active\": <NUMBER>\r\n    }\r\n  },\r\n  \"disk\": {\r\n    \"reads_per_sec\": <NUMBER>,\r\n    \"reads_active\": <NUMBER>,\r\n    \"writes_per_sec\": <NUMBER>,\r\n    \"writes_active\": <NUMBER>\r\n  }\r\n}\r\n```"
  , issueCommentId = 58710101
  }