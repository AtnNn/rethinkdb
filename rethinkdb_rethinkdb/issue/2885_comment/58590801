IssueComment
  { issueCommentUpdatedAt = 2014 (-10) (-09) 23 : 01 : 27 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 552910
        , simpleUserLogin = N "Tryneus"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/552910?v=3"
        , simpleUserUrl = "https://api.github.com/users/Tryneus"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/58590801"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2885#issuecomment-58590801"
  , issueCommentCreatedAt = 2014 (-10) (-09) 22 : 56 : 24 UTC
  , issueCommentBody =
      "To get the ball rolling on a stats proposal, I'll first give an example of what stats we currently provide, and then discuss which ones I think are worthwhile to have in the ReQL stats tables.  I am trying to keep modification of existing perfmons to a minimum, new stats can be handled later.\r\n\r\n------\r\n\r\n#### Server stats:\r\n```\r\n{\r\n  <table id>: <server-specific table stats>,\r\n  \"active_coroutines\": \"27\",\r\n  \"allocated_coroutines\": \"162\",\r\n  \"auth_metadata\": <auth metadata stats>,\r\n  \"connectivity\": {\r\n    <peer id>: {\r\n      \"bytes_sent\": <avg, min, max, per_sec>\r\n    },\r\n  },\r\n  \"eventloop\": {\r\n    \"active_count\": \"25\",\r\n    \"recent_duration\": <avg, min, max, per_sec>\r\n    \"total\": \"228389\"\r\n  },\r\n  \"metadata\": <metadata stats>,\r\n  \"proc\": {\r\n    \"pid\": \"5897\",\r\n    \"timestamp\": \"1970-03-03T14:38:37.693120425\",\r\n    \"uptime\": \"108\",\r\n    \"version\": \"1.15.1-131-g03bdaf-dirty\"\r\n  },\r\n  \"query_language\": {\r\n    \"ops_running\": \"0\"\r\n  },\r\n  \"sys\": {\r\n    \"global_disk_space_free\": \"141864062976\",\r\n    \"global_disk_space_total\": \"239939149824\",\r\n    \"global_disk_space_used\": \"98075086848\"\r\n  }\r\n}\r\n```\r\n\r\n* `metadata` and `auth_metadata` are fairly useless as far as stats go, high-performance is not nearly as critical on these structures and the stats provided are fairly inscrutable to an end-user\r\n* The info in `proc` is not so much a `stat` value as a `status` value and should be available in `server_status` or not at all\r\n* `connectivity` is rather useless as it is currently given - this shows the stats by peer ID, which will change when servers are restarted, and can be very hard for a user to decypher\r\n* It should be noted that `/ajax/stat` returned all values as strings, even if they were integers or floats, we should fix this in ReQL stats.\r\n* The `event_loop` stats seem pretty meaningless, so I don't see a reason to include them\r\n\r\nProposed format for a `server_stats` row:\r\n```\r\n{\r\n  \"id\": <UUID>, // The ID of the requested server\r\n  \"name\": <STRING>, // The name of the requested server\r\n  \"coroutines\": {\r\n    \"active\": <NUMBER>,\r\n    \"allocated\": <NUMBER>\r\n  },\r\n  \"query_language\": {\r\n    \"ops_running\": <NUMBER>\r\n  },\r\n  \"disk\": {\r\n    \"used_bytes\": <NUMBER>,\r\n    \"free_bytes\": <NUMBER>,\r\n    \"total_bytes\": <NUMBER>\r\n  }\r\n}\r\n```\r\n\r\n------\r\n\r\n#### Table stats (per server):\r\n```\r\n{\r\n  \"regions\": {\r\n    <role_1>...<role_n>: <role stats>\r\n  },\r\n  \"serializers\": {\r\n  \"disk\": {},\r\n  \"serializer\": {\r\n    \"serializer_block_reads\": {\r\n      \"active_count\": \"0\",\r\n      \"recent_duration\": <avg, min, max, per_sec>,\r\n      \"total\": \"43\"\r\n    },\r\n    \"serializer_block_writes\": \"56\",\r\n    \"serializer_bytes_in_use\": \"12582912\",\r\n    \"serializer_data_extents\": \"1\",\r\n    \"serializer_data_extents_allocated\": \"0\",\r\n    \"serializer_data_extents_gced\": \"0\",\r\n    \"serializer_extents_in_use\": \"6\",\r\n    \"serializer_index_reads\": \"10\",\r\n    \"serializer_index_writes\": {\r\n      \"active_count\": \"0\",\r\n      \"recent_duration\": <avg, min, max, per_sec>,\r\n      \"total\": \"40\"\r\n    },\r\n    \"serializer_index_writes_size\": <avg, min, max>,\r\n    \"serializer_lba_extents\": \"4\",\r\n    \"serializer_lba_gcs\": \"0\",\r\n    \"serializer_old_garbage_block_bytes\": \"0\",\r\n    \"serializer_old_total_block_bytes\": \"0\"\r\n  },\r\n  \"shard_0\"...\"shard_7\": {\r\n    \"btree-primary\": {\r\n      \"keys_read\": \"0.00000000\",\r\n      \"keys_set\": \"0.00000000\",\r\n      \"total_keys_read\": \"0\",\r\n      \"total_keys_set\": \"6\"\r\n    },\r\n    <btree-index-x>...<btree-index-y>: {\r\n      \"keys_read\": \"0.00000000\",\r\n      \"keys_set\": \"0.00000000\",\r\n      \"total_keys_read\": \"0\",\r\n      \"total_keys_set\": \"6\"\r\n    },\r\n    \"cache\": {}\r\n  }\r\n}\r\n```\r\n\r\n* The `cache` and `disk` fields never contain any child perfmons, so no reason to include those\r\n* Since these stats are collected per-server, we could present them at server-level, cluster-level, or both.\r\n  * Because stats are not persistent, shutting down a server would result in strange-looking behavior in cluster-level stats.\r\n* It would be impossible using these stats to give them per real-keyspace-region, as these shards do not line up with real-keyspace-regions. Therefore, it needlessly complicates things to show stats per hash shard, and these should be aggregated into one object.\r\n* The role stats may not be worth including.  Their existence depends on the individual roles of each server in the blueprint, but the only stat I've seen is the `broadcast_queue_count` of `be_primary` roles.\r\n* In `serializer`, we provide stats for both block reads and index reads - is it actually useful to have both?\r\n\r\nProposed format for a `table_stats` row:\r\n```\r\n{\r\n  \"servers\": [{\r\n    \"id\": <UUID>, // The ID of the server these stats are from\r\n    \"name\": <STRING>, // The name of the server these stats are from\r\n    \"indexes\": {\r\n      <name>: { // The name of the index\r\n        \"reads_per_sec\": <NUMBER>\r\n        \"writes_per_sec\": <NUMBER>\r\n        \"total_reads\": <NUMBER>\r\n        \"total_writes\": <NUMBER>\r\n      }\r\n    },\r\n    \"serializer\": {\r\n      \"file\": {\r\n        \"total_bytes\": <NUMBER>,\r\n        \"data_bytes\": <NUMBER>,\r\n        \"lba_bytes\": <NUMBER>\r\n      }, \r\n      \"reads\": {\r\n        \"active\": <NUMBER>,\r\n        \"per_sec\": <NUMBER>,\r\n        \"total\": <NUMBER>\r\n      },\r\n      \"writes\":\r\n        \"active\": <NUMBER>,\r\n        \"per_sec\": <NUMBER>,\r\n        \"total\": <NUMBER>\r\n    }\r\n  }, ... ]\r\n}\r\n```\r\n\r\n-------\r\n\r\nThe available interface for these tables is nothing special, they should work just like the existing `table_config` or `server_config` tables.  Under the hood we will still be doing cross-cluster stats requests, just like with the old `/ajax/stat`.\r\n\r\nFinal thoughts:\r\n* Full perfmons may still be accessible through a debug table.\r\n* We will be doing some math to the perfmon data to get the `serialzer.file` info for `table_stats`, but I think it is much more user-friendly than giving extent counts.\r\n* The current perfmons do not give us the name of the primary index - passing this information down might turn out to be tricky, haven't looked into it yet.\r\n* I think the `server_stats` `query_language` field should be extended in the future, there's a lot of stuff we could put in there that users would be excited about seeing (e.g. #2989).\r\n* Giving the `table_stats` `servers` field as an array kind of sucks, but I think it's better than a dict indexed by uuid (really scary to new users) or by name (possibility of collisions).  If we can make name collisions impossible, I might be ok with a dict indexed by server name.\r\n* It would be nice if the `table_stats` index reads/writes were formatted the same as the `serializer` reads/writes, with `active`, `per_sec`, and `total`, but that would require reorganizing the perfmons a bit, I'm not sure if we're trying to avoid that.\r\n* I am open to any renaming, including, or excluding of these fields, please discuss. "
  , issueCommentId = 58590801
  }