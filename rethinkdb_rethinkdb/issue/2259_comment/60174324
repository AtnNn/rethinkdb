IssueComment
  { issueCommentUpdatedAt = 2014 (-10) (-22) 23 : 54 : 56 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/60174324"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2259#issuecomment-60174324"
  , issueCommentCreatedAt = 2014 (-10) (-22) 23 : 54 : 56 UTC
  , issueCommentBody =
      "Out of those `ready_for='completely'` sound a little weird.\r\nI think renaming the `ready_completely` one would both here and in `table_status` would be good, since it's not clear what it means as it is now.\r\nSpontaneously I would say it should be called `all_replicas_up`.\r\nThat wouldn't work for the `ready_for` flag here, but would work nicely with `wait_for`.\r\nI agree that it's a little verbose, but I'm not sure if that's really a problem.\r\n\r\nThe use cases I can think of would all work best with `ready_for_writes` as the default. That is what I would expect from `table_wait`, and I don't see a strong reason for why you would want to wait for all replicas to catch up.\r\nNote that `table_wait` is something that at least some people are going to use in their applications to ensure that a table is available before firing queries at it. The `completely` status seems like it's only relevant for operational/administrative uses, but not for an app."
  , issueCommentId = 60174324
  }