IssueComment
  { issueCommentUpdatedAt = 2015 (-05) (-30) 07 : 08 : 43 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 572196
        , simpleUserLogin = N "stuartpb"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/572196?v=3"
        , simpleUserUrl = "https://api.github.com/users/stuartpb"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/106998583"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/4026#issuecomment-106998583"
  , issueCommentCreatedAt = 2015 (-05) (-30) 07 : 00 : 39 UTC
  , issueCommentBody =
      "It allows for the cleanest code, until you need *another* thing in your promise scope (such as the results from a previous operation), at which point you're in the same predicament regarding *that* value.\r\n\r\nThe problem of disappearing values is an inherent issue with the promise model of separate scopes: @neumino is right that Bluebird's `.bind()` is the most flexible solution to avoid nesting (that is, until you interface with a function using a *differently* extended promise implementation, in which case *nothing* is going to let you work around needing an actual nested scope, apart from the ES6 `await` keyword that really just hides the nested scope in a layer of syntactic sugar)."
  , issueCommentId = 106998583
  }