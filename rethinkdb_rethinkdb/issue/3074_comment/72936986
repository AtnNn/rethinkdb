IssueComment
  { issueCommentUpdatedAt = 2015 (-02) (-04) 20 : 55 : 42 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/72936986"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3074#issuecomment-72936986"
  , issueCommentCreatedAt = 2015 (-02) (-04) 20 : 55 : 42 UTC
  , issueCommentBody =
      "I'm thinking of this more as a way to replicate the `generated_keys` functionality in a way that's consistent with how changes are used elsewhere.  I think that if someone wants to know which keys were updated, which were deleted, and which were inserted, it would be OK to just tell them to use `return_changes` (possibly with some ReQL code after `changes` to strip out the things they don't care about and save on network traffic).\r\n\r\nIf we think of the goal as being \"replace `generated_keys` functionality in a way that's consistent with other changes\", I think I still like setting `changes` to an array of keys that were modified  It lets people who were using `generated_keys` easily update their existing code (they just have to access the `changes` field instead of the `generated_keys` field, and it's in the same format), and it lets us keep our existing rule of never sending trivial changes (otherwise people might start wondering whether they have to handle trivial changes in other places, and how to turn them off to save network traffic, and...)."
  , issueCommentId = 72936986
  }