IssueComment
  { issueCommentUpdatedAt = 2015 (-02) (-04) 01 : 16 : 37 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/72767205"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3074#issuecomment-72767205"
  , issueCommentCreatedAt = 2015 (-02) (-04) 00 : 32 : 47 UTC
  , issueCommentBody =
      "What exactly would we return for `return_changes = \"keys\"`?\r\n\r\nCurrently we return an array of objects `{new_val: <new value>, old_val: <old value>}` if `return_changes == true`.\r\nShould we then return `{new_val: <old pkey>, old_val: <new pkey>}` or something like\r\n`{new_val: {<pkey fieldname>: <old pkey>}, old_val: {<pkey fieldname>: <new pkey>}}`?\r\n\r\nThe second option would be as if `pluck(<pkey fieldname>)` had been applied on the `new_val` and `old_val` fields, while the former would be like a `getField`.\r\n\r\nI think I would prefer the slightly more compact `{new_val: <old pkey>, old_val: <new pkey>}` option.\r\n\r\nYet another alternative could be to just return an array of the new primary keys, since an `update` cannot change the primary key anyway. This is the most compact representation, but less consistent with `return_changes = true`."
  , issueCommentId = 72767205
  }