IssueComment
  { issueCommentUpdatedAt = 2015 (-02) (-04) 19 : 47 : 21 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/72924634"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3074#issuecomment-72924634"
  , issueCommentCreatedAt = 2015 (-02) (-04) 19 : 47 : 02 UTC
  , issueCommentBody =
      "Deprecating `generated_keys` and introducing the new `return_changes` variant with 2.0 sounds like a good idea.\r\n\r\n@mlucy If we omit `old_val` / `new_val`, we should think about whether that makes sense in case of a `replace` where some documents are deleted (by replacing them with `null`) and others are updated. I hadn't thought about that before, but I actually think returning trivial changes with `old_val` and `new_val` being the same is less of an issue in this specific case. Having `old_val` and `new_val` has the benefit of being able to very clearly distinguish deleted, updated and inserted documents.\r\n\r\nI would also be ok with omitting updated documents in the changes. So we would only put keys into `new_val` if a document is inserted (analogue to what generated_keys does, except that we also report keys if they are not auto-generated), and we would only put keys into `old_val` if a document is deleted. On a pure update/replacement changes would be empty if `return_changes == \"keys\"`."
  , issueCommentId = 72924634
  }