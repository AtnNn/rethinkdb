IssueComment
  { issueCommentUpdatedAt = 2013 (-04) (-04) 20 : 11 : 35 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/15920774"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/602#issuecomment-15920774"
  , issueCommentCreatedAt = 2013 (-04) (-04) 20 : 11 : 35 UTC
  , issueCommentBody =
      "I have to agree with @jdoliner . I would find it very strange to have different indexes on a table being presented as if they were different table objects. It is an interesting idea and certainly worth thinking about, but it would really need some getting used to.\r\n\r\nMy way of thinking is certainly influenced heavily by how it works in SQL (seeing an index as an accelerator for operations), but I think that SQL is actually a good design in this respect.\r\n\r\nOn the downside, there might be effects of using an index which go further than accelerating just a single operation. For example, if you use an index in SQL to perform a \"between\" operation, and then sort the result by the same field, the sorting in many database systems becomes a no-op, because the index already guarantees the correct order. Could something like this ever be the case in RethinkDB?\r\nIf any such exist, the table().index().... semantics would represent such subtleties better I think.\r\n\r\nAlso, I feel like the table().index() approach would make it more difficult to add an optimizer to RethinkDB in the future, while keeping a clean and consistent QL interface. But I might just not understand it well enough."
  , issueCommentId = 15920774
  }