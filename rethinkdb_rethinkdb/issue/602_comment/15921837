IssueComment
  { issueCommentUpdatedAt = 2013 (-04) (-04) 20 : 31 : 27 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 43867
        , simpleUserLogin = N "jdoliner"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/43867?v=3"
        , simpleUserUrl = "https://api.github.com/users/jdoliner"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/15921837"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/602#issuecomment-15921837"
  , issueCommentCreatedAt = 2013 (-04) (-04) 20 : 31 : 27 UTC
  , issueCommentBody =
      ">  On the downside, there might be effects of using an index which go further than accelerating just a single operation. For example, if you use an index in SQL to perform a \"between\" operation, and then sort the result by the same field, the sorting in many database systems becomes a no-op, because the index already guarantees the correct order. Could something like this ever be the case in RethinkDB?\r\n\r\nI can't off the top of my head think of a case like this in RethinkDB because of its sharded nature it's much more efficient not to sort things unless we're specifically asked to. So `order_by` at this point is basically never a no-op. (Unless of course you did it twice in a row but we don't currently optimize that.) On the other hand I'm not sure I fully grasp what you mean by \"something like this\" what would be some other things in this category?"
  , issueCommentId = 15921837
  }