IssueComment
  { issueCommentUpdatedAt = 2014 (-07) (-10) 07 : 15 : 42 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/48572427"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2663#issuecomment-48572427"
  , issueCommentCreatedAt = 2014 (-07) (-10) 07 : 15 : 42 UTC
  , issueCommentBody =
      "> we decide what we want an ack to be for? When we create a new secondary, should we automatically add an ack? Should we force an ack to be on a certain server? Which would to some extend simulate #2119 Or should we automatically max out the value for ack? And not show it on the high level API? And also what is a replica for? Is the master going to send forward queries in a round-robin fashion like it used to? Or is it solely for the purpose of having a backup?\r\n\r\nHaving thought about this, I think we should leave the entire ack/master/replica semantics completely as is, with one major exception -- I think we should take out the ack specification from the cluster configuration of a table completely. Like durability settings, I think this is something that should be defined on a given write query and have a safe configuration by default. I think there is no reason to store this data in the table cluster configuration itself. We can always add it back to the table cluster configuration later if people want it, but I don't expect they will."
  , issueCommentId = 48572427
  }