IssueComment
  { issueCommentUpdatedAt = 2015 (-10) (-07) 07 : 57 : 37 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/146105283"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/4785#issuecomment-146105283"
  , issueCommentCreatedAt = 2015 (-10) (-07) 07 : 55 : 19 UTC
  , issueCommentBody =
      "@danielmewes asked me to comment on the proposal.\r\n\r\nI think we should adopt the following high level design goals for the first implementation:\r\n\r\n- Do the minimum possible amount of work (but no less) to support the WebUI and GraphQL as plugins. We should shoot to get a v1 plugin implementation in a month or so.\r\n- Don't get mired in various complexities. We can evolve and extend the system later on as the demands become more clear.\r\n- Build as much as we can on top of existing, commonly used infrastructure (i.e. `npm`)\r\n\r\nHere is some more specific feedback on a couple of key issues:\r\n\r\n- Don't worry about centralized/clustered plugin installs or turning plugins on/off at runtime for now. Let the setup/startup phase happen on per-server basis (tl;dr: I agree with Daniel's proposal wrt this).\r\n- I wouldn't do domain sockets for v1. I agree with @mlucy's comment -- we should just give the plugin what it needs to connect (either give it the host/port/auth key, or ideally just pass it a connection object we set up for it).\r\n- I think for installation, upgrades, etc. we should shell out to `npm`. Essentially our commands would be porcelain over `npm`. I think we should do it for two reasons. Firstly, they already do a great job with version management, and we don't want to write our own. Secondly, plugins *will* depend on many libraries, and `npm` already manages dependencies really well.\r\n- I'm not 100% sure whether we should bundle node with RethinkDB, or rely on the host. The problem with relying on the host is that when users first install RethinkDB, they'll *need* to install node for the WebUI to work, which would be a terrible user experience (we can make node a dependency on linux/brew, but probably not on OSX via a dmg unless we bundle it). Also, the plugins that ship out of the box might break on the user's version of node. I'm leaning toward shipping our own version of node, but allowing the user to point RethinkDB to the version on the host if they want to go that route.\r\n- :+1: for adding `active_plugins` field to `r.db('rethinkdb).table('server_status')`.\r\n- I think for v1 we shouldn't prescribe where the plugins will store the data. We can't enforce this until we ship a permission system anyway, and by then we'll have a much better idea of the tradeoffs. The WebUI plugin won't need to store any data anyway, and for GraphQL we'll figure out where to store relevant configuration data as we develop it (it may be a file, or it may be a table; I think v1 plugin infrastructure should have nothing to say about that, and we'll develop the first pass at a convention in the GraphQL plugin).\r\n\r\n__Command line args for plugins__\r\n\r\nI think we should maintain our existing command line args for the webui, and I think we can make it generic. During startup each plugin will tell rethinkdb whether it's on or off by default, and how to turn it off. So the webui will say it's on by default, and you turn it off via `--no-http-admin`. GraphQL will tell rethinkdb it's off by default, and you turn it on via `--graphql`. Each plugin will also expose a set of command line args it accepts (e.g. for port management).\r\n\r\nI'm not entirely sure how to integrate port offsets into this, but it should be possible (e.g. the plugin can tell rethinkdb that a particular command line arg it wants is a port, and port offset will be added to all of those).\r\n\r\n__Command line API__\r\n\r\nI think we should avoid the name plugins (that's so 90s) and call them extensions. I propose the following CLI API (slightly different from Daniel's proposal; I think mine is better :grin:):\r\n\r\n```\r\n# install an extension (via an npm package)\r\n$ rethinkdb extend --install rdb-falcor\r\n\r\n# install a non-extension\r\n$ rethinkdb extend --install random-node-package\r\nERROR: not a RethinkDB extension\r\n\r\n# list installed extensions\r\n$ rethinkdb extend --list\r\nrdb-graphql\r\nrdb-falcor\r\nrdb-admin-ui\r\n\r\n# Help for the command\r\n$ rethinkdb extend --help\r\nPRINTS HELP HERE\r\n\r\n# Help for the plugin\r\n$ rethinkdb extend --help rdb-admin-ui\r\nPRINTS HELP GENERATED BY EXTENSION HERE\r\n\r\n# Remove a extension\r\n$ rethinkdb extend --remove rdb-admin-ui\r\n\r\n# Turn extensions on/off on startup (note, no `extend`)\r\n$ rethinkdb --no-http-admin --graphql\r\n```\r\n\r\nHow's this lookin'?"
  , issueCommentId = 146105283
  }