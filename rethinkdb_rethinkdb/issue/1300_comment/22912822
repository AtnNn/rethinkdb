IssueComment
  { issueCommentUpdatedAt = 2013 (-08) (-19) 23 : 38 : 13 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 646357
        , simpleUserLogin = N "wmrowan"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/646357?v=3"
        , simpleUserUrl = "https://api.github.com/users/wmrowan"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/22912822"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1300#issuecomment-22912822"
  , issueCommentCreatedAt = 2013 (-08) (-19) 23 : 38 : 13 UTC
  , issueCommentBody =
      "I know people ain't keen when I get to philosophizin', but heck, here it goes.\r\n\r\nSo far, for the most part, we've relied on taking a least common denominator approach to integrating ReQL into host languages. When a potential ReQL feature isn't supported in one of our host languages either drop the feature or drop the language. We've done a little bit of both with dates already but the feature is more resistant to this approach than others we've so far had the courage to deal with. Date support is all over the map, we were never going to find a least common denominator amongst ruby, js, and python, let alone the universe of likely host languages.\r\n\r\nWe were always going to get to this point and it was never going to be pretty. For RethinkDB to continue to become more useful, it's feature set was going to have to evolve beyond the limited types and functionality of our host languages. For this to happen, it is my belief that we would eventually have to draw a line between ReQL and host language. Moving between the two worlds would then require explicit marshalling across the line, forcing users to acknowledge the tradeoffs. I know that this is not a view that is shared by most of you because it is not perceived of as user friendly, but I contend that the alternatives, limiting our feature set (what we've done so far) or introducing nasty behavior like this (we now seem to have gotten into this phase), are worse.\r\n\r\nReQL dates contain more information than JS dates. There's no automatic conversion between the two that makes sense, only one that is less bad. Doing it the \"right\" way (in my view) would require creating a JS wrapper for ReQL time objects  to which you may explicitly marshal a JS date if you provide the missing information (intended timezone offset) or which you may marshal to a JS date explicitly, knowing that you are throwing information away.\r\n\r\nAnyway, that's my two cents, for what it's worth."
  , issueCommentId = 22912822
  }