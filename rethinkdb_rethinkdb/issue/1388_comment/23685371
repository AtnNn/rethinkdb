IssueComment
  { issueCommentUpdatedAt = 2013 (-09) (-03) 01 : 34 : 08 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/23685371"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1388#issuecomment-23685371"
  , issueCommentCreatedAt = 2013 (-09) (-03) 01 : 34 : 08 UTC
  , issueCommentBody =
      "I think we'll eventually need to add a \"long-running query\" API that looks roughly like this (this isn't well thought out):\r\n\r\n* `get_long_running(N)` => array of query ids/tokens, queries themselves (no idea how to do that), and some stats on them (though that might be a separate call); where queries returned have been running for longer then `N` seconds or some such.\r\n* `kill_query(token)` => obvious\r\n\r\nWe can then use this API to log long-running queries, show them in the data explorer, etc. Most DBs do something like this.\r\n\r\nOne way to modify @mlucy's proposal to account for the fact that we don't have anything like this now, is to change the default (to something like `wait => 0`, or `wait => true`, not sure what's better), and not even give people the option to have runaway queries. (I like that much more, actually; if that's what people want, then they should say `wait=>true`)."
  , issueCommentId = 23685371
  }