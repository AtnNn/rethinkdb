IssueComment
  { issueCommentUpdatedAt = 2016 (-02) (-04) 23 : 45 : 04 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 3062854
        , simpleUserLogin = N "dbolotin"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/3062854?v=3"
        , simpleUserUrl = "https://api.github.com/users/dbolotin"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/180106676"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/5128#issuecomment-180106676"
  , issueCommentCreatedAt = 2016 (-02) (-04) 23 : 45 : 04 UTC
  , issueCommentBody =
      "+1\r\n\r\nI think Jeckson is a better option here, as it is used as a core JSON module in two most popular reactive web frameworks in Java world: Vert.x and Play. So users of these frameworks will be able to use the same annotated classes to store in DB and send/receive over http/websockets.\r\n\r\nAnyway, I also agree with @kclay, that some simple interchangeable abstraction here would be a nice option.\r\n\r\n... it looks like in current architecture maps are used as an intermediate objects, and pojos are constructed from maps rather than raw JSON, so incorporation of any JSON framework will not be a trivial task... However, I don't think that simple map to pojo converter (com.rethinkdb.net.Util#toPojo) as implemented now, can satisfy demand for \"ORM\" in real-world projects (at least in my current project). Flexibility of serialization/deserialization through annotations substantially simplifies development.\r\n\r\nMaybe I will come up with some simple solution, after more digging into current code of the library (I understand that code is generated by python scripts :) ) and send you a pull request."
  , issueCommentId = 180106676
  }