IssueComment
  { issueCommentUpdatedAt = 2015 (-08) (-13) 04 : 53 : 11 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1276278
        , simpleUserLogin = N "williamstein"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1276278?v=3"
        , simpleUserUrl = "https://api.github.com/users/williamstein"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/130535256"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/4678#issuecomment-130535256"
  , issueCommentCreatedAt = 2015 (-08) (-13) 04 : 53 : 11 UTC
  , issueCommentBody =
      "I just dumped all my data using rethinkdb's dump, then restored into 2.0.4 *without* using indexes (since I guess the dump format is otherwise not compatible), then recreated my indexes (which is easy for me, since I define them all in code).    I'm now running that combination live in production and it seems to be working very, very well.\r\n\r\nSomething I didn't mention above is that many of my Node.js clients for rethinkdb were pegged at 100% cpu, as rethinkdb itself was often at about 500% (or more CPU), when I was running 2.1, and moreover when it did sort of work for requests, it was slow.   Now with 2.0.4, the rethinkdb server is at 20% cpu and the clients are at about 3%.     Also all the Reql* errors that were in the log with 2.1 are gone. \r\n\r\nI'm going to try to write a stress test in node.js tomorrow to simulate the load that my node.js program parts on rethinkdb, and use that to test out anything you guys provide.   Thanks for being so responsive and helpful!!"
  , issueCommentId = 130535256
  }