IssueComment
  { issueCommentUpdatedAt = 2013 (-02) (-18) 22 : 08 : 30 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/13745844"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/362#issuecomment-13745844"
  , issueCommentCreatedAt = 2013 (-02) (-18) 22 : 08 : 30 UTC
  , issueCommentBody =
      "Default would work. We should probably also add `seq.first(optional_default)` with is equivalent to `seq.nth(0, optional_default)`.\r\n\r\nHowever, `first`/`nth` isn't strictly what I want here. What I'm doing is assuming that the stream will have zero or one element. Having more than one element is a data error, and ideally the code would reflect that (so if the stream has more than one element the code would throw).\r\n\r\nConverting a stream to a scholar like this is a pretty common thing. We could do an explicit `seq.cast('object')` or introduce something like `seq.toScalar`/`seq.toObject` which would actually throw if there is more than one element in the sequence.\r\n\r\nI agree implicitly converting the stream has a bad smell (plus, we could do it at any time later if we really want to)."
  , issueCommentId = 13745844
  }