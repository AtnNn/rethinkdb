Issue
  { issueClosedAt = Just 2016 (-04) (-14) 07 : 17 : 23 UTC
  , issueUpdatedAt = 2016 (-04) (-19) 20 : 17 : 37 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5649/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/pull/5649"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "fef2c0"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/Java"
          , labelName = "Java"
          }
      ]
  , issueNumber = 5649
  , issueAssignee =
      Just
        SimpleUser
          { simpleUserId = Id 1366
          , simpleUserLogin = N "deontologician"
          , simpleUserAvatarUrl =
              "https://avatars.githubusercontent.com/u/1366?v=3"
          , simpleUserUrl = "https://api.github.com/users/deontologician"
          , simpleUserType = OwnerUser
          }
  , issueUser =
      SimpleUser
        { simpleUserId = Id 471065
        , simpleUserLogin = N "PeterKnego"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/471065?v=3"
        , simpleUserUrl = "https://api.github.com/users/PeterKnego"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Support for connection pooling in Java driver"
  , issuePullRequest =
      Just
        PullRequestReference
          { pullRequestReferenceHtmlUrl =
              Just "https://github.com/rethinkdb/rethinkdb/pull/5649"
          , pullRequestReferencePatchUrl =
              Just "https://github.com/rethinkdb/rethinkdb/pull/5649.patch"
          , pullRequestReferenceDiffUrl =
              Just "https://github.com/rethinkdb/rethinkdb/pull/5649.diff"
          }
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5649"
  , issueCreatedAt = 2016 (-04) (-12) 14 : 05 : 04 UTC
  , issueBody =
      Just
        "Adds support for an extensible connection pool implementations via a ConnectionPool interface. \r\n\r\nProvides a FixedConnectionPool implementation, which creates connections on-demand to a pre-defined set of cluster nodes. Connections are selected in a round-robin fashion and after use returned to the pool. Pool grows on-demand by creating new connections when existing pool is exhausted. \r\n\r\nTypical use:\r\n```\r\n// define conneciton builders \r\nConnection.Builder connBuilder1 = Connection.build().hostname(\"localhost\").port(28015);\r\nConnection.Builder connBuilder2 = Connection.build().hostname(\"localhost\").port(28016);\r\n\r\n// create a conneciton pool\r\nConnectionPool pool = new FixedConnectionPool(connBuilder1, connBuilder2);\r\n\r\n// use it\r\nRethinkDB.r.db(\"test\").table(\"pooltest\").run(pool);  // provide ConnectionPool instead of Connection\r\n\r\n//  optionally register a global connection pool \r\nRethinkDB.setGlobalConnectionPool(pool);  \r\nRethinkDB.r.db(\"test\").table(\"pooltest\").run();    // no need to pass pool or conn"
  , issueState = "closed"
  , issueId = Id 147762265
  , issueComments = 5
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 706854
                , simpleUserLogin = N "AtnNn"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/706854?v=3"
                , simpleUserUrl = "https://api.github.com/users/AtnNn"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 0
          , milestoneNumber = 26
          , milestoneClosedIssues = 316
          , milestoneDescription =
              Just
                "These issues are neither bugs nor feature requests. Spam, user questions and accidentally created issues end up here."
          , milestoneTitle = "invalid"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/26"
          , milestoneCreatedAt = 2013 (-04) (-05) 01 : 37 : 20 UTC
          , milestoneState = "closed"
          }
  }