Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2016 (-08) (-05) 19 : 13 : 17 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/6030/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/6030"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "0052cc"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:ReQL_proposal"
          , labelName = "tp:ReQL_proposal"
          }
      ]
  , issueNumber = 6030
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 7431361
        , simpleUserLogin = N "larkost"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/7431361?v=3"
        , simpleUserUrl = "https://api.github.com/users/larkost"
        , simpleUserType = OwnerUser
        }
  , issueTitle =
      "better way of getting a list of values form a stream"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/6030"
  , issueCreatedAt = 2016 (-08) (-04) 21 : 00 : 12 UTC
  , issueBody =
      Just
        "Currently if you want to get a list of the values of specific fields in a stream of objects the only option (other than processing the output outside of ReQL) is to use `.pluck().map(r.row.values())`. This currently does the right thing, but that seems more like an implementation detail than a guarantee (as well as being non-obvious).\r\n\r\nI immediately see  approaches to do this:\r\n1. extend `get_field` to allow it to take multiple arguments, and return those fields in that order as an array\r\n2. add another ReQL term `get_fields` that does that same thing\r\n3. extend the `values` term to work with streams (note: this would return the fields in the alphabetical order of their keys)\r\n4. extend the `bracket` command to be able to specify multiple options (this might not work in all languages for all forms, e.g.: Python)\r\n\r\nPersonally I think we should do both 1 and 3, but I do understand the objection (raised by @VeXocide) that this would mean that the same term would return a value in one case, and a list of values for another."
  , issueState = "open"
  , issueId = Id 169472531
  , issueComments = 4
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 268
          , milestoneNumber = 41
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone will be revisited after each major release during the planning stage for the major release after it. They will be moved to a specific release milestone if chosen for that release."
          , milestoneTitle = "subsequent"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/41"
          , milestoneCreatedAt = 2013 (-06) (-30) 07 : 32 : 52 UTC
          , milestoneState = "open"
          }
  }