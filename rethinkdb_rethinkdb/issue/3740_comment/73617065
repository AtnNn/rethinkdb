IssueComment
  { issueCommentUpdatedAt = 2015 (-02) (-09) 23 : 54 : 09 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 552910
        , simpleUserLogin = N "Tryneus"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/552910?v=3"
        , simpleUserUrl = "https://api.github.com/users/Tryneus"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/73617065"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3740#issuecomment-73617065"
  , issueCommentCreatedAt = 2015 (-02) (-09) 23 : 54 : 09 UTC
  , issueCommentBody =
      "Here's what I would propose for this (note that this is similar to what was suggested in #1863, but allows for runtime parameterization):\r\n\r\n* Implement #3636, so we have a pseudotype for queries\r\n* Add a term `r.bind` (or `r.rql` or something):\r\n  * `r.bind` takes a single argument - a function with *n* arguments\r\n  * `r.bind` returns a ReQL query (saved as a pseudotype) which can be stored in a Datum\r\n  * Example: `r.bind(lambda x, y: r.table(x).insert({'value':y}))`\r\n* Add a term `r.eval` (or `r.call` or something):\r\n  * `r.eval` takes *n* arguments plus a ReQL query (a `FUNC` term or a pseudotype) that takes *n* arguments\r\n  * `r.eval` compiles and runs the query, using the provided values as parameters, and returns the result of the query"
  , issueCommentId = 73617065
  }