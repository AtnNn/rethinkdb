IssueComment
  { issueCommentUpdatedAt = 2013 (-10) (-11) 04 : 54 : 38 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/26114660"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1533#issuecomment-26114660"
  , issueCommentCreatedAt = 2013 (-10) (-11) 04 : 54 : 38 UTC
  , issueCommentBody =
      "My immediate reaction was that it's not obvious at first glance that it applies to the leftmost argument in `eq_join`.  You sort of have to think about it for a bit, and at first glance you might think \"is it affecting how it treats the second argument?\"\r\n\r\nBut the bigger reason is that in other cases `multi` always means \"treat the output of this command differently\", whereas in case of `eq_join` it means \"treat the input to this command differently\". For index creation, grouping, and mapping (if we choose to get rid of `concatMap`) , `multi` affects what the function spits out, and there is really no other way to do it in the language. For `eq_join` it affects the input, and there is another way to do it in the language.\r\n\r\nThat's not to say that we shouldn't fix cumbersome cases, just that this particular one seems different enough that I think it's worth thinking about.\r\n\r\n\r\n\r\n"
  , issueCommentId = 26114660
  }