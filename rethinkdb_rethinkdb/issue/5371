Issue
  { issueClosedAt = Just 2016 (-02) (-07) 15 : 42 : 53 UTC
  , issueUpdatedAt = 2016 (-02) (-08) 19 : 54 : 35 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5371/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/5371"
  , issueClosedBy = Nothing
  , issueLabels = []
  , issueNumber = 5371
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 635734
        , simpleUserLogin = N "scabot"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/635734?v=3"
        , simpleUserUrl = "https://api.github.com/users/scabot"
        , simpleUserType = OwnerUser
        }
  , issueTitle =
      "Get an IndexOutOfRange indication when accessing an array element using pointer"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5371"
  , issueCreatedAt = 2016 (-02) (-07) 15 : 26 : 06 UTC
  , issueBody =
      Just
        "Hello\n\nI suggest adding an IndexOutOfRange indication to Pointer::Get (It may be usefull to get other error indications as well)\nHere is how I modified my private version of Get:\n\n```\ndiff --git include/rapidjson/pointer.h include/rapidjson/pointer.h\nindex 7519490..c68e1d6 100644\n--- include/rapidjson/pointer.h\n+++ include/rapidjson/pointer.h\n@@ -459,9 +459,11 @@ public:\n         \\param root Root value of a DOM sub-tree to be resolved. It can be any value other than document root.\n         \\return Pointer to the value if it can be resolved. Otherwise null.\n     */\n-    ValueType* Get(ValueType& root) const {\n+    ValueType* Get(ValueType& root, bool *indexOutOfRange = 0) const {\n         RAPIDJSON_ASSERT(IsValid());\n         ValueType* v = &root;\n+        if(0 != indexOutOfRange)\n+            *indexOutOfRange = false;\n         for (const Token *t = tokens_; t != tokens_ + tokenCount_; ++t) {\n             switch (v->GetType()) {\n             case kObjectType:\n@@ -474,7 +476,11 @@ public:\n                 break;\n             case kArrayType:\n                 if (t->index == kPointerInvalidIndex || t->index >= v->Size())\n+                {\n+                    if(0 != indexOutOfRange)\n+                        *indexOutOfRange = true;\n                     return 0;\n+                }\n                 v = &((*v)[t->index]);\n                 break;\n             default:\n```\n"
  , issueState = "closed"
  , issueId = Id 131976624
  , issueComments = 1
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 706854
                , simpleUserLogin = N "AtnNn"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/706854?v=3"
                , simpleUserUrl = "https://api.github.com/users/AtnNn"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 0
          , milestoneNumber = 26
          , milestoneClosedIssues = 316
          , milestoneDescription =
              Just
                "These issues are neither bugs nor feature requests. Spam, user questions and accidentally created issues end up here."
          , milestoneTitle = "invalid"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/26"
          , milestoneCreatedAt = 2013 (-04) (-05) 01 : 37 : 20 UTC
          , milestoneState = "closed"
          }
  }