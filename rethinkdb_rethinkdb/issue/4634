Issue
  { issueClosedAt = Just 2015 (-08) (-05) 19 : 08 : 57 UTC
  , issueUpdatedAt = 2015 (-08) (-06) 07 : 56 : 53 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4634/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/4634"
  , issueClosedBy = Nothing
  , issueLabels = []
  , issueNumber = 4634
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 4147061
        , simpleUserLogin = N "let4be"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/4147061?v=3"
        , simpleUserUrl = "https://api.github.com/users/let4be"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "JS crashes server"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4634"
  , issueCreatedAt = 2015 (-08) (-05) 18 : 32 : 28 UTC
  , issueBody =
      Just
        "I was very surprised to see rethinkdb server crashed, when I dived into logs I saw this:\n\n```\n\n2015-08-02T15:53:19.320166650 0.255873s notice: Server ready, \"dev_af5\" 4c92ac8d-f927-4a35-804a-a10f873cb207\n2015-08-02T19:44:12.407482170 13853.343191s error: Error in src/extproc/js_runner.cc at line 178:\n2015-08-02T19:44:12.407541948 13853.343249s error: Guarantee failed: [fn_id != __null]\n2015-08-02T19:44:12.407555753 13853.343262s error: Backtrace:\n2015-08-02T19:44:12.960427980 13853.896137s error: Sun Aug  2 19:44:12 2015\\n\\n1: backtrace_t::backtrace_t() at ??:?\\n2: format_backtrace(bool) at ??:?\\n3: report_fatal_error(char const*, int, char const*, ...) at ??:?\\n4: js_runner_t::call(std::string const&, std::vector<ql::datum_t, std::allocator<ql::datum_t> > const&, js_runner_t::req_config_t const&) at ??:?\\n5: ql::js_func_t::call(ql::env_t*, std::vector<ql::datum_t, std::allocator<ql::datum_t> > const&, ql::eval_flags_t) const at ??:?\\n6: ql::func_t::call(ql::env_t*, ql::datum_t, ql::eval_flags_t) const at ??:?\\n7: ql::map_trans_t::lst_transform(ql::env_t*, std::vector<ql::datum_t, std::allocator<ql::datum_t> >*, ql::datum_t const&) at ??:?\\n8: ql::ungrouped_op_t::operator()(ql::env_t*, std::map<ql::datum_t, std::vector<ql::datum_t, std::allocator<ql::datum_t> >, optional_datum_less_t, std::allocator<std::pair<ql::datum_t const, std::vector<ql::datum_t, std::allocator<ql::datum_t> > > > >*, ql::datum_t const&) at ??:?\\n9: ql::eager_datum_stream_t::next_grouped_batch(ql::env_t*, ql::batchspec_t const&, std::map<ql::datum_t, std::vector<ql::datum_t, std::allocator<ql::datum_t> >, optional_datum_less_t, std::allocator<std::pair<ql::datum_t const, std::vector<ql::datum_t, std::allocator<ql::datum_t> > > > >*) at ??:?\\n10: ql::eager_datum_stream_t::next_batch_impl(ql::env_t*, ql::batchspec_t const&) at ??:?\\n11: ql::datum_stream_t::next_batch(ql::env_t*, ql::batchspec_t const&) at ??:?\\n12: ql::query_cache_t::ref_t::serve(ql::env_t*, Response*) at ??:?\\n13: ql::query_cache_t::ref_t::fill_response(Response*) at ??:?\\n14: ql::run(ql::query_id_t&&, ql::protob_t<Query>, Response*, ql::query_cache_t*, signal_t*) at ??:?\\n15: rdb_query_server_t::run_query(ql::query_id_t&&, ql::protob_t<Query> const&, Response*, ql::query_cache_t*, signal_t*) at ??:?\\n16: void save_exception<void query_server_t::connection_loop<json_protocol_t>(linux_tcp_conn_t*, unsigned long, ql::query_cache_t*, signal_t*)::{lambda(std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > >, signal_t*)#1}::operator()(std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > >, signal_t*) const::{lambda()#1}>(std::__exception_ptr::exception_ptr*, std::string*, cond_t*, void query_server_t::connection_loop<json_protocol_t>(linux_tcp_conn_t*, unsigned long, ql::query_cache_t*, signal_t*)::{lambda(std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > >, signal_t*)#1}::operator()(std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > >, signal_t*) const::{lambda()#1}&&) at ??:?\\n17: void query_server_t::connection_loop<json_protocol_t>(linux_tcp_conn_t*, unsigned long, ql::query_cache_t*, signal_t*)::{lambda(std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > >, signal_t*)#1}::operator()(std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > >, signal_t*) const at ??:?\\n18: std_function_callback_t<std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > > >::coro_pool_callback(std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > >, signal_t*) at ??:?\\n19: coro_pool_t<std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > > >::worker_run(std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > >, auto_drainer_t::lock_t) at ??:?\\n20: callable_action_instance_t<std::_Bind<std::_Mem_fn<void (coro_pool_t<std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > > >::*)(std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > >, auto_drainer_t::lock_t)> (coro_pool_t<std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > > >*, std::_List_iterator<std::pair<ql::query_id_t, ql::protob_t<Query> > >, auto_drainer_t::lock_t)> >::run_action() at ??:?\\n21: coro_t::run() at ??:?\n2015-08-02T19:44:12.960562205 13853.896269s error: Exiting.\n2015-08-02T19:47:26.141743199 0.084675s notice: Running rethinkdb 2.0.4~0trusty (GCC 4.8.2)...\n2015-08-02T19:47:26.159450259 0.102384s notice: Running on Linux 3.13.0-32-generic x86_64\n\n```\n\nAny ideas?\n"
  , issueState = "closed"
  , issueId = Id 99268735
  , issueComments = 11
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 706854
                , simpleUserLogin = N "AtnNn"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/706854?v=3"
                , simpleUserUrl = "https://api.github.com/users/AtnNn"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 1
          , milestoneNumber = 17
          , milestoneClosedIssues = 595
          , milestoneDescription =
              Just
                "The scope of this issue is covered by another issue. The closing comment should link to the other issue."
          , milestoneTitle = "duplicate"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/17"
          , milestoneCreatedAt = 2013 (-03) (-29) 20 : 23 : 12 UTC
          , milestoneState = "closed"
          }
  }