IssueComment
  { issueCommentUpdatedAt = 2013 (-06) (-10) 18 : 40 : 36 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/19217915"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/897#issuecomment-19217915"
  , issueCommentCreatedAt = 2013 (-06) (-10) 18 : 40 : 36 UTC
  , issueCommentBody =
      "Yes, I admit that it will help if converting to JSON is a lot faster than serializing a complex protobuf. :-)\r\n\r\nSomehow I still feel that this is a hack though, as I don't see a technical reason for why it should be any faster than serializing to a protocol buffer.\r\nAnyways, if it helps 80 % of the users, we should add .json(). It will buy us some - if not a lot of - time before we will have to optimize the actual protocol buffer serialization.\r\n\r\nOn a different note, I'm not convinced that the problem is actually limited to sending data from the client. I've seen cases where receiving the data and decoding the protobuf is equally slow. We should benchmark that at some point.\r\n\r\nFinally, some anecdote from the PHP driver:\r\nThe PHP driver is now using a highly efficient library, in which protobuf serialization time almost doesn't matter anymore. This is good, because it shows that it is possible to make the protocol efficient. The bad news is that the library is fast at least partially because it uses native compiled C code. I had previously tried to optimize a purely PHP-based protobuf library and I couldn't get anywhere near the performance of the native one. I can imagine that we will encounter similar limitations in some of the other language. I'm not quite sure what to do in such cases.\r\n@wmrowan mentioned that the Python protobuf library supports a similar natively-compiled extension which might just have to be enabled."
  , issueCommentId = 19217915
  }