IssueComment
  { issueCommentUpdatedAt = 2016 (-07) (-27) 15 : 09 : 46 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 478118
        , simpleUserLogin = N "bchavez"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/478118?v=3"
        , simpleUserUrl = "https://api.github.com/users/bchavez"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/235123003"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/5996#issuecomment-235123003"
  , issueCommentCreatedAt = 2016 (-07) (-26) 00 : 00 : 51 UTC
  , issueCommentBody =
      "Hey there. Apologies up front, my working set memory is very small and have little to zero experience with Java and Clojure. Pls excuse my misgivings. I'm still trying to understand what changes in the Java driver you need to accomplish your goal in a reasonable way.\r\n\r\nHere's what I'm trying to reconcile in my mind:\r\n> it would be great if the `com.rethinkdb.net.Connection` class offered me a way to handle the query response myself\r\n\r\n***1. So I think you want a way to process responses*** :heavy_check_mark: \r\n\r\nand \r\n\r\n> I think the simplest way to go about this would probably just be to make `sendQuery` public\r\n\r\n***2. So I think you want a way to send queries*** :question:\r\n\r\nBut only handling one (`sendQuery`) doesn't get you the other (`processing responses off the wire`) with the current architecture. **1. Handling responses** and **2. sending queries** are two distinct operations, ***and*** both currently happen on different threads (and you mention things like `core.async` so I don't know exactly where that fits in). Both sending and receiving query/response are complementary enough to \"live together\" and go hand-in-hand with each other given the current threading architecture (hence the effort for #5380).\r\n\r\nThe problem with the way the current Java implementation (motivation for #5380), is that both of these (send/receive) **1. and 2.** implementations currently co-exist in `Connection`, that is, in the same strata along with `Response` / `Cursor` logic. The `Cursor` logic is still important enough to live on its own strata separate from the underlying threading architecture IMHO (ie motivation for #5380).\r\n\r\n-------\r\n\r\nSo, given the current state of Java things. Maybe, your best bet, is to implement an abstraction like `IConnection`, but unfortunately, this means you'll need to re-implement **1) some kind of threading architecture thing for sending / receiving stuff** and **2) have some reasonable `Cursor` management stuff**. Handling `IConnection` will most definitely get you both **1 and 2** but also adds some additional responsibility like handling `Cursor` management. I hope that kinda makes sense in a weird way??\r\n\r\nSo, #5380 (sorry repeating myself) would push the threading stuff down lower to `SocketWrapper` so that you could still use `Connection`'s `Cursor` management stuff up above, but gives you **1 and 2** with your own response mechanism assuming `Future<T>` works for you.\r\n \r\n----\r\n\r\nOr, maybe just simply overriding `SocketWrapper:write()` and `Response SocketWrapper:read()` would work? That gets you both **1 and 2** very simply. I don't know. \175 \\ _ (\12484) _ /\175  :crying_cat_face: \r\n\r\n---\r\n\r\nCould you provide a more detailed example of what it means to \"handle it however it wanted\"?\r\n\r\n> The most Clojuresque interface I could imagine the Java driver providing would be one in which you allowed me to pass Connection.run a Clojure function [callback] that would be take a single argument, res (a Response), and could handle it however it wanted.\r\n\r\nThe immediate problem I see with \"handling it however it wanted\" is the Java callstack. For example, `query.run(conn)` would look something like this, IIRC: \r\n\r\n```\r\n-> conn.sendQuery(query) \r\n-> conn.runQuery(query) & wait for Response type\r\n-> conn.run(query)\r\n-> ReqlAst.run(Connection conn)\r\n```\r\nHow does your Clojure callback plan on backing out / unwinding the callstack cleanly after your \"Clojure [callback] handles it\"? What do we do with the response check [here](https://github.com/rethinkdb/rethinkdb/blob/next/drivers/java/src/main/java/com/rethinkdb/net/Connection.java#L274)? `if (res.isAtom())` It ***kinda*** effects cursor management. Or are you looking to completely bypass [these](https://github.com/rethinkdb/rethinkdb/blob/next/drivers/java/src/main/java/com/rethinkdb/net/Connection.java#L274) `if (res.isAtom())` response checks in `conn.runQuery` and have `runQuery` blindly return whatever your callback returns?\r\n\r\n-----\r\n\r\nThinking out loud, if your Clojure callback is something like:\r\n```\r\nvar callback = (Response res) =>{\r\n       //handle it however it wants?\r\n     });\r\n```\r\nBy the time your callback is executed, the wire-JSON is already deserialized into a Java `Response` type. But the `Response.Data` is still a `JSONArray` and is ***that okay*** for your Clojure callback?\r\n\r\n-----\r\n\r\nOr, are you looking at just deserialization at this level? Hooking semantic occurrences of Lines [277 and 278](\r\nhttps://github.com/rethinkdb/rethinkdb/blob/next/drivers/java/src/main/java/com/rethinkdb/net/Connection.java#L277-L278) so you can return a **POCO** instead of a **POJO**?:question:  \r\n\r\n```\r\nObject value = ((List) Converter.convertPseudotypes(res.data, fmt)).get(0);\r\nreturn Util.convertToPojo(value, pojoClass);\r\n```\r\n\r\n-----\r\n\r\nSorry for all the scatter mindedness, this is sort of the things I'm having difficulty with understanding your situation in my mind just cuz there's a lot of stuff going on. =(\r\n\r\nBTW FWIW, the C# driver has both [`IConnection` here](https://github.com/bchavez/RethinkDb.Driver/blob/master/Source/RethinkDb.Driver/Net/IConnection.cs) and #5380 .\r\n\r\nThanks,\r\nBrian\r\n\r\n:crescent_moon: :stars: [***\"Nothing good happens past 2am...\"***](https://www.youtube.com/watch?v=VOlcDBXKhSU)\r\n\r\n\r\n\r\n"
  , issueCommentId = 235123003
  }