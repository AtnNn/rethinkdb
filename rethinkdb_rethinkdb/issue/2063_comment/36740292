IssueComment
  { issueCommentUpdatedAt = 2014 (-03) (-05) 13 : 11 : 55 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 258437
        , simpleUserLogin = N "srh"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/258437?v=3"
        , simpleUserUrl = "https://api.github.com/users/srh"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/36740292"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2063#issuecomment-36740292"
  , issueCommentCreatedAt = 2014 (-03) (-05) 13 : 11 : 55 UTC
  , issueCommentBody =
      "Erm, something like that ^^^ only with `r.uuid()` in place of `r.js(...)`.\r\n\r\nHypothetically, a query on the server *could*, on a single-row update, prove that some deep `r.uuid()` expression is evaluated once, generate a single UUID, and then pass it along the function to be evaluated.\r\n\r\nOr you could use the `non_atomic` optarg.\r\n\r\nAnother general option would be to pass down parameters for a deterministic UUID generator.  However, this wouldn't work well with the goal of how `update` queries might be evaluated, unless we evaluate the updates in some unnecessarily strict well-defined order.  That would be bad, or it would complicate some code that doesn't need to be made complicated.\r\n\r\nSo I think `r.uuid()` or `r.uniqueId()`, if implemented, should be considered a nondeterministic function in the query evaluator."
  , issueCommentId = 36740292
  }