Issue
  { issueClosedAt = Just 2013 (-10) (-02) 01 : 48 : 32 UTC
  , issueUpdatedAt = 2013 (-10) (-02) 01 : 51 : 06 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/1049/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/1049"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "444444"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:performance"
          , labelName = "tp:performance"
          }
      ]
  , issueNumber = 1049
  , issueAssignee =
      Just
        SimpleUser
          { simpleUserId = Id 505365
          , simpleUserLogin = N "danielmewes"
          , simpleUserAvatarUrl =
              "https://avatars.githubusercontent.com/u/505365?v=3"
          , simpleUserUrl = "https://api.github.com/users/danielmewes"
          , simpleUserType = OwnerUser
          }
  , issueUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Reduce copying of datum_t objects"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/1049"
  , issueCreatedAt = 2013 (-06) (-20) 16 : 47 : 13 UTC
  , issueBody =
      Just
        "***edited*: It's not datum_t objects, it's Datum objects (the ones generated from ql2.proto)! Sorry for the confusion.**\r\n\r\nI was profiling an insert workload, and noticed that\r\n13 % of the CPU time is spent in the copy constructor of Datum\r\nanother 17 % of the CPU time is spent in the destructor ~Datum\r\n\r\nOne of the major sources of Datum copying for this workload appears to be the copy constructor of batched_replaces_response_t, which is most frequently called by the write_response_t copy constructor, which in turn is called from a variety of places.\r\n\r\nProbably, we should just try to use shared pointers whenever handling datums, especially when handling vectors of datums.\r\n\r\nI yet have to check whether read workloads suffer from similar effects."
  , issueState = "closed"
  , issueId = Id 15810666
  , issueComments = 10
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 706854
                , simpleUserLogin = N "AtnNn"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/706854?v=3"
                , simpleUserUrl = "https://api.github.com/users/AtnNn"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 0
          , milestoneNumber = 27
          , milestoneClosedIssues = 127
          , milestoneDescription =
              Just
                "These issues are not reproducible or happen in platforms or configurations that are not supported."
          , milestoneTitle = "worksforme"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/27"
          , milestoneCreatedAt = 2013 (-04) (-08) 21 : 57 : 50 UTC
          , milestoneState = "closed"
          }
  }