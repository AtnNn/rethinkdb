IssueComment
  { issueCommentUpdatedAt = 2014 (-06) (-25) 22 : 08 : 08 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/47165417"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2571#issuecomment-47165417"
  , issueCommentCreatedAt = 2014 (-06) (-25) 22 : 08 : 08 UTC
  , issueCommentBody =
      "What's a good use case for putting the geo part of the compound index as the first element?  (I.e., what's a useful operation that's fast in that case that isn't otherwise?)  I'm having trouble thinking of one.\r\n\r\nIt sounds like the largest use-case for compound indexes is just being able to tag particular points.\r\n\r\nOne alternative interface would be to make this explicit:\r\n```rb\r\nr.table('test').index_create('geo', geo: true, tags: 'tags') # 'tags' could also be a function instead of a field\r\nr.table('test').get_nearest(p, index: 'geo', tags: [1, 2])\r\n```\r\n\r\nI'm sort of hesitant about using our normal compound index interface, because people already find it really confusing (as in unusably confusing).  I think people will have a very hard time reasoning about the effects of putting the geo part of the compound index in different parts of the array.\r\n"
  , issueCommentId = 47165417
  }