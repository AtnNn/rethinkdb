IssueComment
  { issueCommentUpdatedAt = 2014 (-07) (-15) 18 : 30 : 51 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/49073336"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2571#issuecomment-49073336"
  , issueCommentCreatedAt = 2014 (-07) (-15) 18 : 30 : 32 UTC
  , issueCommentBody =
      "@coffeemug Wait, unless I'm confused about which proposal we agreed on, we already have `g1.intersects(g2) -> bool` as a term that applies to geometry objects, and `table.getIntersecting(g, {index: ...}) -> stream` for index access.\r\nI would definitely want to keep the `table.getIntersecting(g, {index: ...})`. The index opt arg would be mandatory and it would be exactly for filtering through geo indexes, just like `getAll(v, {index: ...})` is like `filter(r.row(...).eq(v))` but using an index.\r\n\r\nMy preferred solution would be to extend the *predicate* term `intersects()` to be applicable to streams in addition to single objects, and act like a filter. I believe we already do that for a couple of other predicates in ReQL (such as `hasFields()` I think?), don't we?\r\n\r\nI would also like to hear @mlucy 's opinion on this."
  , issueCommentId = 49073336
  }