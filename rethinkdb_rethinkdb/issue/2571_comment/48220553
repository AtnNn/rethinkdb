IssueComment
  { issueCommentUpdatedAt = 2014 (-07) (-07) 18 : 31 : 12 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/48220553"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2571#issuecomment-48220553"
  , issueCommentCreatedAt = 2014 (-07) (-07) 18 : 31 : 12 UTC
  , issueCommentBody =
      "@neumino \r\n\r\n> We talked about a maximum of element returned. Do we have a maximum radius from which we stop searching? Will these settings be optargs?\r\n\r\nI think we will just have a maximum number of elements returned. If you use a composite geo index and chain other criteria at the end, the maximum will apply to the *final* result, including all the additional filters.\r\nI don't think we need a maximum radius (ultimately the search is limited by earth's radius of course).\r\nThe maximum number of elements will be an opt arg, with some reasonable default. It's just there to limit memory consumption while computing the query results.\r\n\r\n> Are we sure we don't want to support geohash? It seems pretty useful to me when it comes to building a REST API.\r\n\r\nWhat would that include specifically? Probably a function `toGeoHash({precision: ...})` that you can apply to points? Do we also want to support the inverse `r.geoHash(...)`? In that case, the result would be a rectangle right? Maybe we would have an opt arg `r.geoHash(..., {center: true})` to instead return some kind of center of the rectangle?\r\n"
  , issueCommentId = 48220553
  }