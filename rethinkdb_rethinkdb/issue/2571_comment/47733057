IssueComment
  { issueCommentUpdatedAt = 2014 (-07) (-02) 03 : 08 : 47 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 2058304
        , simpleUserLogin = N "grandquista"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/2058304?v=3"
        , simpleUserUrl = "https://api.github.com/users/grandquista"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/47733057"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2571#issuecomment-47733057"
  , issueCommentCreatedAt = 2014 (-07) (-02) 03 : 08 : 47 UTC
  , issueCommentBody =
      "> No getFarthest? :crying_cat_face:\r\n> This is slightly more difficult to support than getNearest, as it will typically expose pathological cases where the point that's farthest away is approximately on the opposite side of the earth. Many simpler algorithms for computing geodesic distances become slow, unstable or unusable in such cases. We can consider it later.\r\n\r\nCould an `antipode()` function be added to the proposal? This would find the point on the opposite side of the earth, and allow `p1.antipode.get_nearest` to be used to find the farthest point.\r\n\r\n> If you store other values in the tree, it means that they will get returned with an orderBy. If you consider distance < anything_that_is_not_a_distance , then it works fine when you look for the closest neighbors, but miserably fails when you look for the furthest neighbors.\r\n\r\nThis would also take care of the case mentioned above."
  , issueCommentId = 47733057
  }