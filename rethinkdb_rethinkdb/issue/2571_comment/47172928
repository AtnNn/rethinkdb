IssueComment
  { issueCommentUpdatedAt = 2014 (-06) (-25) 23 : 46 : 22 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/47172928"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2571#issuecomment-47172928"
  , issueCommentCreatedAt = 2014 (-06) (-25) 23 : 45 : 14 UTC
  , issueCommentBody =
      "@mlucy Ok I see what you mean. I don't have a strong preference for either syntax. I might actually slightly prefer the tags syntax, but I don't like calling them \"tags\".\r\n\r\nIf they were tags, I would expect there to be only a single set of tags. I would also expect to be able to filter on things that have a certain combination of tags. Overall I would expect set semantics.\r\n\r\nHowever here we would actually have array semantics like for our current compound indexes. Only in the geometry component (the first one), we don't follow those semantics.\r\n\r\nYou can for example use a three-element compound geo index to encode `[position, type, detail]` where type could be \"restaurant\" or \"gas station\" and detail would be \"chinese\" or \"italian\" (not sure what it would be for \"gas station\", maybe it's a bad example). You can search for all restaurants by omitting the last part. You cannot just search for \"chinese\" without specifying the type. If all of those were tags, I would expect that I could search for things tagged as \"chinese\".\r\n\r\nI'll try to find another name..."
  , issueCommentId = 47172928
  }