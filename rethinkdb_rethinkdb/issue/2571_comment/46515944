IssueComment
  { issueCommentUpdatedAt = 2014 (-06) (-19) 01 : 58 : 00 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/46515944"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2571#issuecomment-46515944"
  , issueCommentCreatedAt = 2014 (-06) (-19) 01 : 58 : 00 UTC
  , issueCommentBody =
      "> The problem with these is that they cannot be combined for composite indexes.\r\n\r\nThe second one can be: `table.get_all([\"foo\", polgon])`\r\n\r\n(I'm having some trouble reasoning about this because I'm not 100% clear how composite indexes where one element is a polygon will work -- how will that be implemented?  Will it always be efficient, even for an index like `[x, polygon, y]`?)\r\n\r\n> If we ignore that, I would strongly prefer the first variant with new functions defined on tables. The meaning of table.getAll(polygon) is not clear at all.\r\n\r\nIt may be because I thought of the syntax, but this reads pretty clearly to me:\r\n\r\n```rb\r\n# Get everything in the circle\r\ntable.get_all(r.geoCircle([x, y], radius), index:'location')\r\n# Get everything in the circle, ignoring polygons that only intersect it\r\ntable.get_all(r.geoCircle([x, y], radius), index:'location', include_intersecting:'false')\r\n```"
  , issueCommentId = 46515944
  }