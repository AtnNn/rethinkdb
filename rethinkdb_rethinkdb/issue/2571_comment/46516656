IssueComment
  { issueCommentUpdatedAt = 2014 (-06) (-19) 02 : 13 : 18 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/46516656"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2571#issuecomment-46516656"
  , issueCommentCreatedAt = 2014 (-06) (-19) 02 : 13 : 18 UTC
  , issueCommentBody =
      "> How is \"distance less than ... from ...\" different from \"contained within this circle\"?\r\n\r\nSorry, I wasn't thinking properly there.\r\n\r\nGenerally my assumption was that there are a couple of very different criteria that you can apply to geometric data which can be optimized by an index, and that they should be combinable for composite indexes. Introducing such predicates seemed like the reasonable way to represent this.\r\nIf we drop the second design goal (composite indexes with multiple geometry entries), we are left with the question of whether the possible criteria on geometry that can be optimized through an index are really that different.\r\nSo far we have intersection, inclusion and equality. You propose assuming intersection by default, and switching to inclusion through a flag. What I don't like about that is that it gives special treatment to intersection. Why should intersection be the default?\r\nIn fact as mentioned before, I would intuitively assume equality to be the default.\r\nIf I do `getAll(\"abcde\")` I don't search for strings that *contain* the string \"abcde\". I search for strings equal to \"abcde\". I would assume that the same holds for geometry. Everything else would be very confusing in my opinion.\r\n\r\nThe \"r.table().intersects()\" etc. syntax doesn't have that problem and is nicely explicit, which is why I prefer it."
  , issueCommentId = 46516656
  }