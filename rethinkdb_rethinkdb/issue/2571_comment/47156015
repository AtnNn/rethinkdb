IssueComment
  { issueCommentUpdatedAt = 2014 (-06) (-25) 20 : 43 : 43 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1461947
        , simpleUserLogin = N "neumino"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1461947?v=3"
        , simpleUserUrl = "https://api.github.com/users/neumino"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/47156015"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2571#issuecomment-47156015"
  , issueCommentCreatedAt = 2014 (-06) (-25) 20 : 43 : 43 UTC
  , issueCommentBody =
      ">> In a compound index, does the geo spatial index has to be first?\r\n\r\n>Yes, because that makes sure you cannot omit it.\r\n\r\nDoesn't that make queries like pretty inefficient? \r\n```\r\nr.table(\"users\").getNearest(<point>, value1)\r\n```\r\nIf the only users with `value1` are really far from <point>?\r\nYou may end up looking on the whole quad tree, right?\r\n\r\n- About compound indexes with `getNearest`, maybe we could kill two birds with one stone by allowing people to chain `getAll`/`getIntersecting`/`getNearest` where each command would use one element of a compound index.\r\n\r\nIt would basically allow people to search by prefix using a compound index\r\nhttps://github.com/rethinkdb/rethinkdb/issues/955\r\n\r\n> Compound index queries involving geospatial information can only be point-queries in the remaining components of the index\r\n\r\nAlso, why can't it be optimized? You can do the geo search in each quad trees right? (supposing that we store a quad tree in each node of the first tree)\r\nAlso does that mean that `getAll` would not be variadic too?"
  , issueCommentId = 47156015
  }