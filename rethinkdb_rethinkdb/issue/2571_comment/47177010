IssueComment
  { issueCommentUpdatedAt = 2014 (-06) (-26) 00 : 54 : 03 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/47177010"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2571#issuecomment-47177010"
  , issueCommentCreatedAt = 2014 (-06) (-26) 00 : 54 : 03 UTC
  , issueCommentBody =
      "> Thinking about it more, part of the reason using compound indexes here bother me is that outside of this case, \"compound indexes\" is just a fancy name for the fact that arrays in normal indexes sort the way you want them too. \r\n\r\nI can see that, but I think there are a few caveats to this:\r\n\r\n- That's mostly an internal observation. Our users just see them as compound indexes; I'm pretty sure most people don't make that leap.\r\n- I think that occasionally there are situations where having a uniform interface to two rather different things is a good idea (particularly if the implementation is different, but the concept from the user's POV is the same)\r\n- I sort of think that proposed alternatives are worse than the existing compound indexing API. As a user, I'm not particularly fond of learning about tags when really there is already an API that does what I want. I think that a small restriction (geo has to come first) is a better choice than a new way of accessing things.\r\n\r\nI suppose this is mostly a philosophical difference. I've always has a soft spot for systems that do that well, and tend to gravitate towards these types of designs. I can see why people may not like that."
  , issueCommentId = 47177010
  }