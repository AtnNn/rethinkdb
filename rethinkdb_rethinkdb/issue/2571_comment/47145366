IssueComment
  { issueCommentUpdatedAt = 2014 (-06) (-25) 21 : 04 : 54 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/47145366"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2571#issuecomment-47145366"
  , issueCommentCreatedAt = 2014 (-06) (-25) 19 : 14 : 13 UTC
  , issueCommentBody =
      "> In a compound index, does the geo spatial index has to be first? \r\n\r\nYes, because that makes sure you cannot omit it.\r\n\r\n> What happens if I call `r.getIntersecting` with a normal compound index [...]?\r\n\r\nIt throws an error\r\n\r\n> How does it work with `getNearest`/`orderFrom`?\r\n\r\nGood question, I forgot about that case. What do you think about `getNearest([point, value2, value3, ...])`? (*EDITED*)\r\n\r\n> How does it work with `between` for normal values? Like `between(18, 25, {index: \"age\"}).intersects(polygon)`?\r\n\r\nThat query wouldn't be optimized by a geo index. Compound index queries involving geospatial information can only be point-queries in the remaining components of the index. At least that's how I imagined it.\r\n\r\nFinding a dense spot sounds like a non-trivial optimization problem. See e.g. http://en.wikipedia.org/wiki/Mean-shift\r\n\r\n\r\nEdit: Changed the `getNearest()` syntax proposal for compound indexes, since it didn't make sense."
  , issueCommentId = 47145366
  }