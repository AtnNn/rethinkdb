IssueComment
  { issueCommentUpdatedAt = 2016 (-07) (-19) 22 : 29 : 22 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 22532
        , simpleUserLogin = N "tinco"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/22532?v=3"
        , simpleUserUrl = "https://api.github.com/users/tinco"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/233786123"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/pull/5973#issuecomment-233786123"
  , issueCommentCreatedAt = 2016 (-07) (-19) 22 : 29 : 22 UTC
  , issueCommentBody =
      "I just realized the below API for AsyncHandler might be more elegant, would you agree @mlucy? We wouldn't expose a bunch of attributes, reduce class jealousy in the async_run method and make the interface a little more explicit. The trade-off is that implementing AsyncHandlers would have to call `connection.run()` with all the arguments themselves, which requires them to know of that API.\r\n\r\n```ruby\r\n  # Extend this class to define a new way of running rethinkdb queries\r\n  # asynchronously\r\n  class AsyncHandler\r\n    # This method is called with a block that runs a rethinkdb connection\r\n    # synchronously\r\n    def run(connection, options, callback, query_body)\r\n      raise \"Must override AsyncHandler#run\"\r\n    end\r\n\r\n    # This method should return a handler that will deal with incoming messages\r\n    def handler\r\n      raise \"Must override AsyncHandler#handler\"\r\n    end\r\n  end\r\n```"
  , issueCommentId = 233786123
  }