Issue
  { issueClosedAt = Just 2015 (-11) (-10) 20 : 11 : 59 UTC
  , issueUpdatedAt = 2015 (-11) (-10) 20 : 12 : 04 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5068/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/5068"
  , issueClosedBy = Nothing
  , issueLabels = []
  , issueNumber = 5068
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 426352
        , simpleUserLogin = N "massimiliano-mantione"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/426352?v=3"
        , simpleUserUrl =
            "https://api.github.com/users/massimiliano-mantione"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Compound multi index"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5068"
  , issueCreatedAt = 2015 (-11) (-10) 15 : 29 : 50 UTC
  , issueBody =
      Just
        "I have not been able to make a multi index work when the indexed values are compound.\r\n\r\nThe documentation states that \"the keys in a multi index can be single values, compound values or even arbitrary expressions\" so I thought it should be possible.\r\n\r\nI need to model something like a group chat, where each message should be seen by a specific (always small) set of users.\r\n\r\nOne way to model a set of message would be this:\r\n\r\n```\r\nr.table(\"msg\").insert({time: 1, topic: \"t1\", users: [\"a\", \"b\"], msg: \"m1\"});\r\nr.table(\"msg\").insert({time: 2, topic: \"t2\", users: [\"a\", \"c\"], msg: \"m1\"});\r\nr.table(\"msg\").insert({time: 3, topic: \"t2\", users: [\"c\", \"b\"], msg: \"m1\"});\r\nr.table(\"msg\").insert({time: 4, topic: \"t1\", users: [\"a\", \"b\"], msg: \"m1\"});\r\nr.table(\"msg\").insert({time: 5, topic: \"t1\", users: [\"a\", \"c\"], msg: \"m1\"});\r\nr.table(\"msg\").insert({time: 6, topic: \"t2\", users: [\"c\", \"b\"], msg: \"m1\"});\r\n```\r\n\r\nI would then need to be able to filter by time (a range), topic (a single one), and user (again, a single one).\r\nSo the ideal query would be something like\r\n```\r\n...between([2, \"t2\", \"c\"], [4, \"t2\", \"c\"], {index: \"myIndex\"})...\r\n```\r\n\r\nI did a few attempts but I have  not been able to obtain an index that works in this way.\r\nThe closest I got was reworking the data like this:\r\n\r\n```\r\nr.table(\"msg\").insert({k:[[1,\"t1\",\"a\"], [1,\"t1\",\"b\"]], msg: \"m1\"});\r\nr.table(\"msg\").insert({k:[[2,\"t2\",\"a\"], [2,\"t2\",\"c\"]], msg: \"m2\"});\r\nr.table(\"msg\").insert({k:[[3,\"t2\",\"c\"], [3,\"t2\",\"b\"]], msg: \"m3\"});\r\nr.table(\"msg\").insert({k:[[4,\"t1\",\"a\"], [4,\"t1\",\"b\"]], msg: \"m4\"});\r\nr.table(\"msg\").insert({k:[[5,\"t1\",\"a\"], [5,\"t1\",\"c\"]], msg: \"m5\"});\r\nr.table(\"msg\").insert({k:[[6,\"t2\",\"c\"], [6,\"t2\",\"b\"]], msg: \"m6\"});\r\nr.table(\"msg\").indexCreate(\"imc\", r.row(\"k\"), {multi:true})\r\n```\r\n\r\nThe idea is that \"k\" is a multi-value, and each value is a compound.\r\nThen I can filter by time, but the behavior of the other values is inconsistent (or at least I don't understand it).\r\nFor instance, this query:\r\n\r\n```\r\nr.table(\"msg\").between([1, r.minval, \"a\"], [1, r.maxval, \"a\"], {index:\"imc\"})\r\n```\r\n\r\nreturns two entries for \"m1\" (I would expect one), and this returns none:\r\n\r\n```\r\nr.table(\"msg\").between([1, \"t1\", \"a\"], [1, \"t1\", \"a\"], {index:\"imc\"})\r\n```\r\n\r\n(again, I would expect one).\r\n\r\nIs this a bug, or am I doing something wrong?\r\nIf I'm doing something wrong I volunteer to make a pull request to clarify the docs! :-)\r\n"
  , issueState = "closed"
  , issueId = Id 116129825
  , issueComments = 2
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 706854
                , simpleUserLogin = N "AtnNn"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/706854?v=3"
                , simpleUserUrl = "https://api.github.com/users/AtnNn"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 0
          , milestoneNumber = 19
          , milestoneClosedIssues = 174
          , milestoneDescription =
              Just
                "It's a feature. The issue describes a RethinkDB feature or design choice as if it was a bug."
          , milestoneTitle = "notabug"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/19"
          , milestoneCreatedAt = 2013 (-03) (-29) 21 : 07 : 05 UTC
          , milestoneState = "closed"
          }
  }