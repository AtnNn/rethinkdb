Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2016 (-04) (-29) 20 : 13 : 44 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/3267/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/3267"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "0052cc"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:ReQL_proposal"
          , labelName = "tp:ReQL_proposal"
          }
      ]
  , issueNumber = 3267
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 690517
        , simpleUserLogin = N "mike-marcacci"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/690517?v=3"
        , simpleUserUrl = "https://api.github.com/users/mike-marcacci"
        , simpleUserType = OwnerUser
        }
  , issueTitle =
      "[Feature Request] accept multiple arguments in the `()` operator"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/3267"
  , issueCreatedAt = 2014 (-10) (-31) 03 : 02 : 01 UTC
  , issueBody =
      Just
        "Hi there! I've been playing a lot with data structures that interact with themselves and I've come across a use case that (I think) would be really easy to support, and provide a really useful functionality: could we have the `()` operator accept multiple arguments, so that `('foo')('bar')` and `('foo','bar')` would be equivalent?\n\nHere's the actually use case I'm trying to support:\n\n``` js\nr.expr({\n    data: {\n        foo: {\n            bar: 'baz'\n        }\n    },\n    pointer: ['foo','bar']\n}).do(function(row){\n//  return row('data')('foo')('bar');\n//  return row('data')('foo','bar');\n//  return row('data')(r.args(['foo','bar']));\n    return row('data')(r.args(row('pointer')));\n})\n\n// should return 'baz'\n```\n\nThis would allow for better data referencing and I can already think of some pretty amazing things you could do with computed indices!\n"
  , issueState = "open"
  , issueId = Id 47356323
  , issueComments = 5
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 882
          , milestoneNumber = 2
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone are not an immediate priority, and will be periodically revisited. When we decide to work on an issue in backlog, we'll move it to next."
          , milestoneTitle = "backlog"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/2"
          , milestoneCreatedAt = 2012 (-11) (-11) 14 : 16 : 11 UTC
          , milestoneState = "open"
          }
  }