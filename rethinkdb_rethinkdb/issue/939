Issue
  { issueClosedAt = Just 2013 (-07) (-25) 20 : 06 : 26 UTC
  , issueUpdatedAt = 2013 (-07) (-30) 21 : 10 : 45 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/939/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/939"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "444444"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:performance"
          , labelName = "tp:performance"
          }
      ]
  , issueNumber = 939
  , issueAssignee =
      Just
        SimpleUser
          { simpleUserId = Id 258437
          , simpleUserLogin = N "srh"
          , simpleUserAvatarUrl =
              "https://avatars.githubusercontent.com/u/258437?v=3"
          , simpleUserUrl = "https://api.github.com/users/srh"
          , simpleUserType = OwnerUser
          }
  , issueUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueTitle =
      "Optimize space efficiency with respect to blob storage"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/939"
  , issueCreatedAt = 2013 (-06) (-03) 16 : 20 : 59 UTC
  , issueBody =
      Just
        "@srh noted here https://github.com/rethinkdb/rethinkdb/issues/310#issuecomment-18842882 that RethinkDB is wasting a significant amount of space for documents that are larger than 250 bytes after internal encoding. While part of this might be solved by making the encoding more efficient, it also highlights an issue with the current tuning of in-tree vs. blob storage of values.\r\n\r\nThe problem is, that as soon as a document becomes larger than 250 bytes, it will use a whole block of its own, taking 4 KB of disk and cache space.\r\n\r\nThis is obviously relevant to disk usage concerns. It will also have an impact on speed for somewhat larger data sets, where cache efficiency matters.\r\n\r\nWe should do two things:\r\n- double-check the effect this has on real-world data sets\r\n- look into a solution. Probably, we should increase the threshold for blob storage. We could also consider sharing blocks between multiple blobs, but that might be extremely complicated and error-prone.\r\n\r\n\r\nAfter some consideration, I've come to believe that the maximal in-tree value size should be close to the block size (minus max key size and metadata overhead).\r\nAs far as I can see, the only principal advantage of putting below-block-size values into a blob instead of inlining them into the main tree is that the btree can effectively have a depth which is one level larger for only part of the key range. This applies if large documents are clustered in only a few regions. If all or most documents are large, I think the blobs would be essentially just like having an additional level of leaf nodes with one key/value per leaf node.\r\n\r\nI might well have made mistakes in my thought-model of how the btree behaves. Please correct me if you find an indication of such.\r\n\r\n@srh, I think you have a good understanding of the btree code. Do you know if there's some consideration implementation-wise which would make large max values a problem?\r\nOne candidate: in config/args.hpp there is the following comment to MAX_IN_NODE_VALUE_SIZE: \"This value needs to fit in a byte.\"\r\nI assume that this is merely to make the the storage of small values slightly more space efficient by being able to store the value size in a single byte. Apparently, some btree structures will have to be changed for supporting larger values.\r\n\r\n\r\nComments?"
  , issueState = "closed"
  , issueId = Id 15075371
  , issueComments = 37
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Just 2013 (-08) (-13) 07 : 00 : 00 UTC
          , milestoneOpenIssues = 0
          , milestoneNumber = 40
          , milestoneClosedIssues = 96
          , milestoneDescription = Just ""
          , milestoneTitle = "1.8"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/40"
          , milestoneCreatedAt = 2013 (-06) (-29) 01 : 55 : 11 UTC
          , milestoneState = "closed"
          }
  }