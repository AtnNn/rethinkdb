IssueComment
  { issueCommentUpdatedAt = 2014 (-03) (-21) 07 : 48 : 44 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/38254797"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/865#issuecomment-38254797"
  , issueCommentCreatedAt = 2014 (-03) (-21) 07 : 48 : 44 UTC
  , issueCommentBody =
      "> Also, we haven't decided whether the random number implementation should be secure or a crappy insecure RNG or what. I vote reading off /dev/urandom every time.\r\n\r\nI think we should just use whatever standard library call C++ now has to replace `rand`. I wouldn't worry about security and such -- other comparable products don't have it, it isn't a showstopper for users, and it isn't a gamechanger either. Putting extra effort into the command wouldn't give us an appreciable edge.\r\n\r\n> First, @coffeemug, sorry for implementing this without a full discussion.\r\n\r\nNo worries; it does meant that if someone implements a command without a prior discussion, they might have to change stuff before merging. ReQL touches upon the passions of many people :)\r\n\r\n> @coffeemug -- what's an example of a time you wanted `random(x,y)` to return a float where `x != 0 || y != 1`?\r\n\r\nI got confused -- I thought you were proposing to have `random` never take arguments (which I am against). After thinking about it a bit, how about the following interface:\r\n\r\n```python\r\nr.random() # [0, 1)\r\nr.random(x[, y]) # integers\r\nr.random(x[, y], double=True) # floats/doubles; may be pick a better name for the optarg\r\n```"
  , issueCommentId = 38254797
  }