IssueComment
  { issueCommentUpdatedAt = 2014 (-03) (-21) 04 : 39 : 53 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 552910
        , simpleUserLogin = N "Tryneus"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/552910?v=3"
        , simpleUserUrl = "https://api.github.com/users/Tryneus"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/38248724"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/865#issuecomment-38248724"
  , issueCommentCreatedAt = 2014 (-03) (-21) 04 : 39 : 53 UTC
  , issueCommentBody =
      "First, @coffeemug, sorry for implementing this without a full discussion.  I implemented this while waiting between code reviews because I wanted some practice with the query layer, and it seemed simple enough.  I wasn't looking to start a huge discussion, this just looked like a nifty, easy feature.  The implementation of this is actually fairly simple and didn't take much work (just a few hours, the polyglot tests and drivers took longer).  Whatever is decided, it wouldn't take much time to change the term's behavior.\r\n\r\nAs for the semantics, I went with what had been agreed on earlier: r.random([a[,b]]), plus the integer optarg because it sounded useful.  The `.floor()` thing would be nice, but there are a few concerns, such as very large numbers where integer precision is lost.  The current implementation throws if you attempt to generate a random integer that can be greater than 2^53 (which does not guarantee an accurate double -> integer conversion).\r\n\r\n@srh, I don't think it should matter which argument is greater, users just want a random number within the range.  If the values are the same, it should return that value."
  , issueCommentId = 38248724
  }