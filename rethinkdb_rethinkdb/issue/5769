Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2016 (-05) (-17) 17 : 29 : 19 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5769/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/5769"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "02d7e1"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/cp:reql"
          , labelName = "cp:reql"
          }
      , IssueLabel
          { labelColor = "02e10c"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:enhancement"
          , labelName = "tp:enhancement"
          }
      ]
  , issueNumber = 5769
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 552910
        , simpleUserLogin = N "Tryneus"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/552910?v=3"
        , simpleUserUrl = "https://api.github.com/users/Tryneus"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Batched `get` by primary key"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5769"
  , issueCreatedAt = 2016 (-05) (-17) 02 : 49 : 09 UTC
  , issueBody =
      Just
        "In Horizon, there are several places where we need to get a set of rows from a table by the primary key.  In order to do this, I issue a `r.expr(ids).map((id) => r.table(table).get(id))...`.  This is not ideal because `map` won't parallelize the `get`s.  I can't use `get_all` because I need the order preserved, so there should be `null`s in the results if the row does not exist.\n\nThis could be solved by making `get` variadic, which has been stated is a bad idea because `get`'s return value would differ based on the number of arguments.  Alternatively, an optarg could be added to `get_all` for this behavior, or as @mlucy suggested, making the results of `get` lazy.  Still, it would be nice to get any efficiency boosts from performing a batched read.\n"
  , issueState = "open"
  , issueId = Id 155165734
  , issueComments = 1
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 268
          , milestoneNumber = 41
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone will be revisited after each major release during the planning stage for the major release after it. They will be moved to a specific release milestone if chosen for that release."
          , milestoneTitle = "subsequent"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/41"
          , milestoneCreatedAt = 2013 (-06) (-30) 07 : 32 : 52 UTC
          , milestoneState = "open"
          }
  }