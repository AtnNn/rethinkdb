IssueComment
  { issueCommentUpdatedAt = 2014 (-10) (-02) 00 : 14 : 32 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 316661
        , simpleUserLogin = N "timmaxw"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/316661?v=3"
        , simpleUserUrl = "https://api.github.com/users/timmaxw"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/57561407"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3030#issuecomment-57561407"
  , issueCommentCreatedAt = 2014 (-10) (-02) 00 : 14 : 32 UTC
  , issueCommentBody =
      "Here's what I'm planning to do:\r\n\r\n* For `reql_admin` we'll store UUIDs internally and use the machine table in the semilattices to translate between UUIDs and names. If a server is renamed, all of the `table_config`s will transparently update to match it. If a server is permanently removed, it will disappear from every `replicas` list it was in, and if it was a director for any shard, that will appear as `null`. (This is currently implemented in CR 2168.)\r\n\r\n* When we implement Raft, we won't be able to use the machine table in the semilattices (since it won't exist anymore), so we'll cache the server names and use that to perform lookups. Keeping the cache up to date is awkward but do-able.\r\n\r\n* Exposing both IDs and names in the same table, and letting the user modify either one, is bad. But we could have a second table that's equivalent to `table_config` but in terms of UUIDs instead of names. We can implement this later if we decide it's necessary."
  , issueCommentId = 57561407
  }