IssueComment
  { issueCommentUpdatedAt = 2013 (-01) (-30) 01 : 17 : 34 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/12868778"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/263#issuecomment-12868778"
  , issueCommentCreatedAt = 2013 (-01) (-30) 01 : 17 : 34 UTC
  , issueCommentBody =
      "This is actually something we've talked about a lot.  We've had three basic proposals for dates:\r\n* Use our number type to store seconds-since-epoch, with negative seconds for earlier dates.  This is the easiest solution, but the least user-friendly.\r\n* Use our string type to store ISO 8601 dates.  This is more readable, but takes more space to store and would require us to implement more specialized date functions (e.g. we'd need `dateAdd` instead of just `+`).\r\n* Add a date type that can be coerced (or converted, maybe) to a string or integer.  This would be the most work, but gives us more flexibility if we want to do cool things in the future (like, say, having cluster timestamps that also store what node the time was taken on so that they're globally unique, or that store the state of the vector clock when they were taken so that we can expose the partial causal ordering to users).\r\n\r\nI think I personally prefer the second option; it strikes a good balance between utility for the user and implementation complexity."
  , issueCommentId = 12868778
  }