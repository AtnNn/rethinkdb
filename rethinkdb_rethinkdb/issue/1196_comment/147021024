IssueComment
  { issueCommentUpdatedAt = 2015 (-10) (-10) 01 : 37 : 04 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/147021024"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1196#issuecomment-147021024"
  , issueCommentCreatedAt = 2015 (-10) (-10) 01 : 37 : 04 UTC
  , issueCommentBody =
      "@marshall007 -- the main reason we've continued to forbid it is that a lot of ReQL terms capture `r.row` that people don't necessarily expect.  For example, consider the following incorrect code:\r\n\r\n```js\r\n# Select every row where `field` is greater than 1000 or in the set [1, 3, 5, 99]\r\nr.table('test')('field').filter(r.row.gt(1000).or(r.expr([1, 3, 5, 99]).contains(r.row)))\r\n```\r\n\r\nThis code is incorrect because `contains` can accept a function (you can write code like `table.contains(r.row('field').eq('foo'))`), so the code expands to this:\r\n\r\n```js\r\nr.table('test')('field').filter(function(row1) {\r\n  return row1.gt(1000).or(r.expr([1, 3, 5, 99]).contains(function(row2) { return row2; }))\r\n})\r\n```\r\n\r\nWhich is incorrect (and worse, it won't return an error; numbers are truthy in ReQL, so `ARRAY.contains(r.row)` will always return `true` if `ARRAY` is non-empty).\r\n"
  , issueCommentId = 147021024
  }