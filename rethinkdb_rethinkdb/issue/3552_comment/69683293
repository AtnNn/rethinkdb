IssueComment
  { issueCommentUpdatedAt = 2015 (-01) (-13) 01 : 57 : 27 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/69683293"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3552#issuecomment-69683293"
  , issueCommentCreatedAt = 2015 (-01) (-13) 01 : 57 : 00 UTC
  , issueCommentBody =
      "Replacing the existing `coro_t::spawn()` API completely might be difficult in some cases. Apart from that I like the idea. As long as the coro host interface is at least as visible/discoverable in the code as the lower-level coro_t::spawn interface I think we would be good.\r\n\r\nNote that this would not have avoided all problems discovered in https://github.com/rethinkdb/rethinkdb/issues/3528 . Specifically it does not stop us from calling a blocking method `a.fun()` from an external coroutine and having the object `a` destructed in the middle of it.\r\nIf we wanted to take this to the extreme, we could require an auto_drainer lock (or something equivalent) to be passed into every `wait()`. I think this is impractical though."
  , issueCommentId = 69683293
  }