IssueComment
  { issueCommentUpdatedAt = 2015 (-05) (-21) 04 : 47 : 27 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/104135227"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3992#issuecomment-104135227"
  , issueCommentCreatedAt = 2015 (-05) (-21) 04 : 47 : 27 UTC
  , issueCommentBody =
      "> I'm not a fan of this since it seems like it will make it harder for users to find out what the actual guarantees are during their testing / evaluation phase...\r\n\r\nI usually worry about that a lot as well, but in this case I think it doesn't apply because most people writing `.filter.update` won't encounter nonatomic behavior during testing unless they simulate lots of concurrent operations (which most people don't).  I think that making more things atomic by default will actually reduce the number of breakages when going from testing to production.\r\n\r\nI think we should leave questions about what to do with `.filter(NON_ATOMIC).update(ATOMIC)` for the later discussion and just make `.filter(ATOMIC).update(ATOMIC)` (and others like it) atomic for 2.1.\r\n\r\n> ...but if you think strongly that we should do this I will not veto it.\r\n\r\nI don't feel strongly enough that this is the right thing to do that I want to push ahead unilaterally.  @coffeemug, what do you think?"
  , issueCommentId = 104135227
  }