IssueComment
  { issueCommentUpdatedAt = 2014 (-07) (-09) 02 : 47 : 57 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 552910
        , simpleUserLogin = N "Tryneus"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/552910?v=3"
        , simpleUserUrl = "https://api.github.com/users/Tryneus"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/48424143"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2642#issuecomment-48424143"
  , issueCommentCreatedAt = 2014 (-07) (-09) 02 : 47 : 57 UTC
  , issueCommentBody =
      "I discovered the root of the `error: worker process failed to resynchronize with main process`.  This was due to garbage collection in the extprocs, combined with the fact that `TASK_RELEASE` and `TASK_EXIT` were asynchronous.  The extprocs would perform garbage collection after every task using `v8::V8::IdleNotification()`, which was observed to take over 100ms in some cases.\r\n\r\nI have a fix in review 1759 that changes garbage collection to happen every 128 tasks.  Strangely, garbage collection now seems to take only 1-2ms.  In addition, I've made `TASK_RELEASE` and `TASK_EXIT` synchronous.  With these changes, I've observed the worst-case scenario query duration improve by a factor of ~3.\r\n\r\nAs for the rest of the slowness...after talking to @mlucy, it is apparent that this is mostly due to combining sharded operations with small batch sizes.  If each shard only replies with one row, we may end up throwing away all but one, which would result in us doing the same work up 8 times (for a default 8-hash-sharded table).  Not entirely sure how to fix this yet, but this is not only a problem with `r.js`, it is just more likely for `r.js` queries to hit the latency cap on batching due to longer setup time."
  , issueCommentId = 48424143
  }