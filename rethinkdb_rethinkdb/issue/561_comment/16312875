IssueComment
  { issueCommentUpdatedAt = 2013 (-04) (-12) 19 : 31 : 08 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/16312875"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/561#issuecomment-16312875"
  , issueCommentCreatedAt = 2013 (-04) (-12) 19 : 30 : 59 UTC
  , issueCommentBody =
      "Alright, brief summary of the pros and cons of having `r.js` be a thin wrapper around `eval`:\r\n\r\nPros:\r\n* Is easy to implement.\r\n* Can have its behavior precisely specified in a few words.\r\n* Lets people paste in javascript snippits without having to turn them into expressions.\r\n\r\nCons:\r\n* Most of the time people just want to provide an expression.\r\n* The behavior of `eval` is extremely non-intuitive and annoying in at least one very common case.\r\n* Telling most people \"r.js is just eval\" doesn't actually help them all that much because they aren't familiar with javascripts' eval semantics.\r\n\r\nJust so I understand the issue, what would the downsides be of just saying \"r.js takes an expression\" and wrapping the string passed to it in parentheses before passing it on to eval?  Aside from the case where people provide programs rather than expressions, would this break anything else?"
  , issueCommentId = 16312875
  }