IssueComment
  { issueCommentUpdatedAt = 2013 (-04) (-12) 20 : 18 : 35 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 646357
        , simpleUserLogin = N "wmrowan"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/646357?v=3"
        , simpleUserUrl = "https://api.github.com/users/wmrowan"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/16315285"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/561#issuecomment-16315285"
  , issueCommentCreatedAt = 2013 (-04) (-12) 20 : 18 : 35 UTC
  , issueCommentBody =
      "Do we remember the \"return\" prepend issue? There too we thought we were doing people a favor but just mucked things up. The minute we deviate from standard behavior we're inviting a whole host of problems, many of which we can't even predict.\r\n\r\nThe difference is not just a short doc string vs. a long doc string. Implementing custom behavior would be giving up a flawed but well know, well documented model with something different enough to invalidate all the existing documentation out there but similar enough that people will not know that it is invalid.\r\n\r\nOur \"helpful\" solution to just one of JS's many quirks will introduce a whole host of other weird quirks that contradict the enormous institutional memory of the JS community. It's not just seasoned JS programmers who'll be confused by the deviant behavior. The newbies who we claim to be targeting will turn to the web for help with the problems they *will* come across and only be able to find anti-documentation, arguably leaving them worse off than the old hats who are better placed to understand what's actually going on.\r\n\r\nWhile I can't conscience changing the actual behavior of `r.js` I would support augmenting the error message when we get a syntax error, similar to how we augment the error thrown in the JS driver when the user forgets to add a return statement to their lambda function."
  , issueCommentId = 16315285
  }