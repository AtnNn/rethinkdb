IssueComment
  { issueCommentUpdatedAt = 2015 (-08) (-13) 03 : 14 : 13 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/130515164"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3711#issuecomment-130515164"
  , issueCommentCreatedAt = 2015 (-08) (-13) 03 : 13 : 06 UTC
  , issueCommentBody =
      "Cofounder @ Rethink here. Firstly, a disclaimer: I haven't programmed in React beyond doing a very simple toy project, so there's a possibility I'm going to say something stupid.\r\n\r\nFrom a technical perspective I think there are a few ways of doing this:\r\n\r\n1. An `r.graphql` command. GraphQL does seem to depend on the schema to evaluate queries, but I don't think it's a problem. The command could just take a schema, and we could cache it in the db to avoid the performance hit of the user sending it every time.\r\n  - Pros: one implementation to rule all them languages; efficient\r\n  - Cons: server team is currently resource constrained (tons of users/customers want very different things); users still need to build a backend; baking a very new tech into db is risky\r\n2. Rethink's HTTP server could support GraphQL queries directly (potentially built on top of `r.graphql`)\r\n  - Pros: you can build react apps without building a backend at all; this would be frakkin' awesome\r\n  - Cons: we'd have to solve security, which is hard\r\n3. Ship it as an adapter on top of RethinkDB via a language library\r\n  - Pros: probably quite easy to write a GraphQL->ReQL adapter\r\n  - Cons: We'd start in JS, but what about all the other languages?\r\n4. Ship it as an adapter on top of RethinkDB via a proxy project (possibly on top of a language library)\r\n  - Pros: also easy to do; you don't need a backend; security is easier\r\n  - Cons: not as nice a user experience; worse from the marketing POV\r\n\r\nI think this is super-important and we've got some serious decisions to make. The team is going rafting tomorrow to celebrate the Raft release :grin: but I'll see if we can carve out some time and discuss this ASAP."
  , issueCommentId = 130515164
  }