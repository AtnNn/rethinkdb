IssueComment
  { issueCommentUpdatedAt = 2015 (-11) (-26) 02 : 52 : 28 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/159788142"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3711#issuecomment-159788142"
  , issueCommentCreatedAt = 2015 (-11) (-26) 02 : 52 : 28 UTC
  , issueCommentBody =
      "@0004c we're still working heavily on the project @coffeemug mentioned above. It's not quite in a testable state yet, but I think it will be there soon.\r\n\r\nThe idea for security is similar to @mikemintz 's rethinkdb-websocket-server only in that the browser-accessible layer for RethinkDB is going to run in its own isolated process (comparable to what's described in https://github.com/rethinkdb/rethinkdb/issues/4785 as you mention).\r\nThe security model itself is quite different though. Our server won't actually expose ReQL as its query language directly to the client. Instead it will provide a custom-built API that makes the common functionality easily accessible, while still providing simple extensibility for advanced use cases. We should have more to share in the next weeks."
  , issueCommentId = 159788142
  }