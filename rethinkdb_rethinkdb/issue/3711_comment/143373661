IssueComment
  { issueCommentUpdatedAt = 2015 (-09) (-25) 23 : 24 : 39 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 690517
        , simpleUserLogin = N "mike-marcacci"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/690517?v=3"
        , simpleUserUrl = "https://api.github.com/users/mike-marcacci"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/143373661"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3711#issuecomment-143373661"
  , issueCommentCreatedAt = 2015 (-09) (-25) 23 : 14 : 12 UTC
  , issueCommentBody =
      "I'm completely in favor of this as an officially supported extension \8211 both for the ability to immediately use GraphQL for prototyping and to showcase the RethinkDB extension system! It really feels like a sweet spot that makes RethinkDB uniquely qualified as both a prototyping and production solution. \r\n\r\nThat said, I do have one remaining reservation, which I've been struggling to refine over the past couple days, but here goes:\r\n\r\nTo me, it's important that this kind of alternative interface doesn't take advantage of RethinkDB features that are not generally available through RQL or implementable in the application. For example, it would be odd for the GraphQL interface to support atomic bi-directional relationships without also providing a special type of index or supporting multi-document transactions over RQL.\r\n\r\nThe idea here is that there needs to be a clear, iterative path from prototype to production, where core guarantees and features aren't lost when your models are accessed through RQL half of the time and GraphQL the other half.\r\n\r\nI think I'm more or less echoing the sentiment of everybody else here, but I just wanted to reiterate this point."
  , issueCommentId = 143373661
  }