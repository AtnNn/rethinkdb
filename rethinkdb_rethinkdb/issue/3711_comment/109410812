IssueComment
  { issueCommentUpdatedAt = 2015 (-07) (-02) 16 : 55 : 13 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 61540
        , simpleUserLogin = N "pilwon"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/61540?v=3"
        , simpleUserUrl = "https://api.github.com/users/pilwon"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/109410812"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3711#issuecomment-109410812"
  , issueCommentCreatedAt = 2015 (-06) (-05) 19 : 20 : 56 UTC
  , issueCommentBody =
      "@thejsj An adapter transforming GraphQL into ReQL statement is definitely one way, but more preferred approach I hope to see is a new `r.graphql(<statement>)` that can receive raw GraphQL statement and internally process and return back most optimized results so the web server can simply forward them to the client. Added benefit with this approach is you only implement GraphQL once in the database engine itself and all RethinkDB client libraries will benefit from any subsequent updates without code updates. (no need to create and update adapter for every language RethinkDB client library supports)\r\n\r\nAs @Agamennon also mentioned above, this single feature implementation can potentially bring massive number of React developers and instantly turn RethinkDB into a de-facto standard database for React applications. Imagine how the community will react when rethinkdb also supports changefeed.\r\n\r\nThis single endpoint approach really seems taking off right now. There's also a promising project called [falcon](https://www.npmjs.com/package/falcor) by Netflix trying to solve a similar problem. I think jumping into this early will help RethinkDB stay ahead of the game and win over its competitors easily."
  , issueCommentId = 109410812
  }