IssueComment
  { issueCommentUpdatedAt = 2015 (-09) (-25) 22 : 20 : 02 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/143366488"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3711#issuecomment-143366488"
  , issueCommentCreatedAt = 2015 (-09) (-25) 22 : 20 : 02 UTC
  , issueCommentBody =
      "Hi @leebyron (I'm Slava btw, the red-haired guy that had lunch with ya'll a few weeks back). Thanks for chiming in!\r\n\r\nRoughly, our current plan is as follows (though it may evolve as we get deeper into the implementation):\r\n\r\n- Add an extension architecture to RethinkDB that implements a minimum possible featureset to make extensions useful.\r\n- Build a GraphQL extension that will ship with RethinkDB out of the box.\r\n\r\nThe goals of the GraphQL extension are:\r\n\r\n- Serve GraphQL directly from RethinkDB, so users can go from nothing to working React apps very very quickly, without writing any backend code.\r\n- Implement a basic (but hopefully sufficiently flexible) security model so people can ship real apps into prod.\r\n- Have a design that allows for a piecemeal migration to custom business/security logic for the relevant subsets of GraphQL queries as the users's apps get more complex. I'm not 100% certain how we'll do this yet, but it shouldn't be *too* hard.\r\n\r\nI think this approach will turn out to be super-valuable to people and won't bloat RethinkDB. I'm *really* excited about it; can't wait to get it out the door!"
  , issueCommentId = 143366488
  }