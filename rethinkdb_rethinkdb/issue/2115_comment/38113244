IssueComment
  { issueCommentUpdatedAt = 2014 (-03) (-19) 22 : 06 : 39 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1456118
        , simpleUserLogin = N "jamescostian"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1456118?v=3"
        , simpleUserUrl = "https://api.github.com/users/jamescostian"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/38113244"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2115#issuecomment-38113244"
  , issueCommentCreatedAt = 2014 (-03) (-19) 22 : 06 : 39 UTC
  , issueCommentBody =
      "From the admin interface of the primary server running the query with `.get` leads to server times that alternate between <1ms and ~80ms - so yes, @danielmewes, that weird behavior is still present, and I have a gist [here](https://gist.github.com/jamescostian/9652295) which has the profiling for an 80ms run, and another one [here](https://gist.github.com/jamescostian/9652318) which has the profiling for a <1ms run.\r\n\r\nIf I run the query without `.get` from the master server, it alternates between ~2ms (gist [here](https://gist.github.com/jamescostian/9652332)) and ~158ms (gist [here](https://gist.github.com/jamescostian/9652346)).\r\n\r\nIf I run the query with `.get` in Node on the master server, it alternates between ~95ms and ~15ms. If I do the same but with `useOutdated`, the results are consistently between ~30ms and ~12ms."
  , issueCommentId = 38113244
  }