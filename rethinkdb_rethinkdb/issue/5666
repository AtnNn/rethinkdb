Issue
  { issueClosedAt = Just 2016 (-04) (-20) 21 : 56 : 10 UTC
  , issueUpdatedAt = 2016 (-04) (-21) 17 : 59 : 40 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5666/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/5666"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "e102d8"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:bug"
          , labelName = "tp:bug"
          }
      ]
  , issueNumber = 5666
  , issueAssignee =
      Just
        SimpleUser
          { simpleUserId = Id 952451
          , simpleUserLogin = N "nighelles"
          , simpleUserAvatarUrl =
              "https://avatars.githubusercontent.com/u/952451?v=3"
          , simpleUserUrl = "https://api.github.com/users/nighelles"
          , simpleUserType = OwnerUser
          }
  , issueUser =
      SimpleUser
        { simpleUserId = Id 39289
        , simpleUserLogin = N "drcongo"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/39289?v=3"
        , simpleUserUrl = "https://api.github.com/users/drcongo"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Possible memory leak"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5666"
  , issueCreatedAt = 2016 (-04) (-14) 19 : 52 : 02 UTC
  , issueBody =
      Just
        "I've been working on a thing to make RethinkDB play nicely with Flask-Security - https://github.com/hactar-is/frink/tree/develop - I wrote a bunch of tests, found I needed to upgrade RethinkDB to 2.3.0 because of a bug in 2.2.6, and then noticed that my tests seem to cause a memory leak in RethinkDB. Every time I run them, the memory consumption for the rethinkdb process in htop grows by between 4MB and ~32MB and this never gets released at the end of the tests.\n\nI have a session scope pytest fixture which sets up the connection, and at the end of the tests drops all the tables that have been created and closes the connection. I'm wondering if there's something else I need to do at the end of the test run to release that memory? I can't be sure, but I don't think this was happening under 2.2.x.\n\nMy tests are running on Ubuntu 14.04 with RethinkDB 2.3.0 and the 2.3.0 Python driver. The Python runtime is the stock 2.7.6 that ships with Ubuntu 14.04\n\nThe complete set of queries (all very basic) that run during a test run is:\n\n``` r.db('frink_tests').table_create('name_tests')\nr.db('frink_tests').table_create('id_tests')\nr.db('frink_tests').table_create('roles')\nr.db('frink_tests').table_create('users')\nr.db('frink_tests').table_create('slug_tests')\nr.db('frink_tests').table('users').get(u'harriman@example.com')\nr.db('frink_tests').table('users').filter(r.expr({'email': u'harriman@example.com'}))\nr.db('frink_tests').table('users').insert(r.expr({'last_login_ip': None, 'roles': [], 'firstname': u'Michael', 'lastname': u'Harriman', 'created_at': '2016-04-14T20:35:31.318841', 'sort_on': None, 'login_count': None, 'updated_at': '2016-04-14T20:35:31.318862', 'registered_at': None, 'email': u'harriman@example.com', 'last_login_at': '2016-04-14T20:35:31.318910', 'current_login_at': '2016-04-14T20:35:31.318917', 'confirmed_at': None, 'active': True, 'password': u'this is a password', 'id': 'e1dc69d2-b766-4e20-9026-73ba8217ddd2', 'current_login_ip': None}), conflict='replace')\nr.db('frink_tests').table('users').get(u'harriman@example.com')\nr.db('frink_tests').table('users').filter(r.expr({'email': u'harriman@example.com'}))\nr.db('frink_tests').table('users').get('harriman@example.com')\nr.db('frink_tests').table('users').filter(r.expr({'email': 'harriman@example.com'}))\nr.db('frink_tests').table('users').get('harriman@example.com')\nr.db('frink_tests').table('users').filter(r.expr({'email': 'harriman@example.com'}))\nr.db('frink_tests').table('users').get('e1dc69d2-b766-4e20-9026-73ba8217ddd2')\nr.db('frink_tests').table('users').get('harriman@example.com')\nr.db('frink_tests').table('users').filter(r.expr({'email': 'harriman@example.com'}))\nr.db('frink_tests').table('users').filter(r.expr({'lastname': 'Harriman'})).limit(1)\nr.db('frink_tests').table('roles').insert(r.expr({'created_at': '2016-04-14T20:35:31.383074', 'description': u'A registered user.', 'id': '51b914fb-ef26-4f02-9ac2-c109932fb956', 'name': u'User', 'updated_at': '2016-04-14T20:35:31.383093'}), conflict='replace')\nr.db('frink_tests').table('roles').filter(r.expr({'name': 'User'})).limit(1)\nr.db('frink_tests').table('users').get('harriman@example.com')\nr.db('frink_tests').table('users').filter(r.expr({'email': 'harriman@example.com'}))\nr.db('frink_tests').table('roles').filter(r.expr({'name': 'User'})).limit(1)\nr.db('frink_tests').table('users').insert(r.expr({'last_login_ip': None, 'roles': [r.expr({'created_at': '2016-04-14T20:35:31.383074', 'description': u'A registered user.', 'id': '51b914fb-ef26-4f02-9ac2-c109932fb956', 'name': u'User', 'updated_at': '2016-04-14T20:35:31.383093'})], 'firstname': u'Michael', 'lastname': u'Harriman', 'created_at': '2016-04-14T20:35:31.318841', 'sort_on': None, 'login_count': None, 'updated_at': '2016-04-14T20:35:31.318862', 'registered_at': None, 'email': u'harriman@example.com', 'last_login_at': '2016-04-14T20:35:31.318910', 'current_login_at': '2016-04-14T20:35:31.318917', 'confirmed_at': None, 'active': True, 'password': u'this is a password', 'id': 'e1dc69d2-b766-4e20-9026-73ba8217ddd2', 'current_login_ip': None}), conflict='replace')\nr.db('frink_tests').table('users').insert(r.expr({'last_login_ip': None, 'roles': [r.expr({'created_at': '2016-04-14T20:35:31.383074', 'description': u'A registered user.', 'id': '51b914fb-ef26-4f02-9ac2-c109932fb956', 'name': u'User', 'updated_at': '2016-04-14T20:35:31.383093'})], 'firstname': u'Michael', 'lastname': u'Harriman', 'created_at': '2016-04-14T20:35:31.318841', 'sort_on': None, 'login_count': None, 'updated_at': '2016-04-14T20:35:31.318862', 'registered_at': None, 'email': u'harriman@example.com', 'last_login_at': '2016-04-14T20:35:31.318910', 'current_login_at': '2016-04-14T20:35:31.318917', 'confirmed_at': None, 'active': True, 'password': u'this is a password', 'id': 'e1dc69d2-b766-4e20-9026-73ba8217ddd2', 'current_login_ip': None}), conflict='replace')\nr.db('frink_tests').table('users').get('harriman@example.com')\nr.db('frink_tests').table('users').filter(r.expr({'email': 'harriman@example.com'}))\nr.db('frink_tests').table('roles').filter(r.expr({'name': 'User'})).limit(1)\nr.db('frink_tests').table('users').get('harriman@example.com')\nr.db('frink_tests').table('users').filter(r.expr({'email': 'harriman@example.com'}))\nr.db('frink_tests').table('roles').filter(r.expr({'name': 'User'})).limit(1)\nr.db('frink_tests').table('users').get('e1dc69d2-b766-4e20-9026-73ba8217ddd2').delete()\nr.db('frink_tests').table('roles').get('51b914fb-ef26-4f02-9ac2-c109932fb956').delete()\nr.db('frink_tests').table('users').get('harriman@example.com')\nr.db('frink_tests').table('users').filter(r.expr({'email': 'harriman@example.com'}))\nr.db('frink_tests').table('roles').filter(r.expr({'name': 'User'})).limit(1)\nr.db('frink_tests').table('users').insert(r.expr({'last_login_ip': None, 'roles': [], 'firstname': u'Michael', 'lastname': u'Harriman', 'created_at': '2016-04-14T20:35:31.483932', 'sort_on': 0, 'login_count': None, 'updated_at': '2016-04-14T20:35:31.483953', 'registered_at': None, 'email': u'harriman@example.com', 'last_login_at': '2016-04-14T20:35:31.483996', 'current_login_at': '2016-04-14T20:35:31.484003', 'confirmed_at': None, 'active': True, 'password': u'this is a password', 'id': '644566b0-2a40-4b1d-b005-a0b955786b7a', 'current_login_ip': None}), conflict='replace')\nr.db('frink_tests').table('roles').insert(r.expr({'created_at': '2016-04-14T20:35:31.497626', 'description': u'A registered user.', 'id': '89218f02-8411-43ab-89dd-e743c41f1d7e', 'name': u'User', 'updated_at': '2016-04-14T20:35:31.497643'}), conflict='replace')\nr.db('frink_tests').table('users').insert(r.expr({'last_login_ip': None, 'roles': [], 'firstname': u'Sido', 'lastname': u'Jombati', 'created_at': '2016-04-14T20:35:31.504525', 'sort_on': 1, 'login_count': None, 'updated_at': '2016-04-14T20:35:31.504541', 'registered_at': None, 'email': u'jombati@example.com', 'last_login_at': '2016-04-14T20:35:31.504582', 'current_login_at': '2016-04-14T20:35:31.504588', 'confirmed_at': None, 'active': True, 'password': u'this is a password', 'id': '7aad21e2-b80f-4432-9b9f-9aef51354be5', 'current_login_ip': None}), conflict='replace')\nr.db('frink_tests').table('roles').insert(r.expr({'created_at': '2016-04-14T20:35:31.511272', 'description': u'A registered user.', 'id': '9429f950-d06a-413d-81e7-a6ccc0f3a1af', 'name': u'Admin', 'updated_at': '2016-04-14T20:35:31.511290'}), conflict='replace')\nr.db('frink_tests').table('users').filter(r.expr({'email': 'harriman@example.com'})).limit(1)\nr.db('frink_tests').table('users').filter(r.expr({'email': 'harriman@example.com'})).limit(1)\nr.db('frink_tests').table('roles').filter(r.expr({'name': 'User'})).limit(1)\nr.db('frink_tests').table('users').insert(r.expr({'last_login_ip': None, 'roles': [r.expr({'created_at': '2016-04-14T20:35:31.497626', 'description': u'A registered user.', 'id': '89218f02-8411-43ab-89dd-e743c41f1d7e', 'name': u'User', 'updated_at': '2016-04-14T20:35:31.497643'})], 'firstname': u'Michael', 'lastname': u'Harriman', 'created_at': '2016-04-14T20:35:31.483932', 'sort_on': 0, 'login_count': None, 'updated_at': '2016-04-14T20:35:31.483953', 'registered_at': None, 'email': u'harriman@example.com', 'last_login_at': '2016-04-14T20:35:31.483996', 'current_login_at': '2016-04-14T20:35:31.484003', 'confirmed_at': None, 'active': True, 'password': u'this is a password', 'id': '644566b0-2a40-4b1d-b005-a0b955786b7a', 'current_login_ip': None}), conflict='replace')\nr.db('frink_tests').table('users').get('644566b0-2a40-4b1d-b005-a0b955786b7a')\nr.db('frink_tests').table('users')\nr.db('frink_tests').table('users').order_by('sort_on')\nr.db('frink_tests').table('users').order_by(r.asc('sort_on'))\nr.db('frink_tests').table('users').order_by(r.desc('sort_on'))\nr.db('frink_tests').table('users').order_by('sort_on').limit(1)\nr.db('frink_tests').table('users').order_by(r.asc('sort_on')).limit(1)\nr.db('frink_tests').table('users').order_by(r.desc('sort_on')).limit(1)\nr.db('frink_tests').table('users').filter(r.expr({'active': True}))\nr.db('frink_tests').table('users').filter(r.expr({'email': 'harriman@example.com'}))\nr.db('frink_tests').table('users').filter(r.expr({'email': 'unknown@example.com'}))\nr.db('frink_tests').table('users').filter(r.expr({'active': True})).order_by('sort_on')\nr.db('frink_tests').table('users').filter(r.expr({'active': True})).order_by(r.desc('sort_on'))\nr.db('frink_tests').table('users').filter(r.expr({'active': True})).order_by(r.asc('sort_on'))\nr.db('frink_tests').table('users').filter(r.expr({'active': True})).order_by(r.desc('sort_on')).limit(1)\nr.db('frink_tests').table('users').filter(r.expr({'active': True})).order_by(r.asc('sort_on')).limit(1)\nr.db('frink_tests').table('users').filter(r.expr({'active': True}))\nr.db('frink_tests').table('users').filter(r.expr({'email': 'harriman@example.com'}))\nr.db('frink_tests').table('users').filter(r.expr({'email': 'unknown@example.com'}))\nr.db('frink_tests').table('users').order_by(r.asc('sort_on')).filter(r.expr({'active': True}))\nr.db('frink_tests').table('users').order_by(r.desc('sort_on')).filter(r.expr({'active': True}))\nr.db('frink_tests').table('users').order_by(r.asc('sort_on')).limit(1).filter(r.expr({'active': True}))\nr.db('frink_tests').table('users').order_by(r.desc('sort_on')).limit(1).filter(r.expr({'active': True}))\nr.db('frink_tests').table('users').filter(r.expr({'active': True}))\nr.db('frink_tests').table('users').filter(r.expr({'email': 'harriman@example.com'}))\nr.db('frink_tests').table('users').filter(r.expr({'email': 'unknown@example.com'}))\nr.db('frink_tests').table('this_table_doesnt_exist').insert(r.expr({'last_login_ip': None, 'roles': [], 'firstname': u'Michael', 'lastname': u'Harriman', 'created_at': '2016-04-14T20:35:31.762826', 'sort_on': 0, 'login_count': None, 'updated_at': '2016-04-14T20:35:31.762843', 'registered_at': None, 'email': u'harriman@example.com', 'last_login_at': '2016-04-14T20:35:31.762887', 'current_login_at': '2016-04-14T20:35:31.762894', 'confirmed_at': None, 'active': True, 'password': u'this is a password', 'id': '60aafbbe-2fa1-4726-b9d0-c4ad40d7fe70', 'current_login_ip': None}), conflict='replace')\nr.db('frink_tests').table('this_table_doesnt_exist').insert(r.expr({'last_login_ip': None, 'roles': [], 'firstname': u'Michael', 'lastname': u'Harriman', 'created_at': '2016-04-14T20:35:31.762826', 'sort_on': 0, 'login_count': None, 'updated_at': '2016-04-14T20:35:31.762843', 'registered_at': None, 'email': u'harriman@example.com', 'last_login_at': '2016-04-14T20:35:31.762887', 'current_login_at': '2016-04-14T20:35:31.762894', 'confirmed_at': None, 'active': True, 'password': u'this is a password', 'id': '60aafbbe-2fa1-4726-b9d0-c4ad40d7fe70', 'current_login_ip': None}), conflict='replace')\nr.db('frink_tests').table('users').filter(r.expr({'email': 'harriman@example.com'})).limit(1)\nr.db('frink_tests').table('users').filter(r.expr({'email': 'harriman@example.com'})).limit(1)\nr.db('frink_tests').table('this_table_doesnt_exist').get('644566b0-2a40-4b1d-b005-a0b955786b7a').delete()\nr.db('frink_tests').table('users').get('harriman@example.com')\nr.db('frink_tests').table('users').filter(r.expr({'email': 'harriman@example.com'}))\nr.db('frink_tests').table('users').get('jombati@example.com')\nr.db('frink_tests').table('users').filter(r.expr({'email': 'jombati@example.com'}))\nr.db('frink_tests').table('roles').filter(r.expr({'name': 'User'})).limit(1)\nr.db('frink_tests').table('roles').filter(r.expr({'name': 'Admin'})).limit(1)\nr.db('frink_tests').table('users').get('644566b0-2a40-4b1d-b005-a0b955786b7a').delete()\nr.db('frink_tests').table('roles').get('89218f02-8411-43ab-89dd-e743c41f1d7e').delete()\nr.db('frink_tests').table('users').get('7aad21e2-b80f-4432-9b9f-9aef51354be5').delete()\nr.db('frink_tests').table('roles').get('9429f950-d06a-413d-81e7-a6ccc0f3a1af').delete()\nr.db('frink_tests').table('users').get('harriman@example.com')\nr.db('frink_tests').table('users').filter(r.expr({'email': 'harriman@example.com'}))\nr.db('frink_tests').table('users').get('jombati@example.com')\nr.db('frink_tests').table('users').filter(r.expr({'email': 'jombati@example.com'}))\nr.db('frink_tests').table('roles').filter(r.expr({'name': 'User'})).limit(1)\nr.db('frink_tests').table('roles').filter(r.expr({'name': 'Admin'})).limit(1)\nr.db('frink_tests').table_drop('name_tests')\nr.db('frink_tests').table_drop('id_tests')\nr.db('frink_tests').table_drop('roles')\nr.db('frink_tests').table_drop('users')\nr.db('frink_tests').table_drop('slug_tests')\n```\n\nLet me know if there's anything else I can add to this report to help out.\n"
  , issueState = "closed"
  , issueId = Id 148464397
  , issueComments = 12
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 505365
                , simpleUserLogin = N "danielmewes"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/505365?v=3"
                , simpleUserUrl = "https://api.github.com/users/danielmewes"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 0
          , milestoneNumber = 121
          , milestoneClosedIssues = 29
          , milestoneDescription = Just ""
          , milestoneTitle = "2.3.1"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/121"
          , milestoneCreatedAt = 2016 (-04) (-20) 20 : 51 : 29 UTC
          , milestoneState = "closed"
          }
  }