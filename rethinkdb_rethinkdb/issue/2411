Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2016 (-05) (-02) 18 : 42 : 29 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/2411/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/2411"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "444444"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:performance"
          , labelName = "tp:performance"
          }
      ]
  , issueNumber = 2411
  , issueAssignee =
      Just
        SimpleUser
          { simpleUserId = Id 505365
          , simpleUserLogin = N "danielmewes"
          , simpleUserAvatarUrl =
              "https://avatars.githubusercontent.com/u/505365?v=3"
          , simpleUserUrl = "https://api.github.com/users/danielmewes"
          , simpleUserType = OwnerUser
          }
  , issueUser =
      SimpleUser
        { simpleUserId = Id 1029519
        , simpleUserLogin = N "PrakashThapa"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1029519?v=3"
        , simpleUserUrl = "https://api.github.com/users/PrakashThapa"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "why ReQL`orderby` and `count` is so expansive?"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/2411"
  , issueCreatedAt = 2014 (-05) (-19) 08 : 40 : 33 UTC
  , issueBody =
      Just
        "I have a join query of two table one with 25K and another 1K, for example this \r\n````\r\nr.table(\"tbl1\").map(function(d){\r\n  return {person:d(\"name\"),value: r.table(\"closed_auctions\").getAll(d(\"id\"),{index:\"buyer_person\"}).count();}\r\n}).orderBy(r.desc(\"value\"))\r\n`````\r\nHere I cannot use `outerjoin` because it don't support secondary indexing for my sql's `left join`\r\nWhen I run with out `orderby` query execute in less then 600ms, but when Run with orderby it takes **36S**, why? I cannot use indexing in this case. similarly `count` is also very expansive. is there any reason?\r\n\r\n"
  , issueState = "open"
  , issueId = Id 33780004
  , issueComments = 22
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 883
          , milestoneNumber = 2
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone are not an immediate priority, and will be periodically revisited. When we decide to work on an issue in backlog, we'll move it to next."
          , milestoneTitle = "backlog"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/2"
          , milestoneCreatedAt = 2012 (-11) (-11) 14 : 16 : 11 UTC
          , milestoneState = "open"
          }
  }