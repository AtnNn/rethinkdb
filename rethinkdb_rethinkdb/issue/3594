Issue
  { issueClosedAt = Just 2015 (-05) (-05) 20 : 27 : 58 UTC
  , issueUpdatedAt = 2015 (-05) (-05) 20 : 27 : 58 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/3594/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/3594"
  , issueClosedBy = Nothing
  , issueLabels = []
  , issueNumber = 3594
  , issueAssignee =
      Just
        SimpleUser
          { simpleUserId = Id 316661
          , simpleUserLogin = N "timmaxw"
          , simpleUserAvatarUrl =
              "https://avatars.githubusercontent.com/u/316661?v=3"
          , simpleUserUrl = "https://api.github.com/users/timmaxw"
          , simpleUserType = OwnerUser
          }
  , issueUser =
      SimpleUser
        { simpleUserId = Id 316661
        , simpleUserLogin = N "timmaxw"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/316661?v=3"
        , simpleUserUrl = "https://api.github.com/users/timmaxw"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Raft table metadata behavior"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/3594"
  , issueCreatedAt = 2015 (-01) (-16) 22 : 06 : 04 UTC
  , issueBody =
      Just
        "Currently, RethinkDB stores table metadata in the semilattices. This means that every server has a copy of the metadata, including a complete list of the names of all of the tables that exist. However, we are planning to change this behavior as part of the Raft project; the table metadata will instead be managed by a Raft instance for that table.\r\n\r\nOne major side effect is that under the new system, a server will not know that a table exists unless it can contact at least one of the servers hosting the table. For example, suppose that we have servers `A`, `B`, `C`, and `D`, where `A`, `B`, and `C` are hosting table `foo`. Under normal conditions, `r.table(\"foo\")` will work on any server. But if server `D` gets isolated from servers `A`, `B`, and `C`, then `r.table(\"foo\")` will return `Table \"foo\" does not exist.` instead of `Cannot reach master for table \"foo\".`. `foo` will also disappear from `table_list()`, `rethinkdb.table_config`, etc. This is a significant change from the pre-Raft behavior, in which every server knows about every table even when not directly connected.\r\n\r\nAnother side effect is that the table metadata cannot be changed unless a quorum of the servers hosting the table are available. For example, suppose server `A` is isolated in the example above. In the pre-Raft behavior, the user can ask server `A` to unilaterally change the table's configuration, and the change will propagate to the other servers when the netsplit is resolved. In the proposed Raft implementation, the configuration cannot be changed unless two of `A`, `B`, and `C` are available (although we will also provide the user with an \"unsafe override\" mechanism that works even if only one is available).\r\n\r\nComments?"
  , issueState = "closed"
  , issueId = Id 54630859
  , issueComments = 29
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 316661
                , simpleUserLogin = N "timmaxw"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/316661?v=3"
                , simpleUserUrl = "https://api.github.com/users/timmaxw"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 0
          , milestoneNumber = 95
          , milestoneClosedIssues = 217
          , milestoneDescription =
              Just "To-do list before shipping auto-failover"
          , milestoneTitle = "2.1"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/95"
          , milestoneCreatedAt = 2015 (-03) (-04) 21 : 09 : 42 UTC
          , milestoneState = "closed"
          }
  }