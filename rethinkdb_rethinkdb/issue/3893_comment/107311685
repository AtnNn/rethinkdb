IssueComment
  { issueCommentUpdatedAt = 2015 (-06) (-01) 05 : 25 : 37 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 316661
        , simpleUserLogin = N "timmaxw"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/316661?v=3"
        , simpleUserUrl = "https://api.github.com/users/timmaxw"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/107311685"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3893#issuecomment-107311685"
  , issueCommentCreatedAt = 2015 (-06) (-01) 05 : 25 : 37 UTC
  , issueCommentBody =
      "OK, I'm implementing a command of the following form:\r\n```\r\ntable.reconfigure(hard_override=True, allow_data_loss=<bool>, dry_run=<bool>)\r\n```\r\nThe return value looks just like the normal return value for `reconfigure` except that instead of saying `reconfigured: 1` it might say something different.\r\n\r\nWhat should the optargs be called? It's important that the `hard_override` optarg make it clear how dangerous this operation is. Perhaps `unsafe_repair`, `emergency_repair`, or `unsafe_override`? I think the `allow_data_loss` optarg speaks for itself.\r\n\r\nCurrently I'm not planning to allow `db.reconfigure(hard_override=True)`. Does that sound reasonable?"
  , issueCommentId = 107311685
  }