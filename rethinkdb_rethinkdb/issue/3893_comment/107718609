IssueComment
  { issueCommentUpdatedAt = 2015 (-06) (-01) 21 : 32 : 59 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/107718609"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3893#issuecomment-107718609"
  , issueCommentCreatedAt = 2015 (-06) (-01) 21 : 32 : 59 UTC
  , issueCommentBody =
      "@timmaxw Oh I mis-interpreted \r\n> Currently I'm not planning to allow db.reconfigure(hard_override=True). Does that sound reasonable?\r\n\r\nas meaning that you couldn't do an override without `allow_data_loss=True`, but I guess you meant that `allow_data_loss` just has to be specified either `False` or `True` explicitly?\r\nAssuming I got it right now, please disregard my comment about not supporting the equivalent of `allow_data_loss=False`. That being said I think `allow_data_loss=False` is misleading because acknowledged writes could still get lost as far as I can tell (or am I wrong about that)?\r\n\r\nOk, how about `emergency_repair=False | 'unsafe_rollback' | 'unsafe_erase'`?\r\n\r\nI think `repair=False` is weird since you can often use `reconfigure` to \"repair\" something without needing hard override. With the new names for the possible options I think `emergency_repair` works better."
  , issueCommentId = 107718609
  }