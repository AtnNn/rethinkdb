IssueComment
  { issueCommentUpdatedAt = 2016 (-06) (-21) 01 : 26 : 21 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/227316397"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/4909#issuecomment-227316397"
  , issueCommentCreatedAt = 2016 (-06) (-21) 01 : 26 : 21 UTC
  , issueCommentBody =
      "@aihornmac Not yet.\r\nI think we might just wait for the efficient implementation based on https://github.com/rethinkdb/rethinkdb/issues/3949 for this.\r\n\r\nThere's now a work-around though since we've added a `includeOffsets` option for `orderby.limit` changefeeds. This is a sketch of how you can do it:\r\n\r\n```js\r\ntable.orderBy({index: ...}).slice(n, m).changes() \r\n```\r\n\r\nbecomes something like this:\r\n```js\r\ntable.orderBy({index: ...}).limit(n + m).changes({includeOffset: true})\r\n  .filter(function(c) {\r\n    return c.hasFields(\"old_offset\").and(c('old_offset').gt(n))\r\n      .or(c.hasFields(\"new_offset\").and(c('new_offset').gt(n)));\r\n  })\r\n```\r\n\r\nSome extra transformations are required in addition to this to properly report changes that move in or out of the range, (in which case we have to replace the `old_val` or `new_val` value by `null`)."
  , issueCommentId = 227316397
  }