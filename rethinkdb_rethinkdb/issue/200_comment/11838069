IssueComment
  { issueCommentUpdatedAt = 2013 (-01) (-03) 09 : 12 : 38 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/11838069"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/200#issuecomment-11838069"
  , issueCommentCreatedAt = 2013 (-01) (-03) 09 : 11 : 24 UTC
  , issueCommentBody =
      "We're in agreement that code quality is a really good idea that pays off many times over, and that capped line-widths contribute to the overall code quality. We try hard to make the codebase readable, and over time we'll impose stricter standards of quality. But, I do take a little offense at the \"switch in people's minds\" comment.\r\n\r\nCode quality does *not* come free -- maintaining a clean codebase is a lot of work, it's a continuum that evolves over time, and even the most mature projects have quality improvements checked in all the time. Rethink is built up by a very close-knit team of engineers who try hard to do a great job every day in the face of many conflicting tradeoffs. Sometimes it means a coding sprint to make the release. So far we've had the luxury of being able to look over each other's shoulders and discuss ideas (and gdb sessions) in realtime. As a result we occasionally end up with code like `multi_throttling_client`. We'll fix it over time, but we can't dedicate resources to refactor the entire codebase to cap line widths for two-three more releases.\r\n\r\nIt's always humbling when people choose to dedicate their time and contribute to rethink, and we'd be delighted if you decided to help (including fixing the offending lines in this issue), but we do have to ask for a little patience.\r\n\r\n> I've looked at the disassembly of the generated release code of rethinkdb, some functions have so much garbage in them, it's astonishing.\r\n\r\nRespectfully, are they on the critical path? If they're demonstrated to affect a real (or even a hypothetical) use case, they will *definitely* be optimized ASAP. If they aren't, we have to deal with more pressing constraints first. Optimizing functions for space that may blow the cache for a microsecond once a day is admittedly pretty low on the priority list."
  , issueCommentId = 11838069
  }