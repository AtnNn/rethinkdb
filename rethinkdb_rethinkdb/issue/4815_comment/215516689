IssueComment
  { issueCommentUpdatedAt = 2016 (-04) (-28) 18 : 17 : 29 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 7431361
        , simpleUserLogin = N "larkost"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/7431361?v=3"
        , simpleUserUrl = "https://api.github.com/users/larkost"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/215516689"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/4815#issuecomment-215516689"
  , issueCommentCreatedAt = 2016 (-04) (-28) 18 : 17 : 29 UTC
  , issueCommentBody =
      "Looking over the code it seems we are using `ssl.SSLContext` for 2 things that we can't get from the normal `ssl.wrap_socket` method:\r\n- disallowing `SSLv2` and `SSLv3`\r\n- setting the `check_hostname` attribute to `True`\r\n\r\nBoth of these are valid security improvements, and certainly we should use them when available, but I wonder if we should make them requirements. Given that question I see three routes to fixing this:\r\n1. Try to use `backports.ssl` as mentioned, but reading their [issues](https://github.com/alekstorm/backports.ssl/issues) does make me worry a bit about chasing bugs.\r\n2. Stop trying to set those two options (BOOO, HISS)\r\n3. Check to see if `SSLContext` is present, and set those options if it is, otherwise preceded without them.\r\n\r\nAnd as a side note: we are currently not using `SSLContext` as it is supposed to be used: that is as a reusable context for multiple connections. I will fix this in the code regardless of the route we decide to take.\r\n\r\n@danielmewes: any opinions on the route we want to take?"
  , issueCommentId = 215516689
  }