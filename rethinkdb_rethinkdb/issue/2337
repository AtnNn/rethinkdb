Issue
  { issueClosedAt = Just 2014 (-05) (-09) 00 : 30 : 28 UTC
  , issueUpdatedAt = 2014 (-07) (-14) 23 : 21 : 09 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/2337/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/2337"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "e102d8"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:bug"
          , labelName = "tp:bug"
          }
      ]
  , issueNumber = 2337
  , issueAssignee =
      Just
        SimpleUser
          { simpleUserId = Id 706854
          , simpleUserLogin = N "AtnNn"
          , simpleUserAvatarUrl =
              "https://avatars.githubusercontent.com/u/706854?v=3"
          , simpleUserUrl = "https://api.github.com/users/AtnNn"
          , simpleUserType = OwnerUser
          }
  , issueUser =
      SimpleUser
        { simpleUserId = Id 8194
        , simpleUserLogin = N "chrisguidry"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/8194?v=3"
        , simpleUserUrl = "https://api.github.com/users/chrisguidry"
        , simpleUserType = OwnerUser
        }
  , issueTitle =
      "rethinkdb.errors.RqlClientError: RqlClientError: Token 1 not in stream cache."
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/2337"
  , issueCreatedAt = 2014 (-05) (-01) 22 : 03 : 52 UTC
  , issueBody =
      Just
        "Following up on our IRC conversation, @iloveagent57 and I were able to reproduce the \"Token X not in stream cache...\" error.\n\nWe're on RethinkDB 1.11.3 using the Python 1.11.0-1 driver.\n\nTo reproduce, run this script once with the argument 'create_data'.  It will build two tables:\n\nlookup: a very small table with 10 documents and numerical ids\n\nbig: a table with 1000 documents, each of which has 10 string fields of about 39,000 bytes, a field referring to one of the 10 integer IDs from lookup and an auto-generated ID.\n\nThe run_query function simulates some of our production code, where we are lazy-instantiating lookup values as we iterate queries (that's what all the first=True business is about).  For brevity, you can run the script without recreating the data each time.\n\nIn our tests, if we do size_of_field=500 (which means 500 copies of the ASCII letters, about 26,000 bytes) the queries run just fine.\n\nWhen we up that to 750 copies of ASCII (39,000 bytes), it fails after the first loop iteration with this exception:\n\n```\nTraceback (most recent call last):\n  File \"./scripts/repro2.py\", line 41, in <module>\n    run_query(connection)\n  File \"./scripts/repro2.py\", line 29, in run_query\n    for index, big_doc in enumerate(rethinkdb.table('big').get_all(3, index='lookup').run(connection)):\n  File \"/home/ubuntu/environment/local/lib/python2.7/site-packages/rethinkdb/net.py\", line 55, in __iter__\n    self.conn._check_error_response(self.responses[0], self.term)\n  File \"/home/ubuntu/environment/local/lib/python2.7/site-packages/rethinkdb/net.py\", line 281, in _check_error_response\n    raise RqlClientError(message, term, frames)\nrethinkdb.errors.RqlClientError: RqlClientError: Token 1 not in stream cache. in:\nr.table('big').get_all(3, index='lookup')\n```\n\nWe know these document sizes are somewhat pathological, but we have lots of documents storing HTML text content of variable length.  It seems that we only see this error for larger streams of larger documents.\n\n``` python\nimport string\nimport rethinkdb\nimport sys\n\ndef create_test_data(connection, number_of_fields, size_of_field):\n    tables = rethinkdb.table_list().run(connection)\n    for table in ['big', 'lookup']:\n        if table in tables:\n            rethinkdb.table_drop(table).run(connection)\n        rethinkdb.table_create(table).run(connection)\n\n    rethinkdb.table('big').index_create('lookup').run(connection)\n    rethinkdb.table('big').index_wait().run(connection)\n\n    for i in xrange(1, 11):\n        rethinkdb.table('lookup').insert({'id': i}).run(connection)\n\n    def fat_document(lookup):\n        doc = {'field_name_number_%s' % i: string.ascii_letters * size_of_field\n               for i in xrange(number_of_fields)}\n        doc['lookup'] = lookup\n        return doc\n\n    for i in xrange(1, 1001):\n        rethinkdb.table('big').insert(fat_document(i)).run(connection)\n\ndef run_query(connection):\n    first = True\n    for index, big_doc in enumerate(rethinkdb.table('big').get_all(3, index='lookup').run(connection)):\n        if first:\n            lookup = rethinkdb.table('lookup').get(3).run(connection)\n            print lookup\n            first = False\n        print index\n    print 'done'\n\nif __name__ == '__main__':\n    connection = rethinkdb.connect(db='test')\n    if 'create_data' in sys.argv:\n        create_test_data(connection, number_of_fields=10, size_of_field=750)\n    run_query(connection)\n```\n"
  , issueState = "closed"
  , issueId = Id 32652052
  , issueComments = 26
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 706854
                , simpleUserLogin = N "AtnNn"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/706854?v=3"
                , simpleUserUrl = "https://api.github.com/users/AtnNn"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 0
          , milestoneNumber = 69
          , milestoneClosedIssues = 10
          , milestoneDescription = Nothing
          , milestoneTitle = "1.12.5"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/69"
          , milestoneCreatedAt = 2014 (-05) (-16) 20 : 37 : 28 UTC
          , milestoneState = "closed"
          }
  }