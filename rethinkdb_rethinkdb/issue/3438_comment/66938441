IssueComment
  { issueCommentUpdatedAt = 2014 (-12) (-15) 01 : 04 : 53 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 265071
        , simpleUserLogin = N "kofalt"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/265071?v=3"
        , simpleUserUrl = "https://api.github.com/users/kofalt"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/66938441"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3438#issuecomment-66938441"
  , issueCommentCreatedAt = 2014 (-12) (-15) 00 : 54 : 35 UTC
  , issueCommentBody =
      "Hmm, if that works for all inputs then it's doable, though slightly awkward; it seems strange to unmarshal a byte stream to an object, manipulate it (such as adding a modified timestamp), then marshaling it to a string again rather than just handing off the object to the driver.\r\n\r\nAre you sure the query tree cannot be changed when accepting arbitrary JSON input? You could be 100% right, but I currently assume that from the nested-array JSON description of the [wire spec](http://rethinkdb.com/docs/driver-spec) that creative input could indeed chain new `Term` objects that were not originally specified.\r\n\r\nEither way, having a strategy firmed up & published would be of great help for expressing confidence in RDB solutions; it's a personal goal of mine to be really clear about the behavior of systems when exposed to arbitrary input. Right now, I don't have anything firm I can point someone to that says either \"we don't need to worry, because X\" or \"we did Z and so we're safe.\" Which in my case could be a mild inhibitor for production usage.\r\n\r\nIf it's determined that no changes to RDB itself are necessary, this ticket can probably be closed in favor of the previously linked [rethinkdb/docs #117](https://github.com/rethinkdb/docs/issues/117) ticket."
  , issueCommentId = 66938441
  }