IssueComment
  { issueCommentUpdatedAt = 2014 (-12) (-16) 03 : 11 : 27 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 265071
        , simpleUserLogin = N "kofalt"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/265071?v=3"
        , simpleUserUrl = "https://api.github.com/users/kofalt"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/67106261"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3438#issuecomment-67106261"
  , issueCommentCreatedAt = 2014 (-12) (-16) 03 : 10 : 18 UTC
  , issueCommentBody =
      "I'm glad that an RDB collaborator asked that, as it definitely validates the need for documentation :D\r\n\r\nThe clearest example from this thread, I think:\r\n\r\n> Another potential source of security issues is the fact that in some languages (e.g. JavaScript), certain ReQL terms identify the opt args parameter based on whether a given argument is an object or not. If the user is able to pass in an object where the developer expected them to pass in for example a string, the RethinkDB driver might interpret the argument as a set of opt args rather than an argument to the query, which can potentially make the query behave in a pretty different way than what the developer had in mind.\r\n\r\nWhich is pretty mild as things go. Are there additional cases? More severe ones?\r\nCould there eventually be future cases, when more ReQL features are implemented?\r\n\r\nI created this ticket because I don't know for sure, and having a [guaranteed mitigation](https://github.com/rethinkdb/rethinkdb/issues/3439) (or assurance that no mitigation is necessary) would be inherently valuable to use cases like mine."
  , issueCommentId = 67106261
  }