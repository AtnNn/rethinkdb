Issue
  { issueClosedAt = Just 2014 (-08) (-22) 22 : 49 : 05 UTC
  , issueUpdatedAt = 2015 (-01) (-02) 21 : 16 : 50 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/2792/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/2792"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "0052cc"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:ReQL_proposal"
          , labelName = "tp:ReQL_proposal"
          }
      ]
  , issueNumber = 2792
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 316661
        , simpleUserLogin = N "timmaxw"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/316661?v=3"
        , simpleUserUrl = "https://api.github.com/users/timmaxw"
        , simpleUserType = OwnerUser
        }
  , issueTitle =
      "Figure out how to handle non-atomicity in semilattice updates through artificial tables"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/2792"
  , issueCreatedAt = 2014 (-08) (-01) 18 : 35 : 16 UTC
  , issueBody =
      Just
        "Suppose that we have an artificial table that is an interface to some data structures in the semilattices. For the sake of discussion, let's pretend we have a row `{\"id\": 123, \"a\": 1, \"b\": 1}`. Now, suppose the user issues an update `{\"id\": 123, \"a\": 2, \"b\": 1}` on one machine and `{\"id\": 123, \"a\": 1, \"b\": 2}` on another. What happens? I can think of two options:\r\n\r\nIf the fields `a` and `b` are controlled by separate vector clocks (or something other than vector clocks; see #2784) then the row will become `{\"id\": 123, \"a\": 2, \"b\": 2}`. It's likely that this is what the user wanted; probably the `{\"id\": 123, \"a\": 2, \"b\": 1}` update was generated by a query like `(...).update({\"a\": 2})`. So if we have two vector clocks, this produces the same result as atomic queries would in some situations. But it also produces confusing behavior in other situations, because it breaks the rule that each document is atomic. For example, suppose that the user wants to enforce an invariant that `a + b < 4`, so they issue `(...).update({\"a\": 2, \"b\": 1})` and `(...).update({\"a\": 1, \"b\": 2})`. The user may be surprised when their invariant is violated.\r\n\r\nIf the fields `a` and `b` are controlled by the same vector clock, the user will get a conflict. If the fields `a` and `b` are controlled together by the system described in #2784, the row will become either `{\"id\": 123, \"a\": 2, \"b\": 1}` or `{\"id\": 123, \"a\": 1, \"b\": 2}`. This is exactly equivalent to the behavior for a query with `non_atomic=True`. But users may find this behavior frustrating if they want to update `a` and `b` independently from different machines.\r\n\r\nI think the second option is less bad, because when it goes wrong, it does so in a way that users understand."
  , issueState = "closed"
  , issueId = Id 39315935
  , issueComments = 7
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Just 2015 (-01) (-23) 08 : 00 : 00 UTC
          , milestoneOpenIssues = 0
          , milestoneNumber = 81
          , milestoneClosedIssues = 321
          , milestoneDescription = Just ""
          , milestoneTitle = "1.16"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/81"
          , milestoneCreatedAt = 2014 (-09) (-04) 04 : 49 : 30 UTC
          , milestoneState = "closed"
          }
  }