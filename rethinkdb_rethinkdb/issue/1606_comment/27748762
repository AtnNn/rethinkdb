IssueComment
  { issueCommentUpdatedAt = 2013 (-11) (-05) 05 : 30 : 27 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 43867
        , simpleUserLogin = N "jdoliner"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/43867?v=3"
        , simpleUserUrl = "https://api.github.com/users/jdoliner"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/27748762"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1606#issuecomment-27748762"
  , issueCommentCreatedAt = 2013 (-11) (-05) 05 : 30 : 27 UTC
  , issueCommentBody =
      "This sounds like a ton of work and I'm really not sure what benefits it has over just using outdated reads. The only advantage this seems to have is that you still get the read your own write guarantee which I don't think will apply to a lot of users since it's pretty rare to do reads and writes on the same connection (seeing as it's apparently pretty rare to even do multiple transactions with the same connection). Also I think if you are doing reads and writes on the same connection then what you're proposing isn't really going to help much. Writes have to have a global ordering to yield a deterministic result so even if you only wait on writes from the same connection those writes have to wait on all the other writes so transitively you're waiting on them too. This could in theory be patched as well but now this is even more work. This really doesn't seem worth it to me."
  , issueCommentId = 27748762
  }