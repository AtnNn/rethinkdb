IssueComment
  { issueCommentUpdatedAt = 2015 (-02) (-06) 22 : 24 : 18 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1366
        , simpleUserLogin = N "deontologician"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1366?v=3"
        , simpleUserUrl = "https://api.github.com/users/deontologician"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/73324127"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3562#issuecomment-73324127"
  , issueCommentCreatedAt = 2015 (-02) (-06) 22 : 24 : 18 UTC
  , issueCommentBody =
      "Over in #1721, there is a lot of discussion about the behavior of `r.and` and `r.or`, and some of it hinges on what to return in the face of `undefined`.\r\n\r\nI know or returning values themselves is sometimes used as an idiom to do defaulting, but we already have `.default`, so I don't know why we'd need that.\r\n\r\n```\r\nval_or_null || backup_val_or_null || default_val\r\n```\r\nis expressed in ReQL as:\r\n```\r\nval_or_null.defaul(backup_val_or_null).default(default_val)\r\n```\r\n\r\nIt's more explicit than these idiomatic uses of `or`. In addition, I haven't ever seen anyone take advantage of `and` returning non-boolean values. It seems it's only done to be consistent with `or`. \r\n\r\nI guess my point is that we already have an explicit way to do defaults. Are there any other examples for why `r.or` and `r.and` returning non-booleans is useful?"
  , issueCommentId = 73324127
  }