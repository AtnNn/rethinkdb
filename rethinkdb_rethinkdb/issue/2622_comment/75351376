IssueComment
  { issueCommentUpdatedAt = 2015 (-02) (-21) 02 : 28 : 34 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/75351376"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2622#issuecomment-75351376"
  , issueCommentCreatedAt = 2015 (-02) (-21) 02 : 28 : 34 UTC
  , issueCommentBody =
      "Thanks so much for the info @ajdavis.\r\nThe Motor API for solving the loop problem looks nice.\r\n\r\nSo to update the complete example with your comments, we would have\r\n```py\r\n#... imports ...\r\n\r\n@gen.coroutine\r\ndef f():\r\n  # throws an exception on error, otherwise returns the run result (in this case a cursor)\r\n  feed = yield r.table(...).changes().run(conn, future=True)\r\n\r\n  while (yield feed.fetch_next):\r\n    # Is guaranteed to have a result since we have already waited on feed.fetch_next\r\n    print feed.next()\r\n\r\nIOLoop.current().run_sync(f)\r\n```\r\n\r\nDoes that look right?\r\n\r\n(sorry for my silly mistakes and questions, I'm pretty unexperienced with Python)"
  , issueCommentId = 75351376
  }