IssueComment
  { issueCommentUpdatedAt = 2015 (-02) (-24) 21 : 48 : 25 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/75853215"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2622#issuecomment-75853215"
  , issueCommentCreatedAt = 2015 (-02) (-24) 21 : 45 : 42 UTC
  , issueCommentBody =
      "Thank you so much @ajdavis for the in-depth explanation.\r\n\r\nWhat if instead of using a generator directly, we implement a special iterator for cursors?\r\n\r\n```py\r\n@gen.coroutine\r\ndef f():\r\n  feed = yield r.table(...).changes().run(conn, future=True)\r\n\r\n  for x in feed:\r\n    print x\r\n```\r\n\r\nwhere `feed.__iter__()` would create something like this:\r\n```py\r\nclass cursor_iterator(object):\r\n  def __init__(self, feed):\r\n    self.feed = feed\r\n\r\n  def next(self):\r\n    return yield self.feed.next()\r\n```\r\n\r\nIs this possible? I might be misunderstanding how these things are working."
  , issueCommentId = 75853215
  }