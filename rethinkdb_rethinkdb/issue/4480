Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2016 (-04) (-29) 22 : 14 : 57 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4480/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/4480"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "0052cc"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:ReQL_proposal"
          , labelName = "tp:ReQL_proposal"
          }
      ]
  , issueNumber = 4480
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 1366
        , simpleUserLogin = N "deontologician"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1366?v=3"
        , simpleUserUrl = "https://api.github.com/users/deontologician"
        , simpleUserType = OwnerUser
        }
  , issueTitle =
      "Proposal: make count and filter more consistent with each other"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4480"
  , issueCreatedAt = 2015 (-07) (-01) 00 : 10 : 18 UTC
  , issueBody =
      Just
        "Currently, `count` accepts a function argument:\r\n\r\n```coffee\r\nfoo.count((x) -> x['bar'])\r\n# equivalent to\r\nfoo.filter((x) -> x['bar']).count()\r\n```\r\n\r\nBut, when you switch to literals, things get ugly:\r\n\r\n```coffee\r\n# count how many entries in the stream equal the string \"bar\"\r\nfoo.count(\"bar\")\r\n# count entries in the stream. \"bar\" is interpreted as true, so nothing is filtered\r\nfoo.filter(\"bar\").count()\r\n# count how many objects in the stream have their \"bar\" field equal to \"x\"\r\nfoo.filter({bar: \"x\"}).count()\r\n# count how many entries in the stream are equal to the document {bar: \"x\"}\r\nfoo.count({bar: \"x\"})\r\n```\r\n\r\nAs discussed in #4459, the behavior for string literals in `.filter` is confusing and probably uncontroversially bad. But I think it would also make sense to bring `.count` into line with filter in accepting pathspecs. While it's a little convenient to be able to do things like `.count(3)`, in practice I bet pathspecs would end up getting used more often.\r\n\r\nI was recently bitten by this, I was debugging a `.count` invocation by replacing it with filter to see what was getting weeded out, and `.filter(pathspec).count()` was returning a different number from `.count(pathspec)`"
  , issueState = "open"
  , issueId = Id 92229000
  , issueComments = 9
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 882
          , milestoneNumber = 2
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone are not an immediate priority, and will be periodically revisited. When we decide to work on an issue in backlog, we'll move it to next."
          , milestoneTitle = "backlog"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/2"
          , milestoneCreatedAt = 2012 (-11) (-11) 14 : 16 : 11 UTC
          , milestoneState = "open"
          }
  }