IssueComment
  { issueCommentUpdatedAt = 2013 (-01) (-15) 17 : 40 : 37 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 290841
        , simpleUserLogin = N "al3xandru"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/290841?v=3"
        , simpleUserUrl = "https://api.github.com/users/al3xandru"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/12279433"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/223#issuecomment-12279433"
  , issueCommentCreatedAt = 2013 (-01) (-15) 17 : 40 : 37 UTC
  , issueCommentBody =
      "mlucy:\r\n\r\nI think not having the old master try to become master again is a good idea.  It might be failing sporadically, and we want to avoid having it repeatedly assume and drop the role of master.\r\n\r\nI don't quite understand what's supposed to happen in the case of a netsplit.  Does the original master just keep serving queries, and discard all of the writes that it served when it rejoins the main cluster?\r\n\r\nAlternatively, is that what the coordinator is for?  Like if the primary can't contact either the coordinator or the vice-primary, it stops serving writes and up-to-date reads?  That seems to have the desirable characteristic that two machines have to fail before we require human intervention, but we don't have two servers handling write queries on opposite sides of a netsplit (or at least not for very long)."
  , issueCommentId = 12279433
  }