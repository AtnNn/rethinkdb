Issue
  { issueClosedAt = Just 2015 (-09) (-21) 21 : 32 : 58 UTC
  , issueUpdatedAt = 2015 (-11) (-10) 02 : 00 : 48 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4780/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/4780"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "009800"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/good_for_contributors"
          , labelName = "good_for_contributors"
          }
      , IssueLabel
          { labelColor = "fef2c0"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/JavaScript%20/%20Coffee"
          , labelName = "JavaScript / Coffee"
          }
      ]
  , issueNumber = 4780
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 521449
        , simpleUserLogin = N "jorrit"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/521449?v=3"
        , simpleUserUrl = "https://api.github.com/users/jorrit"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "(Javascript) Make `each()` return a Promise"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4780"
  , issueCreatedAt = 2015 (-08) (-31) 20 : 24 : 03 UTC
  , issueBody =
      Just
        "Each iteration of `each()` is done asynchronously. In the following code, close would be called before the second iteration of each:\r\n\r\n```javascript\r\ncursor.each(async (err, data) => {\r\n  if(err) throw err;\r\n  await dosomethingasynchronouslywithdata();\r\n});\r\nawait conn.close();\r\n```\r\n\r\nAlmost all methods offer the choice between a callback and a Promise. `each` is an exception: it only offers an `onFinished` callback, but it doesn't return a `Promise`. If this were done, the code would look like:\r\n\r\n```javascript\r\nawait cursor.each(async (err, data) => {\r\n  if(err) throw err;\r\n  await dosomethingasynchronouslywithdata();\r\n});\r\nawait conn.close();\r\n```\r\n"
  , issueState = "closed"
  , issueId = Id 104127421
  , issueComments = 6
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 505365
                , simpleUserLogin = N "danielmewes"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/505365?v=3"
                , simpleUserUrl = "https://api.github.com/users/danielmewes"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Just 2015 (-11) (-11) 08 : 00 : 00 UTC
          , milestoneOpenIssues = 0
          , milestoneNumber = 92
          , milestoneClosedIssues = 84
          , milestoneDescription = Just ""
          , milestoneTitle = "2.2"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/92"
          , milestoneCreatedAt = 2015 (-02) (-03) 22 : 18 : 37 UTC
          , milestoneState = "closed"
          }
  }