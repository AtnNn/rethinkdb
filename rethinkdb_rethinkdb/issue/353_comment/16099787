IssueComment
  { issueCommentUpdatedAt = 2013 (-04) (-09) 08 : 14 : 55 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 220134
        , simpleUserLogin = N "orthecreedence"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/220134?v=3"
        , simpleUserUrl = "https://api.github.com/users/orthecreedence"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/16099787"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/353#issuecomment-16099787"
  , issueCommentCreatedAt = 2013 (-04) (-09) 08 : 14 : 55 UTC
  , issueCommentBody =
      "@wmrowan This is incredibly detailed and answers a lot of my questions/uncertainties. Thank you for taking the time to clear this up. I think I understand functions a lot better now and how to use them.\r\n\r\nOne thing I'm not clear on is the conversion of the language's lambda function into a RQL lambda. I get how it's constructed as far as the structure (calling ADD on the arguments), but is there some sort of translation that maps __add__ to ADD in the driver? If so, how are more complicated functions dealt with? You'll have to bear with me a wee bit since I don't know python. Let's say I do (in JS, which I'm fairly familiar with):\r\n\r\n```javascript\r\nr.table('users').get('fascistpig').do( function(user) { return (user('age') / 16) + 47.8; } )\r\n```\r\n\r\nObviously not that practical, but how does that conversion from a lambda function into a bunch of terms work? And would it be possible to do something like language-specific concatenation:\r\n\r\n```javascript\r\nr.table('users').get('fascistpig').do( function(user) { return (user.('age')) + \"00\"; } );\r\n```\r\n\r\nI've looked over the code for the javascript drive endless times and I'm still hitting my head against the wall trying to figure out how this conversion works.\r\n\r\nThank you for your time."
  , issueCommentId = 16099787
  }