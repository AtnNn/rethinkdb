IssueComment
  { issueCommentUpdatedAt = 2013 (-04) (-09) 09 : 59 : 17 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/16104030"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/353#issuecomment-16104030"
  , issueCommentCreatedAt = 2013 (-04) (-09) 09 : 59 : 17 UTC
  , issueCommentBody =
      "`JAVASCRIPT` term is for executing javascript on the server. You can pass plain text javascript code and it will run inside rethinkdb's embedded v8 engine. Current drivers use a `r.js` operation for it. You *could* do it in your common lisp driver, but what you really want is to compile to actual native rethinkdb terms, not javascript. There reason for this is that `r.expr(1).add(1)` will run in the rethinkdb interpreter, where as `r.js('1 + 1')` will run in v8. The latter is sometimes useful (for example, when native reql is missing an operation), but we really want as much as possible to be implemented natively.\r\n\r\nIt shouldn't be very difficult to construct all the function forms. For example, if you look at our ruby driver, it does it automatically, so when we add a function to the protocol buffers, the ruby driver doesn't need to change at all. It shouldn't be very hard to do it dynamically like that in Common Lisp."
  , issueCommentId = 16104030
  }