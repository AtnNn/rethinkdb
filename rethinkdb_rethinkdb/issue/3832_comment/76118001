IssueComment
  { issueCommentUpdatedAt = 2015 (-02) (-26) 03 : 52 : 14 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/76118001"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3832#issuecomment-76118001"
  , issueCommentCreatedAt = 2015 (-02) (-26) 03 : 51 : 38 UTC
  , issueCommentBody =
      "Thank you for the suggestion @elifarley .\r\n\r\nI personally think this might be on the side of feature-bloat for `rethinkdb import`. Since your data comes in a CSV-like format, you could use standard Unix tools to accomplish this:\r\n```\r\n# Prepend every line by a \"1 \" / \"2 \"\r\nsed 's/.*/1 &/' node-1.log > node-1-annotated.log\r\nsed 's/.*/2 &/' node-2.log > node-2-annotated.log\r\n\r\n# Import into the fields node, when, method-name\r\nrethinkdb import --format csv --delimiter ' ' --no-header --custom-header node,when,method-name -f node-1-annotated.log\r\nrethinkdb import --format csv --delimiter ' ' --no-header --custom-header node,when,method-name -f node-2-annotated.log\r\n```"
  , issueCommentId = 76118001
  }