IssueComment
  { issueCommentUpdatedAt = 2015 (-09) (-18) 00 : 29 : 30 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 877936
        , simpleUserLogin = N "marshall007"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/877936?v=3"
        , simpleUserUrl = "https://api.github.com/users/marshall007"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/141295315"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/4853#issuecomment-141295315"
  , issueCommentCreatedAt = 2015 (-09) (-18) 00 : 28 : 18 UTC
  , issueCommentBody =
      "@deontologician instead of introducing another term, I think that particular problem could be solved more generically for any pseudotype. Depending on the structure of the `ref` pseudotype, something like `ref.info()('value')('id')` (currently the `value` property of `.info()` always a string, but you get the idea).\r\n\r\nThat said, I'd be more in favor of just magically optimizing the `post('author')('id')` case to lookup from the pseudotype value instead of doing the implicit join.\r\n\r\nAnother thing to consider is how to represent one-to-many references. `authors: [ ref(...), ref(...) ]` would be a little verbose. Maybe `ref(db, table, uuid1, ..., uuidN)` with an argument style similar to `getAll`?"
  , issueCommentId = 141295315
  }