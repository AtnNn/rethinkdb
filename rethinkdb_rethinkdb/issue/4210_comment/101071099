IssueComment
  { issueCommentUpdatedAt = 2015 (-05) (-11) 23 : 05 : 42 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 6947
        , simpleUserLogin = N "cayblood"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/6947?v=3"
        , simpleUserUrl = "https://api.github.com/users/cayblood"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/101071099"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/4210#issuecomment-101071099"
  , issueCommentCreatedAt = 2015 (-05) (-11) 23 : 05 : 42 UTC
  , issueCommentBody =
      "@danielmewes I'd really like the rules to be able to be arbitrarily complex using ReQL with a few extra objects for referencing state. Be sure to study the way Firebase does it to get a flavor for what I'm talking about. Basically, you need some core concepts, including:\r\n* An object representing the currently authenticated user\r\n* An object representing the state of a document before a proposed change would occur\r\n* An object representing the state of a document after a proposed change would occur\r\n* Tests for equality, lt, lte, gt, gte, number, string, regex matching\r\n* Ability to specify boolean validation functions at any level of depth in a document that return true or false for whether or not a write/read operation should be allowed. These functions should be able to use ReQL to query the existing db state.\r\n\r\nDoes this make sense?"
  , issueCommentId = 101071099
  }