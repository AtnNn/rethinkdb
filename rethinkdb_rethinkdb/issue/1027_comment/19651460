IssueComment
  { issueCommentUpdatedAt = 2013 (-06) (-18) 23 : 55 : 13 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 646357
        , simpleUserLogin = N "wmrowan"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/646357?v=3"
        , simpleUserUrl = "https://api.github.com/users/wmrowan"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/19651460"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1027#issuecomment-19651460"
  , issueCommentCreatedAt = 2013 (-06) (-18) 23 : 55 : 13 UTC
  , issueCommentBody =
      "This issue, naturally, will be more difficult to fix than the ruby and python versions.\r\n\r\nThough not stated in the title, this issue is also about removing closure once and for all. Switching to a new protobuf library will mean moving to a different protobuf interface and we'll no longer need closure to supply it. There are a few other closure features that we use but those can be fairly easily replaced.\r\n\r\nIn place of the closure dependency graph based script concatenator, @Raynos has recommended we use standard node `require` statements and then use https://github.com/substack/node-browserify to generate a browser compatible script.\r\n\r\nThen there is the question of how we support protobuf serialization in both environments. In an ideal world, a pure JS library that could work in both environments would be almost as fast as a native extension. @Raynos has indicated a preference for a pure JS library as a matter of style though this might not deliver the performance we need. Next best would be a single library with a single interface that supported a fast native backend (for node) and an OK pure JS backend for the browser. One advantage of a dual backend library would be the ability to choose either backend in the server environment for those, like @Raynos who prefer it. Lastly, we might have to fall back to using two different libraries and hide them behind a common interface.\r\n\r\nSadly, based on my search so far, we're probably going to be relegated to the last option."
  , issueCommentId = 19651460
  }