IssueComment
  { issueCommentUpdatedAt = 2013 (-06) (-19) 04 : 00 : 00 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 479538
        , simpleUserLogin = N "Raynos"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/479538?v=3"
        , simpleUserUrl = "https://api.github.com/users/Raynos"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/19661869"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1027#issuecomment-19661869"
  , issueCommentCreatedAt = 2013 (-06) (-19) 04 : 00 : 00 UTC
  , issueCommentBody =
      "> For real-life applications it's not a matter of taste. It's a matter of what is faster. If pure JS can't be fast, forget it.\r\n\r\n - depending on something binary in a library (non application / something published to npm) has a high cost. It means all of your users need to do the compile step for your module\r\n - depending on something binary for my application means it has to compile and work on my deployment target. The re-compilation of binary dependencies is the major bottleneck in our current deploy cycle. It's also something that has to be recompiled locally on every developers machine every time you bump that version number of the module (other dependencies are checked into git and don't need to be installed). \r\n\r\nBinary dependencies are not cheap. In most situations the serialization to and from the database is going to be insignificant compared to the latency, network and server-side querying costs.\r\n\r\nWhether the binary is opt-in or opt-out doesn't matter that much, choose whichever tradeoff is the sensible default for rethinkdb. Having the ability to remove the binary dependency and still having the node driver work is a win though"
  , issueCommentId = 19661869
  }