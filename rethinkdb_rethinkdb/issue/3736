Issue
  { issueClosedAt = Just 2016 (-02) (-05) 02 : 00 : 58 UTC
  , issueUpdatedAt = 2016 (-03) (-30) 23 : 22 : 26 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/3736/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/3736"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "02d7e1"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/cp:reql"
          , labelName = "cp:reql"
          }
      , IssueLabel
          { labelColor = "007575"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:API_settled"
          , labelName = "tp:API_settled"
          }
      , IssueLabel
          { labelColor = "0052cc"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:ReQL_proposal"
          , labelName = "tp:ReQL_proposal"
          }
      ]
  , issueNumber = 3736
  , issueAssignee =
      Just
        SimpleUser
          { simpleUserId = Id 952451
          , simpleUserLogin = N "nighelles"
          , simpleUserAvatarUrl =
              "https://avatars.githubusercontent.com/u/952451?v=3"
          , simpleUserUrl = "https://api.github.com/users/nighelles"
          , simpleUserType = OwnerUser
          }
  , issueUser =
      SimpleUser
        { simpleUserId = Id 706854
        , simpleUserLogin = N "AtnNn"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/706854?v=3"
        , simpleUserUrl = "https://api.github.com/users/AtnNn"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "scan command for operating on ordered sequences"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/3736"
  , issueCreatedAt = 2015 (-02) (-05) 07 : 32 : 07 UTC
  , issueBody =
      Just
        "I have had in mind a command that could be used to implement many operations on sequences that are not currently possible. It would behave a little like `concat_map`, but with state. In pseudo-code, it would be something like this:\n\n```\nsequence.scan(state, f, end) \8801\n  case f(state, head(sequence)) of\n    [state\8242, out] \8594 out.union(tail(sequence).scan(state\8242, f, end))\n    null \8594 \8709\n\8709.scan(state, f, end) \8801\n  end(state)\n```\n\nThe function `f` would be given the current state and the next input row, and it would produce the next state, and possibly generate output rows. `f` could also return `null` to end the sequence. The optional third argument `end` would be called when the input sequence is exhausted.\n\nFor example, it could be used to return every third row:\n\n```\nsequence.scan(0, lambda n, row: [n+1, r.branch(n.mod(3) == 0, [row], [])])\n```\n\nTo group rows without loading the whole table in memory:\n\n```\ntable.order_by(index='time').scan({'val': null, 'group':[]}, lambda state, row:\n  r.branch(state['val'] == row['time'].truncate('seconds'),\n    [{'val': state['val'], 'group': state['group'].add([row])}, []],\n    [{'val': row['time'].truncate('seconds'), 'group': [row]}), [state['group']]],\n  lambda state: [state['group']])\n```\n\nTo count added and deleted rows:\n\n```\nchangefeed.scan(0, lambda n, change:\n  r.branch(change['new_val'],1,0).add(\n    r.branch(change['old_val'],-1,0)).do(\n      lambda new_n: [new_n, [new_n]])))\n```\n\nOr to compute the Fibonacci sequence (compare to http://rethinkdb.com/blog/fib/):\n\n```\nr.range().scan(1, lambda a, b: [a + b, [a]])\n```\n\nWith #3579 it would also open a lot of possibilities for operating on changefeeds.\n\nI also wonder if better abstractions exists for operating on sequences in order and with state.\n"
  , issueState = "closed"
  , issueId = Id 56637011
  , issueComments = 25
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 505365
                , simpleUserLogin = N "danielmewes"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/505365?v=3"
                , simpleUserUrl = "https://api.github.com/users/danielmewes"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 0
          , milestoneNumber = 110
          , milestoneClosedIssues = 150
          , milestoneDescription = Just ""
          , milestoneTitle = "2.3"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/110"
          , milestoneCreatedAt = 2015 (-10) (-05) 20 : 52 : 53 UTC
          , milestoneState = "closed"
          }
  }