IssueComment
  { issueCommentUpdatedAt = 2016 (-02) (-18) 21 : 43 : 48 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/185935136"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/5406#issuecomment-185935136"
  , issueCommentCreatedAt = 2016 (-02) (-18) 21 : 43 : 37 UTC
  , issueCommentBody =
      "Could we merge this message:\r\n```\r\n{\r\n  server_version: \"2.3.2\",\r\n  min_protocol_version: 0,\r\n  max_protocol_version: 5,\r\n  # Maybe other stuff like available encryption options later.\r\n}\r\n```\r\ninto this one:\r\n```\r\n{\r\n  \"success\": false,\r\n  \"error\": \"GTFO\"\r\n}\r\n```\r\n\r\n...to reduce the latency for connection setup a bit? The client would have to send the authentication data before it has heard from the server about the supported protocol versions, but my impression is that that wouldn't be an issue.\r\nThe exception I can think of is if we later want to add additional authentication protocols and the client needs to automatically pick which one to use based on the server's supported variants. That might not be necessary though. We could have the authentication method configurable by the user instead, and if the client tries using an unsupported one, the server will reject the connection in the next step. I think that's probably what we would want anyway, since we typically don't want to silently fall back to a less secure method anyway."
  , issueCommentId = 185935136
  }