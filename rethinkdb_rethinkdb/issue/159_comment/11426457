IssueComment
  { issueCommentUpdatedAt = 2012 (-12) (-17) 00 : 31 : 12 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/11426457"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/159#issuecomment-11426457"
  , issueCommentCreatedAt = 2012 (-12) (-17) 00 : 31 : 12 UTC
  , issueCommentBody =
      "> except that all of the mapping would happen on the coordinating node\r\n\r\nHmm, I don't see why this has to be the case. If the user does `order_by.map`, and the `order_by` clause is executed via using an index, it should be pretty trivial to push `map` down (I guess that's what you said above, but I'm not sure why we aren't doing it already).\r\n\r\nI think that in general we're dealing with these issues in a somewhat ad-hoc way (mainly because we could get away with it), but I'm wondering if we could develop a more formal way of thinking about it. Something like a table of what combinations of operations could be pushed down, which ones couldn't, and an operator that can combine stacks of operations. Then we could generate higher-order transformations based on this table. (These are still very vague ideas, but I think we'll need to think about this more deeply post 1.4 release)."
  , issueCommentId = 11426457
  }