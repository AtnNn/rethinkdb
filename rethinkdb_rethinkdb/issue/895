Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2014 (-07) (-23) 08 : 03 : 15 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/895/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/895"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "e10c02"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/pr:high"
          , labelName = "pr:high"
          }
      , IssueLabel
          { labelColor = "0052cc"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:ReQL_proposal"
          , labelName = "tp:ReQL_proposal"
          }
      ]
  , issueNumber = 895
  , issueAssignee =
      Just
        SimpleUser
          { simpleUserId = Id 1777134
          , simpleUserLogin = N "mlucy"
          , simpleUserAvatarUrl =
              "https://avatars.githubusercontent.com/u/1777134?v=3"
          , simpleUserUrl = "https://api.github.com/users/mlucy"
          , simpleUserType = OwnerUser
          }
  , issueUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Proposal: Generic Object and Array Modification"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/895"
  , issueCreatedAt = 2013 (-05) (-23) 02 : 35 : 38 UTC
  , issueBody =
      Just
        "This is a bit of a project, but I think it could fix a lot of our problems.  I basically think we should implement something similar to Common Lisp's `setf`, but with a more RQL-ish feel.\n\nHere's a rough sketch of the API I'm thinking of:\n\n``` ruby\nobj = {:a => {:b => 1, :c => 2},                  \n       :d => [{:e => 3, :f => 4},                 \n              {:e => 5, :f => 6},                 \n              {:e => 7, :f => 8}]}                \n```\n\n``` ruby\nobj.modify {|x|                                   \n  [x[:a][:c].set(nil),                            \n   x[:d][0].remove]                               \n}                                                 \nres = {:a => {:b => 1, :c => nil},                \n       :d => [{:e => 5, :f => 6},                 \n              {:e => 7, :f => 8}]}                \n```\n\n``` ruby\nobj.modify {|x|                                   \n  [x[:a].remove,                                  \n   x[:g].set(nil),                                \n   x[:d].set(x[:d].map{|y| y.pluck(:e)})]         \n}                                                 \nres = {:g => nil,                                 \n       :d => [{:e => 3}, {:e => 5}, {:e => 7}]}   \n```\n\n``` ruby\nobj[:d].modify {|x|                               \n  [x[0..1].remove,                                \n   x[2].modify {|y| [y[:e].remove, y[:g].set(9)]}]\n}                                                 \nres = [{:f => 8, :g => 9}]                        \n```\n\n``` ruby\nobj.modify {|x|                                   \n  [x[:a][:c].set{|y| y*y},                        \n   x[:d].remove]                                  \n}                                                 \nres = {:a => {:b => 1, :c => 4}}                                       \n```\n\nBasically, inside the body of a `modify` we'd convert our object and array dereferencing commands (both of which are implemented using `[]` in Ruby) into location specifiers, and then create a copy of the first argument to `modify` with the specified locations either set to a new value or removed.  If the users sets a non-existent location, we create that location for them.  (I think that this is an important feature for working with unstructured data, and also helps us keep the interface minimal by obviating the need for an additional `create` command.)\n\n`set` and `remove` would only be defined inside of `modify`.\n---\n\nThis interface is extremely tentative, and I'm not even sure that this is a good idea to begin with.\n"
  , issueState = "open"
  , issueId = Id 14655147
  , issueComments = 3
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 882
          , milestoneNumber = 2
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone are not an immediate priority, and will be periodically revisited. When we decide to work on an issue in backlog, we'll move it to next."
          , milestoneTitle = "backlog"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/2"
          , milestoneCreatedAt = 2012 (-11) (-11) 14 : 16 : 11 UTC
          , milestoneState = "open"
          }
  }