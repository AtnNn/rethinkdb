Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2016 (-10) (-21) 12 : 22 : 06 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4898/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/4898"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "207de5"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/cp:clustering"
          , labelName = "cp:clustering"
          }
      ]
  , issueNumber = 4898
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueTitle =
      "Proposal: Avoid table/db name conflicts in fully connected clusters"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4898"
  , issueCreatedAt = 2015 (-09) (-29) 18 : 07 : 25 UTC
  , issueBody =
      Just
        "In particular ORMs currently suffer from the issue that database and table creation in RethinkDB are not atomic. If a table/database is created from multiple clients concurrently, this will result in a name conflict that needs to be manually resolved.\r\n\r\nIf we could fix this, https://github.com/rethinkdb/rethinkdb/issues/2355 and https://github.com/rethinkdb/rethinkdb/issues/2975 would also become practical.\r\n\r\nThe difficulty with this is that the set of tables and databases is currently eventually consistent, and there are some good reasons to keep it that way. It is one of the core design decisions that allows us to avoid the notion of a server being a \"member\" of the cluster.\r\n\r\nHere's a proposal for a solution that should be relatively easy to do and works without impeding on the availablity of meta operations. It does *not* guarantee immediate metadata consistency in the general case. However it does guarantee consistency if all servers are connected.\r\n\r\nWhen creating/dropping/renaming a table/database follow the following steps:\r\n1. Srv1: Contact the currently connected server with the *smallest* server UUID. Let's call that server srv2. The information that srv1 sends to srv2 includes the type of operation it's trying to perform, and the name of the table/database it's trying to modify.\r\n2. Upon request, srv2 acquires a local mutex and verifies that the operation can be performed successfully. In particular it checks for table/database name conflicts. If the verification passes, it sends a ticket back to srv1.\r\n3. Upon receiving the ticket, srv1 performs the actual operation. When it is done, it returns the ticket to srv2.\r\n4. Srv2 holds on to the mutex after receiving the ticket, until it can verify that the operation performed by srv1 has been reflected in its local meta data. It then releases the mutex\r\n\r\nIf the servers disconnect in the middle of the process, srv1 releases the mutex immediately and srv2 goes ahead with the operation without waiting for a ticket (alternatively it could fail).\r\n\r\nI believe this guarantees consistency as long as all servers in the cluster are fully connected. If a server is missing or connectivity is inconsistent (like in a network partition), it essentially falls back to the current behavior of eventually consistent metadata.\r\n\r\n@VeXocide and others: Any thoughts on this?"
  , issueState = "open"
  , issueId = Id 108925339
  , issueComments = 9
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 505365
                , simpleUserLogin = N "danielmewes"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/505365?v=3"
                , simpleUserUrl = "https://api.github.com/users/danielmewes"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 86
          , milestoneNumber = 123
          , milestoneClosedIssues = 22
          , milestoneDescription = Just ""
          , milestoneTitle = "2.4-polish"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/123"
          , milestoneCreatedAt = 2016 (-04) (-28) 19 : 25 : 10 UTC
          , milestoneState = "open"
          }
  }