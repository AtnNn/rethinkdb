IssueComment
  { issueCommentUpdatedAt = 2014 (-01) (-14) 10 : 46 : 18 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 2303099
        , simpleUserLogin = N "grizwako"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/2303099?v=3"
        , simpleUserUrl = "https://api.github.com/users/grizwako"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/32254429"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1855#issuecomment-32254429"
  , issueCommentCreatedAt = 2014 (-01) (-14) 10 : 42 : 20 UTC
  , issueCommentBody =
      "Sorry for barging in like this :)\r\n\r\nHow aboue .collapse() or however you are gonna call it accepts function/\"reql expression\" which will handle conflicts via named parameter.\r\n\r\nsomething like ```.collapse(\"resolution\" : lambda left,right: ...)```\r\n\r\ncollapse takes an arbitrarily long list of **field names**?\r\nIt would be neat if conflict resolution function could accept values too.\r\n\r\nAlso, you should try te get some use cases for functionalities, i have thought about where collapse would be useful, and mostly joins and some rather obscure cases come to mind.\r\nAnd in handling joins #1466 is for me much much better than .collapse()"
  , issueCommentId = 32254429
  }