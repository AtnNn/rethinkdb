IssueComment
  { issueCommentUpdatedAt = 2014 (-01) (-14) 02 : 10 : 51 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 706854
        , simpleUserLogin = N "AtnNn"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/706854?v=3"
        , simpleUserUrl = "https://api.github.com/users/AtnNn"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/32232958"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1855#issuecomment-32232958"
  , issueCommentCreatedAt = 2014 (-01) (-14) 02 : 10 : 51 UTC
  , issueCommentBody =
      "There is a special case for `left` and `right` because those are the fields returned by join. We could also make joins return a two-element array and have `.collapse` also work on arrays (just like like `.reduce(merge)`).\r\n\r\nI think we should not sort alphabetically because it has no inherent advantage. We could use numerical order so that `a2` sorts before `a12`. Or, since \"tfel\" also sorts before \"tghir\", we could also use the alphabetical order of the reverse of the fields.\r\n\r\nAs an unrelated suggestion, how about renaming fields that conflict:\r\n\r\n````\r\nr.expr({a: {a: 1, b: 2}, b: {b: 3, c: 4}}).collapse('a', 'b', {prefixConflict: True})\r\n{a: 1, 'a.b': 2, 'b.b': 3, c: 4}\r\n````\r\n\r\nThat kind of operation would make it easier to convert SQL into ReQL."
  , issueCommentId = 32232958
  }