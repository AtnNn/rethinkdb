IssueComment
  { issueCommentUpdatedAt = 2014 (-01) (-14) 02 : 19 : 37 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/32233319"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1855#issuecomment-32233319"
  , issueCommentCreatedAt = 2014 (-01) (-14) 02 : 19 : 37 UTC
  , issueCommentBody =
      "@atnnn -- you could make the same argument to say that `order_by` shouldn't sort lexicographically because it has no inherent advantage over sorting by e.g. the reverse of the md5 hash or whatever.  When you need to pick an ordering (which you do when merging several things together), lexicographic is a very sane default.  We also already order the keys in an object lexicographically when comparing two objects (as I would hope everyone does).\r\n\r\nSince there's an easy way to override it, I think we should default to merging with lexicographic preference.\r\n\r\nDoing string munging on field names would turn into a nightmare very quickly.  How do you resolve: `{a: {b.c: 1}, a.b: {c: 1}}` for example?  I wouldn't necessarily be opposed to leaving conflicting fields in their original documents, so `{a: {b: 1, c: 1, d: 1}, b: {c: 1, e: 1}}` would collapse to `{a: {b: 1, c: 1}, d: 1, b: {c: 1}, e: 1}`."
  , issueCommentId = 32233319
  }