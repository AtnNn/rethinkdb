IssueComment
  { issueCommentUpdatedAt = 2015 (-12) (-21) 21 : 56 : 48 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 67937
        , simpleUserLogin = N "encryptio"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/67937?v=3"
        , simpleUserUrl = "https://api.github.com/users/encryptio"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/166434968"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/4746#issuecomment-166434968"
  , issueCommentCreatedAt = 2015 (-12) (-21) 21 : 56 : 48 UTC
  , issueCommentBody =
      "Tracked this down; after adjusting some timers to be faster for better measurement, I saw table create delays from 1.3 to 2.3 seconds (NB: never faster), uniformly distributed (plus a peak of slower ones due to IO spikes on the machine I was testing on.)\r\n\r\nThe majority of the time (precisely 1.0 to 2.0 seconds of it) is caused by the raft election timeout: When we create a table, we create a new raft cluster for it; for any member joining a raft cluster (including on its initial creation), it waits `election_timeout_min_ms` (=1000) to `election_timeout_max_ms` (=2000) before starting an election (to avoid disposing an existing leader unnecessarily.) It immediately wins the election on non-distributed tables because voting for itself already is a majority vote.\r\n\r\nThere's still another 300ms or so of work being done, which is more than I'd like, but just adding a fast path for the raft code will get us almost an order of magnitude speedup on non-distributed table creation. (I have yet to figure out the implementation, and depending on what it is, it might speed up distributed table creation too.)"
  , issueCommentId = 166434968
  }