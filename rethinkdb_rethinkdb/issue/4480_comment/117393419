IssueComment
  { issueCommentUpdatedAt = 2015 (-07) (-01) 02 : 04 : 11 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1366
        , simpleUserLogin = N "deontologician"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1366?v=3"
        , simpleUserUrl = "https://api.github.com/users/deontologician"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/117393419"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/4480#issuecomment-117393419"
  , issueCommentCreatedAt = 2015 (-07) (-01) 02 : 04 : 11 UTC
  , issueCommentBody =
      "Well, in ruby it would be `r.expr([1,2,3]).count{|row| row == x}` that example looks bad because it's in js (which would probably use r.row here).\r\n\r\n> I don't think there are a lot of people expecting it to use pathspecs and then being extremely confused when it instead counts literal objects. \r\n\r\nCount me among them. It was confusing yesterday when I ran into it, specifically because I was expecting to be able to get it working with filter and then switch it to a count afterward.\r\n\r\nI can see where you guys are coming from, `.count(3)` seems intuitive, but `.count(\"foo\")` gets murkier, since it might mean counting objects that have the field foo etc. I feel like reql has developed enough flavor of its own that similarity to python or ruby isn't as good a guideline as consistency with other reql terms.\r\n\r\n"
  , issueCommentId = 117393419
  }