IssueComment
  { issueCommentUpdatedAt = 2014 (-04) (-01) 16 : 34 : 01 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1461947
        , simpleUserLogin = N "neumino"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1461947?v=3"
        , simpleUserUrl = "https://api.github.com/users/neumino"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/39227379"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2169#issuecomment-39227379"
  , issueCommentCreatedAt = 2014 (-04) (-01) 16 : 34 : 01 UTC
  , issueCommentBody =
      "> Could you elaborate on what you mean by \"flatten everything\"? Do you mean normalize?\r\n\r\nYes sorry, I meant normalize.\r\n\r\n> Hmm, I thought a better option would be to expose them as is. The user could then easily write a query to aggregate things as needed.\r\n\r\nI wasn't really clear when I wrote about aggregating things. It's for example the status of a shard. Users shouldn't have to retrieve the status of each hash shards, and then decide of the status of the shard.\r\n\r\nNow the web interface takes a shortcut for that and just consider the status of the first hash shard as the status of the whole shard.\r\n\r\n> Err, I really can't imagine that being user friendly. Can you give an example of when it's more convenient?\r\n\r\nHum, it's because I often need the status of one thing (a table for example), and having to loop over all the elements is not super nice.\r\nIf we normalize the data, arrays are probably better (so we can easily join data). "
  , issueCommentId = 39227379
  }