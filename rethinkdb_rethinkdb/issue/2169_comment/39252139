IssueComment
  { issueCommentUpdatedAt = 2014 (-04) (-01) 20 : 07 : 06 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/39252139"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2169#issuecomment-39252139"
  , issueCommentCreatedAt = 2014 (-04) (-01) 20 : 07 : 06 UTC
  , issueCommentBody =
      "> Also we should try to build an API for our users and not the web interface\r\n\r\nYep, agree with all of that. Higher level API should take care of all of that, so the user should never have to touch the lower level tables unless they want to. I'll post a proposal for the higher level API later.\r\n\r\n> Yes sorry, I meant normalize.\r\n\r\nWe could do it that way. It seems worse to me philosophically, though (and pragmatically). I'd personally prefer a more nosql-y table, and have ability in ReQL to massage it as we need.\r\n\r\n> It's for example the status of a shard. Users shouldn't have to retrieve the status of each hash shards, and then decide of the status of the shard.\r\n\r\nYeah, that makes sense. Pre-aggregating the internal details that the user shouldn't care about is almost certainly a good idea (and hash shards are definitely an internal matter).\r\n\r\n> Hum, it's because I often need the status of one thing (a table for example), and having to loop over all the elements is not super nice.\r\n\r\nBut the point is that you wouldn't have to do that any more. You'd just tack on `.filter({ what_you_want: id_you_want})` and get precisely what you need.\r\n"
  , issueCommentId = 39252139
  }