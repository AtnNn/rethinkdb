IssueComment
  { issueCommentUpdatedAt = 2015 (-05) (-06) 00 : 24 : 13 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1461947
        , simpleUserLogin = N "neumino"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1461947?v=3"
        , simpleUserUrl = "https://api.github.com/users/neumino"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/99270944"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2270#issuecomment-99270944"
  , issueCommentCreatedAt = 2015 (-05) (-06) 00 : 24 : 13 UTC
  , issueCommentBody =
      "So `a.merge(b, c)` is exactly the same as `a.merge(b).merge(c)`\r\n\r\nMeaning that when `c` will be merged, the binding is the result of `a.merge(b)`. I found that a bit surprising, but then I don't have a use case for a variadic merge.\r\n\r\nThe reason why `r.expr({buzz: 1}).merge('foo', {bar: 2})` returning `{bar: 2}` is surprising is because I would expect an error since `r.expr({buzz:1}).merge('foo')` produces `foo` and that `r.expr('foo').merge({bar: 2})` throws an error.\r\n\r\nI would tend to think that `a.merge(b)` should throw if a or b is not an object (could be null), and `null.merge(a) => a` and `a.merge(null) => a`."
  , issueCommentId = 99270944
  }