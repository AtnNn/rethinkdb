IssueComment
  { issueCommentUpdatedAt = 2016 (-06) (-22) 01 : 01 : 30 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/227615749"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/5813#issuecomment-227615749"
  , issueCommentCreatedAt = 2016 (-06) (-22) 01 : 01 : 30 UTC
  , issueCommentBody =
      "Updated proposal with the following changes:\r\n* renamed to write hook\r\n* the first argument to the write hook is now the document's ID\r\n* added `ignore_write_hook` flag to ignore the hook on a per-query basis\r\n* added specification of `getWriteHook` return format\r\n* added note on `r.now` evaluation changes\r\n* added note on backup tool changes\r\n* added note on system table representation\r\n\r\n__Specification__\r\n\r\nThe write hook function has the signature `(id: datum, oldVal : object, newVal : object) -> object`. Each of the objects can also be `null`.\r\n\r\nA write hook function has to be deterministic.\r\n\r\nWhenever a write operation on the table inserts, deletes or modifies a given document, the write hook function will be called with the primary key of the document, the old value of the document (or `null` on inserts) and the new value of the document (or `null` on deletes). It then returns the value that should actually be inserted and/or replaced instead of `newVal`. It can also return `r.error(...)` to abort the write.\r\n\r\nFor simplicity, the write hook function is allowed to return `null` exactly iff `newVal` is `null`. That way we make sure that it doesn't turn an insert/update into a deletion, and doesn't turn a deletion into an update, which could be confusing and might break some assumptions in our code.\r\n\r\n__Configuration API__\r\n\r\nProposal for an API for setting a write function on a given table:\r\n* `tbl.setWriteHook(function)` sets the modifier function or overwrites it if one already exists.\r\n* `tbl.setWriteHook(binary)` variant for `rethinkdb restore` that accepts a binary representation of the function as obtained from `getWriteHook`\r\n* `tbl.setWriteHook(null)` deletes the modifier function\r\n* `tbl.getWriteHook()` returns either `null` or an object of the following form:\r\n```js\r\n{\r\n  \"function\": binary,\r\n  \"query\": \"setWriteHook(function(_var1, _var2, _var3) { return ...; })\" , \r\n}\r\n  ```\r\n\r\nThe `setWriteHook` term requires `\"config\"` permissions on `tbl`.\r\n\r\n__Override__\r\nAny write query can override the write hook. The argument `ignoreWriteHook: true` can be passed to `insert`, `update`, `delete` and `replace` or globally to `run`. If specified, the write hook is not executed.\r\n\r\n__Notes__\r\n* The way `r.row` is evaluated will be changed slightly. `r.now`  in a query will be evaluated based on an `r.now` value in a hidden query environment. The `r.now` value in the environment is set once when the query gets compiled. We no longer replace `r.now` by a date-time constant during query compilation. We will allow `r.now` to appear in write hook functions, and will disallow it to appear in index function. For write hooks, the `r.now` environment value will be taken from the write query's environment.\r\n* The rethinkdb backup tools should be adapted in two ways. First, they should store and restore the write hook function, similar to how they currently store and restore secondary indexes. Secondly, `rethinkdb restore` should use the `ignoreWriteHook` flag for its inserts. I'm not sure what the best default for `rethinkdb import` is. We can also make this configurable.\r\n* The table's entry in `table_config` will get a new field `write_hook` with the same value as what `getWriteHook()` returns when called on the table. For simplicity I think we should make have this field be read-only."
  , issueCommentId = 227615749
  }