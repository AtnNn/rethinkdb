IssueComment
  { issueCommentUpdatedAt = 2013 (-05) (-02) 16 : 33 : 22 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1461947
        , simpleUserLogin = N "neumino"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1461947?v=3"
        , simpleUserUrl = "https://api.github.com/users/neumino"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/17348992"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/732#issuecomment-17348992"
  , issueCommentCreatedAt = 2013 (-05) (-02) 16 : 33 : 22 UTC
  , issueCommentBody =
      "Some blood has been shed, but I eventually had the driver (or at least the methods I needed) to compile with Google Closure with the flag ADVANCED_OPTIMIZATIONS.\r\n\r\nAnd I noticed at that time that the performance were roughly the same. I did a little more investigation, and found that for whatever reason, the program that was changing the governor on my laptop was silently failing... and just using the on_demand governor. That's the reason behind the 70 reads/sec.\r\n\r\n\r\nThat's what I get now with the performance governor, our current driver and one connection.\r\n```\r\n200 reads done in 0.903\r\n200 reads done in 0.918\r\n200 reads done in 0.913\r\n200 reads done in 0.914\r\n200 reads done in 0.919\r\n200 reads done in 0.902\r\n200 reads done in 0.916\r\n200 reads done in 0.892\r\n```\r\n\r\n\r\nWith the optmized driver, I get these results\r\n```\r\n200 reads done in 0.686\r\n200 reads done in 0.782\r\n200 reads done in 0.697\r\n200 reads done in 0.698\r\n200 reads done in 0.702\r\n200 reads done in 0.766\r\n200 reads done in 0.693\r\n200 reads done in 0.692\r\n```\r\n\r\nWhile it's a little faster, is not that much faster.\r\n\r\n\r\nOne reason why it's not that much faster is that I had to overwrite CoffeeScript inheritance and extend the prototype by copying all methods. So I still end up with a huge query object to serialize.\r\nOr maybe the protobuf library is by itself not efficient -- the bottleneck still being the serialization of data.\r\n\r\nI tried to run some tests on 1.3, but I can't get it compiled on my laptop, and it's getting out of the scope, so I didn't try more.\r\n\r\n\r\nI'm closing this issue for now since the original issue was a problem on my laptop.\r\n"
  , issueCommentId = 17348992
  }