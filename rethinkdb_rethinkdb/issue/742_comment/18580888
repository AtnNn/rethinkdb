IssueComment
  { issueCommentUpdatedAt = 2013 (-05) (-28) 21 : 18 : 19 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 646357
        , simpleUserLogin = N "wmrowan"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/646357?v=3"
        , simpleUserUrl = "https://api.github.com/users/wmrowan"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/18580888"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/742#issuecomment-18580888"
  , issueCommentCreatedAt = 2013 (-05) (-28) 21 : 18 : 19 UTC
  , issueCommentBody =
      "All the YCSB benchmarking code currently lives under /home/wmrowan/YCSB on deadshot. Within that folder lives rdb_benchmark which contains scripts and data to directly compare the performance of RethinkDB and MongoDB on the standard YCSB benchmarks.\r\n\r\n#### RDB benchmark Quickstart\r\n1. Copy /home/wmrowan/YCSB to your home folder\r\n* cd to YCSB/rdb_benchmark\r\n* re-run a specific benchmark with `./benchmark.sh <benchmark> <client threads>`, e.g. `./benchmark a 10`\r\n* re-run all standard benchmarks with `./all_benchmark.sh`\r\n* copy any recent build of rethinkdb to rdb_benchmark/ and re-run to test that build\r\n\r\n#### benchmark output\r\nFor each workload run, the benchmark script creates a folder called data_<workload> that holds data and results. The first time a workload is run (and the data folder doesn't exist) be warned that it will take a long time for the workload to run because we need to first insert all of the data into the database. Subsequent runs will go much faster as long as you don't delete the data directory.\r\n\r\nFor each run, the script creates output files called mongodb-<client threads>.out and rethinkdb-<client threads>.out. Subsequent runs of the same workload and thread count will overwrite this output so be sure to copy it elsewhere if you want to save it between runs.\r\n\r\nYCSB produces a lot of output per run but the relevant number are at the top. Our main concern is the line `[OVERALL], Throughput(opts/sec), ******`. You may also be interested in per operation type (read, update, etc.) average latency. You can find these by greping for `[READ], AverageLatency(us), ` etc. Keep in mind that these throughput numbers aggregate all client threads. It might be interesting to build a curve of throughput per thread across different numbers of client threads.\r\n\r\n#### Configuration\r\nBy default the benchmark script runs a single server and 10 client threads in RethinkDB's default mode (durability=hard, noreply=false). The MongoDB equivalent of this is write_concern=fsync_safe. This is meant to recreate what we expect to be a pretty typical setup for our users.\r\n\r\nSome aspects of this configuration are easy to change, some hard. To change the number of threads simply supply the desired number to the benchmark script as the second argument. To change the \"write concern\" you have to edit the file \"common_config\". To test mongo's default configuration rather than rethinkdb's, change the line `mongodb.writeConcern=fsync_safe` to `normal`, `rethinkdb.hard_durability=true` to `false` and `rethinkdb.no_reply=false` to `true`. Setting up more than 1 server is not currently supported by the script. We we get to the point where we want to do this I'll have to do some legwork to get that working.\r\n\r\n#### The numbers so far\r\n\r\nOn pure insert workloads Rethinkdb is currently hitting about 23 ops/sec/thread. Mongo performs similarly on such pure write workloads suggesting that performance here is dominated by fsynchs. Interestingly, pure read workloads on RethinkDB also run at about 23 opts/sec/thread. Here Mongo's performance jumps up to about 480 ops/sec/thread. This should immediately suggest a direction for further inquiry.\r\n\r\nHoning in on specific problems will likely require defining more specific workloads. Take a look at the workload files in YCSB/workloads and https://github.com/brianfrankcooper/YCSB/wiki/Implementing-New-Workloads for more info on how to define new workloads. As long as you name your workload `workload<name>` and place it in the workloads/ folder the benchmark script will be able to find it when run as `./benchmark <name>`."
  , issueCommentId = 18580888
  }