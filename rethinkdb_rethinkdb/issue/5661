Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2016 (-04) (-19) 21 : 23 : 27 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5661/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/5661"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "0052cc"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:ReQL_proposal"
          , labelName = "tp:ReQL_proposal"
          }
      ]
  , issueNumber = 5661
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 67937
        , simpleUserLogin = N "encryptio"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/67937?v=3"
        , simpleUserUrl = "https://api.github.com/users/encryptio"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Add an `error` optarg to `coerceTo`"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5661"
  , issueCreatedAt = 2016 (-04) (-13) 18 : 26 : 36 UTC
  , issueBody =
      Just
        "Someone on Slack brought up `r.expr(\"foo\").coerceTo(\"number\").gt(2)` and wanted to handle the case where the value could not be coereced to a number. `r.default` doesn't work in this case. The only solution that came up was using `r.branch(r.match(...), ...coerceTo('number'), null).gt(2)`, which is ugly and error prone.\n\nI'd like for an optarg to be added to `coerceTo` that allows you to customize its error handling, regardless of source and destination types. Specifically:\n- `r.expr(\"str\").coerceTo(\"number\")` raises a coercion error (as it does now)\n- `r.expr(\"str\").coerceTo(\"number\", error=\"raise\")` raises the same coercion error (in other words, `\"raise\"` is the default)\n- `r.expr(\"str\").coerceTo(\"number\", error=r.literal(anyValue))` returns `anyValue`\n- `r.expr(\"str\").coerceTo(\"number\", error=null)` is a malformed query (and raises an error as such.) The same error is raised with other values of the `error` optarg other than the string `\"raise\"` and calls to `r.literal`.\n- All other type pairs of coercions follow the same rules (failed coercions raise errors in the same situations, setting `error=r.literal(...)` instead gives you a default value.)\n\nI chose to require `r.literal` for a default replacement value and all unknown values to be errors because then we can't define new special values without breaking backwards compatibility (and you wouldn't be able to default to `\"raise\"`, which seems like an unnecessary restriction.)\n\nAllowing the special case of `null` instead of `r.literal(null)` is tempting as it's a very useful default value, but for the sake of not misleading users, I think less special cases is better. (I could probably be convinced otherwise for the specific case of `null`, though.)\n\nThis is an extension to the current definition of `r.literal` which only occurs inside write operations, but I think it's appropriate here (and `r.literal` has no useful semantics on its own anyway.)\n\nIn the future, `error=` could be extended with other strings for common behavior (not that I can think of any right now), or a ReQL function for arbitrary handling.\n\nRelated issues:\n- #1993 mentions an alternative to the specific case of string-to-number, taking the ES3 `parseInt` semantics of using base 36. This proposal is more general, and I think this proposal is also more useful in practice for the string-to-number use case.\n- #2269 has some discussion on exception handling in the middle of ReQL queries, which is an alternate way to solve this problem (e.g. catch a CoercionError.)\n"
  , issueState = "open"
  , issueId = Id 148143698
  , issueComments = 5
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 268
          , milestoneNumber = 41
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone will be revisited after each major release during the planning stage for the major release after it. They will be moved to a specific release milestone if chosen for that release."
          , milestoneTitle = "subsequent"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/41"
          , milestoneCreatedAt = 2013 (-06) (-30) 07 : 32 : 52 UTC
          , milestoneState = "open"
          }
  }