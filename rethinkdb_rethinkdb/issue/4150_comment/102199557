IssueComment
  { issueCommentUpdatedAt = 2015 (-05) (-14) 23 : 35 : 18 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/102199557"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/4150#issuecomment-102199557"
  , issueCommentCreatedAt = 2015 (-05) (-14) 23 : 35 : 18 UTC
  , issueCommentBody =
      "I agree with what @mlucy wrote.\r\n\r\nAllowing arbitrary terms and a global optarg sound like great improvements.\r\n\r\nIn fact I think we should consider having *only* a global optarg for allowing RethinkDB to ignore indexes. The `begin_optimizer` and `end_optimizer` terms allow for more flexiblity, but is that really necessary? (also compare my earlier comment on this: https://github.com/rethinkdb/rethinkdb/issues/4150#issuecomment-97933556 )\r\n\r\nI think picking suitable indexes for operations automatically is a separate issue, and we should keep it separate. While the use cases overlap, it requires a big deal of additional implementation work as far as I can tell. Especially since many ReQL terms right now aren't designed with that in mind. Many of them behave slightly differently when used with an index versus without one.\r\n\r\nAllowing the database to ignore indexes and re-order terms is by itself useful, and I think we shouldn't delay shipping that feature by trying to make index usage completely automatic.\r\n\r\n(Also @kofalt sorry for not replying earlier. Thanks also from my side for your great feedback.)"
  , issueCommentId = 102199557
  }