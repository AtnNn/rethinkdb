IssueComment
  { issueCommentUpdatedAt = 2015 (-08) (-20) 21 : 51 : 41 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 770655
        , simpleUserLogin = N "Morgul"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/770655?v=3"
        , simpleUserUrl = "https://api.github.com/users/Morgul"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/133188454"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/4150#issuecomment-133188454"
  , issueCommentCreatedAt = 2015 (-08) (-20) 21 : 51 : 23 UTC
  , issueCommentBody =
      "So, having read through the first 2/3rds of this issue and skimmed the rest, I feel my use case could be beneficial as a talking point.\r\n\r\nWe have roughly 2 million documents, and wish to store their metadata in RethinkDB. These documents are generated by different business operations, and each has a defined set of business rules for what their metadata must contain, and a less well defined set of what their metadata _may_ contain. (Ex: all insurance forms must have the policy number, but they may or may not also have the social security number, and if they were generated in this special way, they can also contain the date the form was printed.)\r\n\r\nI have been tasked with creating a single service that allows for document retrieval; details are unimportant, but the requirement is that it be a RESTful site, which allows querying of this meta data. This means when a user wants to search for documents, my query amounts to:\r\n\r\n```javascript\r\nr.db('document_store').table('metadata').filter(queryParams)\r\n```\r\n\r\nHow, with this proposal, would I do this efficiently? In a normal RDBMS, I would add secondary indexes on the most commonly used fields, and let it optimize my `where` clause. What I would prefer is, essentially:\r\n\r\n```javascript\r\nr.db('document_store').table('metadata').filter(queryParams, { use_indexes: true })\r\n```\r\n\r\nGiven the discussion, if the solution is instead to write:\r\n\r\n```javascript\r\nr.db('document_store').table('metadata')\r\n    .getAll(555555, { index: 'policyNum' })\r\n    .getAll(999, { index: 'formCode' })\r\n    .getAll(...)\r\n    ...\r\n```\r\n\r\nThat meets my needs, since I can write a function to programmatically generate that query, based on user input. It's still not _convenient_ (which I think is worth a consideration), but it is _acceptable_. \r\n\r\nFrankly, if (in the optimizer case) `.getAll('bar', { index: 'foo' })` === `.filter({foo: bar})`, why should I have to write the more clunky syntax, and chain multiple `.getAll` calls? If all you want is an explicit specification of what index should be used, why not do this: `.filter({policyNum: { value: 555555, index: 'policyNum', formCode: { value: 999, index: 'formCode' } } })`? It's less repetitive, and is also explicit about the indexes to use. (It annoys me if my indexes are simple, therefore the field name is repeated, but that's minor.)\r\n\r\nWhat's not clear to me, however, is if my last example matches what is being proposed, or not? If not, how do I handle my use case?"
  , issueCommentId = 133188454
  }