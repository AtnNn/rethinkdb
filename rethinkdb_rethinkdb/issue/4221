Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2015 (-08) (-18) 21 : 03 : 38 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4221/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/4221"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "fef2c0"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/Python"
          , labelName = "Python"
          }
      ]
  , issueNumber = 4221
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 1981198
        , simpleUserLogin = N "thejsj"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1981198?v=3"
        , simpleUserUrl = "https://api.github.com/users/thejsj"
        , simpleUserType = OwnerUser
        }
  , issueTitle =
      "Allow both default and Tornado connections in the Python driver"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4221"
  , issueCreatedAt = 2015 (-05) (-13) 00 : 14 : 25 UTC
  , issueBody =
      Just
        "Currently,  once you use the `r.set_loop_type`  method and set it to `tornado`, all connections use Tornado and you can't use the driver with its default behavior. \r\n\r\nIt would be more useful if you could set the loop type on a per connection basis by passing a kwarg to `r.connect`. `loop_type=\"tornado\"` might be an option.\r\n\r\nExample: \r\n\r\n```python\r\nconn = r.connect(host='localhost', port=28015, db='rethinkdb_chat')\r\ntornado_conn = yield r.connect(host='localhost', port=28015, db='rethinkdb_chat', loop_type='tornado')\r\n```\r\n\r\nI'm not sure if this syntax is possible to implement in Python though.\r\n\r\nThe idea is that, in the same application you could use regular python and tornado coroutines. An example use case is having a Django app that uses Tornado for changefeeds and socket connections, but also has regular controllers that contain ReQL queries. I ran into this problem while working on https://github.com/thejsj/django-and-rethinkdb."
  , issueState = "open"
  , issueId = Id 75786717
  , issueComments = 2
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 883
          , milestoneNumber = 2
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone are not an immediate priority, and will be periodically revisited. When we decide to work on an issue in backlog, we'll move it to next."
          , milestoneTitle = "backlog"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/2"
          , milestoneCreatedAt = 2012 (-11) (-11) 14 : 16 : 11 UTC
          , milestoneState = "open"
          }
  }