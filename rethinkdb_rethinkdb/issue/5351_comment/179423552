IssueComment
  { issueCommentUpdatedAt = 2016 (-02) (-03) 19 : 40 : 24 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 877936
        , simpleUserLogin = N "marshall007"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/877936?v=3"
        , simpleUserUrl = "https://api.github.com/users/marshall007"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/179423552"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/5351#issuecomment-179423552"
  , issueCommentCreatedAt = 2016 (-02) (-03) 19 : 40 : 24 UTC
  , issueCommentBody =
      "Also, would be nice to have some syntactic sugar allowing you to perform an indexed `.match()` across multiple indices in a single query. For example:\r\n\r\n```js\r\nr.table('files').match('foo.*bar', index=[ 'filename_trigram', 'file_contents_trigram' ])\r\n\r\n// roughly equivalent to:\r\n\r\nr.union(\r\n  r.table('files').match('foo.*bar', index='filename_trigram'),\r\n  r.table('files').match('foo.*bar', index='file_contents_trigram')\r\n).distinct()\r\n```\r\n\r\nThe main reason I think this is preferable over the `union` workaround is because it might allow for the possibility of an efficient [`minimum_should_match`](https://www.elastic.co/guide/en/elasticsearch/reference/2.2/query-dsl-multi-match-query.html#operator-min) and other equivalent options from Elasticsearch in the future."
  , issueCommentId = 179423552
  }