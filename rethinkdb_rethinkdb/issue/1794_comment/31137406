IssueComment
  { issueCommentUpdatedAt = 2013 (-12) (-23) 19 : 02 : 31 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/31137406"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1794#issuecomment-31137406"
  , issueCommentCreatedAt = 2013 (-12) (-23) 19 : 02 : 31 UTC
  , issueCommentBody =
      "@underrun -- with our our syntax `{\"foo : \"bar\", \"fizz\" : \"buzz\"}` would be equivalent to `{\"foo\": {\"bar\": \"some value\", ...}, \"fizz\": {\"buzz\": \"some other value\", ...})`. The trouble is that in the context of join it's hard to define what the actually means. We'd be effectively trying to join two values to the other table, but there are lots of questions:\r\n\r\n* What does it mean to join two values? Is it just an array of values?\r\n* What's the order of the values? (There is no implicit order in json)\r\n\r\nEtc. @jdoliner was making the point that the syntax is too ambiguous and isn't well defined."
  , issueCommentId = 31137406
  }