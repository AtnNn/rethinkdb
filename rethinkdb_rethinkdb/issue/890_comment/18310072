IssueComment
  { issueCommentUpdatedAt = 2013 (-05) (-22) 21 : 45 : 25 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 258437
        , simpleUserLogin = N "srh"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/258437?v=3"
        , simpleUserUrl = "https://api.github.com/users/srh"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/18310072"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/890#issuecomment-18310072"
  , issueCommentCreatedAt = 2013 (-05) (-22) 21 : 44 : 46 UTC
  , issueCommentBody =
      "Soft durability means that we don't try to flush the write to disk immediately, and we don't wait for it to be written to disk.\r\n\r\nno-reply rolled into durability could only make sense in terms of the `run` function.  That durability setting applies to every write in the query (unless some write sets the option itself).  If we put no-reply in the durability option of `run`, that should also apply to all writes.  This means you'd have no way of specifying a no-reply query that simply is designed to avoid large client-server latencies, not eliminate all throttling and the like within the server's query execution.  client/server no-reply should be kept out of the durability option, I think.  It *could* be added later, if for some reason we wanted to support no-reply operations on a per-insert basis or something, right in the middle of the query.\r\n\r\n^^ also the reasons @mlucy said, which I didn't get to write before he posted."
  , issueCommentId = 18310072
  }