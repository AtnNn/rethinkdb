IssueComment
  { issueCommentUpdatedAt = 2014 (-05) (-27) 17 : 08 : 04 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1461947
        , simpleUserLogin = N "neumino"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1461947?v=3"
        , simpleUserUrl = "https://api.github.com/users/neumino"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/44304947"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2465#issuecomment-44304947"
  , issueCommentCreatedAt = 2014 (-05) (-27) 17 : 08 : 04 UTC
  , issueCommentBody =
      "I think it would be simpler to explain things with an example.\r\n\r\nSuppose you run the query\r\n```js\r\n// return the titles of all blog posts\r\nr.db(\"blog\").table(\"posts\").map(function(doc) {\r\n    return doc(\"title\")\r\n})\r\n```\r\n\r\nThe server loads X documents from the disk, retrieves the title of each of them, send them back to the driver and wait.\r\nThe driver receives X documents and gives back a cursor\r\nThe user retrieves the X documents from the cursor, and then requests more data.\r\nThe server loads X more documents from disk, gets the titles and send it back\r\netc.\r\n\r\n\r\nSo the server lazily evaluates the query and therefore doesn't have to keep \"middle data\" in memory or on disks.\r\n\r\n\r\nThe truth is a little more complicated, the server will pre-compute some results to decrease latency."
  , issueCommentId = 44304947
  }