IssueComment
  { issueCommentUpdatedAt = 2014 (-02) (-27) 21 : 55 : 46 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/36296457"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2002#issuecomment-36296457"
  , issueCommentCreatedAt = 2014 (-02) (-27) 21 : 55 : 46 UTC
  , issueCommentBody =
      "Oh actually there might be another way to make taking a snapshot feasible.\r\nLet's say that we implement something like what I proposed in https://github.com/rethinkdb/rethinkdb/issues/1944, i.e. splitting a backfill of a given shard up into a higher number of smaller backfills of subregions of that shard. Then we could take a snapshot of only that subregion (more specifically of the smallest subtree that contains the whole subregion) before backfilling it, and would be able to recover the state from before the backfill.\r\nIf we make the regions small enough, we might be able to make sure that the snapshot doesn't grow out of memory, though it might be tricky if the key distribution is very uneven. Also note that this has only become possible with the new cache, since it supports snapshotting only a subtree (while the old cache would have required snapshotting everything)."
  , issueCommentId = 36296457
  }