Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2016 (-04) (-19) 23 : 09 : 23 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5679/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/5679"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "0052cc"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:ReQL_proposal"
          , labelName = "tp:ReQL_proposal"
          }
      ]
  , issueNumber = 5679
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 159819
        , simpleUserLogin = N "cefn"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/159819?v=3"
        , simpleUserUrl = "https://api.github.com/users/cefn"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Add filter-like boolean operator 'matches' ?"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5679"
  , issueCreatedAt = 2016 (-04) (-18) 12 : 36 : 44 UTC
  , issueBody =
      Just
        "It seems like there's an important bit of syntactic sugar missing from the RethinkDB API unless I've missed it. \n\nIt would allow the truth-testing of document-field-matching using a javascript map like `{role:\"admin\",authenticated:true}`. \n\nIt would have conditional logic equivalent to the map-oriented syntax of [filter](https://rethinkdb.com/api/javascript/filter/) but applied to member fields returning a bool, (as opposed to a map applied to sequences returning a filtered sequence).\n\nMotivation: I would like to be able to filter for both subdocuments which are fields and those which are arrays from my document-oriented store with the convenience of the simplified filter map syntax, without having to expand every matching criterion into an eq() clause as I am currently doing. \n\nUSE CASE\n\nIn my use-case I would like to offer up an API like\n\n``` javascript\n    registry.retrieveWorkshopGroups({\n        workshopFilter:{type:'keynote'},\n        groupFilter:{role:\"facilitator\"}\n    })\n```\n\nHowever, my registry is deliberately designed to hide exactly how the entities are mapped to documents or sub-documents. Consequently, while 'workshop' might be a field member of a document or aggregation, a group might exist as an array in the document or aggregation.\n\nWhile the groupsFilter can be passed the filter(...) function because groups is an array, but there is no way to pass on the workshopFilter map to any ReQL function as part of a 'select' composition as far as I can see, because it's a field not a sequence.\n\nIdeally the same syntax for matching fields as for matching arrays, could be provided by a 'matches' operator (the eq operator is already available, but it requires the target to exactly equal the map, returning false if any ADDITIONAL fields exist, so ).\n\nCurrently I believe the only way to do the above requires me to decompose the {type:keynote} filter specification of workshopFilter (where workshop is a singleton in my aggregation), and procedurally reconstruct subdocument eq() calls against the singleton itself. \n\nCANONICAL USE AND COMPLETE RUNNABLE EXAMPLE\n\nBelow is a complete executable example which works, but would be massively simplified given a boolean operator with a canonical use like...\n\n``` javascript\n.filter(function(doc){\n   return doc(\"workshop\").matches({type:\"keynote\"})\n})\n```\n\n...as it would eliminate the need for my 'workshopCriterionFactory' function, which simply maps from filter-like syntax into singleton .eq syntax in a clunky way.\n\n``` javascript\nvar r = require(\"rethinkdb\"),\n    _ = require(\"lodash\"),\n    Promise = require(\"bluebird\");\n\nr.connect({\n    host:\"localhost\",\n    port:28015\n}).then(function(conn){\n\n    return Promise.resolve()\n        .then(function(){\n            return r.dbDrop(\"sesh\").run(conn);\n        })\n        .then(function(){\n            return r.dbCreate(\"sesh\").run(conn);\n        })\n        .then(function(){\n            conn.use(\"sesh\")\n        })\n        .then(function(){\n            return Promise.all([\n                r.tableCreate(\"users\"       ).run(conn),\n                r.tableCreate(\"workshops\"   ).run(conn),\n            ]);\n        })\n        .then(function(){\n            return Promise.all([\n                r.table(\"users\"     ).indexCreate(\"redemptions_invitationId\",   r.row(\"redemptions\")(\"invitationId\"), {multi:true}).run(conn),\n                r.table(\"users\"     ).indexCreate(\"redemptions_groupId\",        r.row(\"redemptions\")(\"groupId\")     , {multi:true}).run(conn),\n                r.table(\"workshops\" ).indexCreate(\"groups_id\",                  r.row(\"groups\")(\"id\")               , {multi:true}).run(conn),\n                r.table(\"workshops\" ).indexCreate(\"invitations_id\",             r.row(\"invitations\")(\"id\")          , {multi:true}).run(conn),\n            ]);\n        })\n        .then(function(){\n            return Promise.all([\n                r.table(\"users\"     ).indexWait(\"redemptions_invitationId\"  ).run(conn),\n                r.table(\"users\"     ).indexWait(\"redemptions_groupId\"       ).run(conn),\n                r.table(\"workshops\" ).indexWait(\"groups_id\"                 ).run(conn),\n                r.table(\"workshops\" ).indexWait(\"invitations_id\"            ).run(conn),\n            ]);\n        })\n        .then(function(){\n            return Promise.all([\n                r.uuid().run(conn),\n                r.uuid().run(conn),\n                r.uuid().run(conn),\n                r.uuid().run(conn),\n            ]);\n        })\n        .spread(function(userId, workshopId, invitationId, groupId ){\n\n            var userTable = r.table(\"users\");\n            var workshopTable = r.table(\"workshops\");\n\n            var userRecord = {\n                id:userId,\n                redemptions:[\n                    {\n                        invitationId:invitationId,\n                        groupId:groupId,\n                    },\n                ],\n            };\n\n            var workshopRecord = {\n                type:\"keynote\",\n                version:\"0\",\n                invitations:[\n                    {\n                        id:invitationId,\n                        role:\"contributor\",\n                    }\n                ],\n                groups:[\n                    {\n                        id:groupId,\n                        role:\"facilitator\",\n                    }\n                ],\n            };\n\n            return Promise.all([\n                    userTable.insert(userRecord).run(conn),\n                    workshopTable.insert(workshopRecord).run(conn),\n                ])\n                .spread(function(){\n                    var workshopFilter = {type:\"keynote\"}; //this would in the future be a runtime filtering map\n                    var groupFilter = {role:\"facilitator\"}; //this would in the future be a runtime filtering map\n\n                    var workshopCriterionFactory = function(doc){\n                        var filterResult;\n                        for(name in workshopFilter){\n                            var clause = doc(\"workshop\")(name).eq(workshopFilter[name]);\n                            if(typeof filterResult ===\"undefined\"){\n                                filterResult = clause;\n                            }\n                            else{\n                                filterResult = filterResult.and(clause);\n                            }\n                        }\n                        return filterResult;\n                    }\n\n                    return userTable\n                        .filter({\"id\":userId})\n                        .concatMap(function(user){\n                            return user(\"redemptions\")\n                        })\n                        .concatMap(function(redemption){\n                            return workshopTable.getAll(redemption(\"groupId\"), {index:\"groups_id\"}).map(function(workshop){\n                                    return {\n                                        redemption:redemption,\n                                        workshop:workshop,\n                                    }\n                                })\n                                .filter(function(doc){\n                                    return workshopCriterionFactory(doc);\n                                })\n                                .filter(function(doc){\n                                    var groupSelfJoin = {id:redemption(\"groupId\")};\n                                    for (var name in groupFilter) {\n                                        groupSelfJoin[name] = groupFilter[name];\n                                    }\n                                    return doc(\"workshop\")(\"groups\").filter(groupSelfJoin).isEmpty().not()\n                                })\n                        })\n                        .run(conn)\n                        .then(function(result){\n                            return result.toArray();\n                        })\n                        .then(function(arr){\n                            console.log(JSON.stringify(arr, null, '\\t'));\n                            void(0);\n                        });\n                })\n        });\n});\n```\n"
  , issueState = "open"
  , issueId = Id 149138430
  , issueComments = 3
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 268
          , milestoneNumber = 41
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone will be revisited after each major release during the planning stage for the major release after it. They will be moved to a specific release milestone if chosen for that release."
          , milestoneTitle = "subsequent"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/41"
          , milestoneCreatedAt = 2013 (-06) (-30) 07 : 32 : 52 UTC
          , milestoneState = "open"
          }
  }