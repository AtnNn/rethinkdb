IssueComment
  { issueCommentUpdatedAt = 2012 (-11) (-26) 07 : 12 : 27 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 646357
        , simpleUserLogin = N "wmrowan"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/646357?v=3"
        , simpleUserUrl = "https://api.github.com/users/wmrowan"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/10706488"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/100#issuecomment-10706488"
  , issueCommentCreatedAt = 2012 (-11) (-26) 07 : 09 : 57 UTC
  , issueCommentBody =
      "`eval` executes its code in whatever context the call to eval is in (this is what actually makes it quite dangerous). So if you wrap the call to `eval` like this:\r\n```javascript\r\n(function() { return eval(theirJSstring); }).call(theImplicitlyBoundObject)\r\n```\r\nthen `this` will refer to `theImplicitlyBoundObject` within `theirJSstring`. This should work:\r\n\r\n```javascript\r\n\r\nfunction runEvalWith(str, thisObj) {\r\n    return (function() { return eval(theirJSstring); }).call(theImplicitlyBoundObject);\r\n}\r\n\r\n>>> runEvalWith(\"this.name\", {name: 'Bob'})\r\n'Bob'\r\n```"
  , issueCommentId = 10706488
  }