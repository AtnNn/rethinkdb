IssueComment
  { issueCommentUpdatedAt = 2014 (-12) (-16) 03 : 16 : 40 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/67106673"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3439#issuecomment-67106673"
  , issueCommentCreatedAt = 2014 (-12) (-16) 03 : 16 : 40 UTC
  , issueCommentBody =
      "The issue with an argument to a variadic term being interpreted as the opt arg object in some languages aside, @timmaxw has brought up doubt that there are any relevant languages in which there could be a plausible injection issue in the first place.\r\n\r\nIn the other issue https://github.com/rethinkdb/rethinkdb/issues/3438#issuecomment-67021015 @grandquista noted that it would indeed be \"impossible for it to describe a class in Ruby, JavaScript, and Lua.\", as long as the user input comes in in the form of JSON.\r\n\r\nAs soon as the user input comes in as something that allows emulating a ReQL term object in the respective language (usually that requires constructing it such that it looks like an instance of a certain type), `r.const` could be useful for avoiding passing these things over to the server. @timmaxw noted that as far as we're aware, there might not be any relevant language were using a deserialization method that allows this for untrusted user data would be reasonable in the first place however.\r\n\r\nI think for avoiding the \"user data being interpreted as opt arg argument\", `r.args()` would already do the job and we don't really need a new `r.const` term for this aspect of the issue."
  , issueCommentId = 67106673
  }