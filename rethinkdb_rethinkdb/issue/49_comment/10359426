IssueComment
  { issueCommentUpdatedAt = 2012 (-11) (-14) 09 : 07 : 55 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/10359426"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/49#issuecomment-10359426"
  , issueCommentCreatedAt = 2012 (-11) (-14) 09 : 07 : 55 UTC
  , issueCommentBody =
      "So, I think this is slightly more complicated than that.  In particular:\r\n* At least for Ruby, the autogen docs are installed when the user installs the gem.  I think this is true for Python too.  If the user has a tool that gives them autocompletion with documentation (or really any tool, like Ruby's `ri`), it will use the autogen docs, which means they *have* to be good.\r\n* Right now the autogen docs for Ruby are the most reliable documentation for it.  When something's wrong or unclear in our main docs, I look at the Ruby docs to see how it should be.  Since the autogen docs almost always get updated when the actual code is updated (since they're right there), this will probably continue to be true.\r\n* Our main docs are organized by some universal structure, but the autogen docs are organized by the *actual* structure of the language.  If the user is in Ruby, calls `.class` on something, and wonders \"What can I do with a Single_Row_Selection?\", the Ruby docs can answer that.\r\n\r\nAlso, these are probably already hosted by whatever is hosting the package (e.g. http://rubydoc.info/gems/rethinkdb/1.2.6.0/frames)."
  , issueCommentId = 10359426
  }