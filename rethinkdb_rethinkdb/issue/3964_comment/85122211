IssueComment
  { issueCommentUpdatedAt = 2015 (-03) (-23) 17 : 49 : 57 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/85122211"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3964#issuecomment-85122211"
  , issueCommentCreatedAt = 2015 (-03) (-23) 17 : 49 : 33 UTC
  , issueCommentBody =
      "This looks like materialized views https://github.com/rethinkdb/rethinkdb/issues/3171\r\n\r\nThe `into` syntax you're proposing looks interesting, though it poses the question of what happens if someone else also writes into the same table. It might be easier to have explicit \"materialized view\" tables that you could create like this (or similarly):\r\n```\r\nr.viewCreate(\r\n    \"events_count_per_type_10m\",\r\n    r.reql(r.table('events').group( lambda x: [x['type'], x['when'].resolution(10.minutes)] ).count()) )\r\n```\r\nThis relies on something like https://github.com/rethinkdb/rethinkdb/issues/3740 (here I'm using `r.reql` as a possible term)."
  , issueCommentId = 85122211
  }