IssueComment
  { issueCommentUpdatedAt = 2012 (-12) (-03) 18 : 08 : 43 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 646357
        , simpleUserLogin = N "wmrowan"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/646357?v=3"
        , simpleUserUrl = "https://api.github.com/users/wmrowan"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/10964108"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/102#issuecomment-10964108"
  , issueCommentCreatedAt = 2012 (-12) (-03) 18 : 08 : 43 UTC
  , issueCommentBody =
      "@coffeemug Even if there is a way to solve this issue, I'd actually be in favor of dropping `this` altogether in the new spec. All it really saves you from his having to provide a function expression to `r.js` when supplying JS to evaluate in a mapping.\r\n```javascript\r\ntable.map(r.js(function(row) { return row.value }))\r\n```\r\nvs.\r\n```javascript\r\ntable.map(r.js(\"this.value\"))\r\n```\r\n\r\nThough yes, the latter is shorter, this isn't really the expected behavior as `this` is technically supposed to be bound to the receiver object of a method call and there is no obvious method call happening here. Really, this is just part of the general confusion surrounding the implicit variable. Given the syntactic advances we have made with `do` and the lambda syntax I would say that the implicit variable has been obsolete for a long time. This probably isn't the right place to have this discussion so let's talk about it in person when we're all here."
  , issueCommentId = 10964108
  }