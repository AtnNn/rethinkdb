Issue
  { issueClosedAt = Just 2016 (-09) (-02) 01 : 12 : 22 UTC
  , issueUpdatedAt = 2016 (-09) (-02) 01 : 12 : 22 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5813/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/5813"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "fbca04"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/st:in%20progress"
          , labelName = "st:in progress"
          }
      , IssueLabel
          { labelColor = "007575"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:API_settled"
          , labelName = "tp:API_settled"
          }
      , IssueLabel
          { labelColor = "0052cc"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:ReQL_proposal"
          , labelName = "tp:ReQL_proposal"
          }
      ]
  , issueNumber = 5813
  , issueAssignee =
      Just
        SimpleUser
          { simpleUserId = Id 952451
          , simpleUserLogin = N "nighelles"
          , simpleUserAvatarUrl =
              "https://avatars.githubusercontent.com/u/952451?v=3"
          , simpleUserUrl = "https://api.github.com/users/nighelles"
          , simpleUserType = OwnerUser
          }
  , issueUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Proposal: Modifier functions"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5813"
  , issueCreatedAt = 2016 (-06) (-01) 02 : 09 : 23 UTC
  , issueBody =
      Just
        "__Intro__\r\n\r\nModifier functions are the first proposal out of two, which together will allow users to set up expiration / TTL (https://github.com/rethinkdb/rethinkdb/issues/746). I'll post the second part shortly.\r\n\r\nA modifier function is a ReQL function that can be configured on a given table. A modifier function is applied to each write, and can:\r\n* perform schema validation\r\n* rewrite documents or add additional fields, for example a `lastModificationTs` field to implement expiration (TTL)\r\n* implement security rules, such as insert-only tables. In the future, we can extend this concept to expose a user context with the user name and user groups to the modifier function.\r\n\r\n__Specification__\r\n\r\nThe modifier function has the signature `(oldVal : object, newVal : object) -> object`. Each of the objects can also be `null`.\r\n\r\nA modifier function has to be deterministic.\r\n\r\nWhenever a write operation on the table inserts, deletes or modifies a given document, the modifier function will be called with the old value of the document (or `null` on inserts) and the new value of the document (or `null` on deletes). It then returns the value that should actually be inserted and/or replaced instead of `newVal`. It can also return `r.error(...)` to abort the write.\r\n\r\nTo simplify things, I think we should require the modifier function to return `null` exactly iff `newVal` is `null`. That way we make sure that it doesn't turn an insert/update into a deletion, and doesn't turn a deletion into an update, which could be confusing and might break some assumptions in our code.\r\n\r\n__Configuration API__\r\n\r\nProposal for an API for setting a modifier function on a given table:\r\n* `tbl.setModifier(function)` sets the modifier function or overwrites it if one already exists\r\n* `tbl.setModifier(null)` deletes the modifier function\r\n* `tbl.getModifier()` gets a string representation of the current modifier function, or `null`\r\n\r\nThe `setModifier` term requires `\"config\"` permissions on `tbl`.\r\n\r\nThis API could be more straight-forward if we had a ReQL query pseudo-type ( https://github.com/rethinkdb/rethinkdb/issues/3636 ), but I think that would become too much for 2.4. The current API therefore is loosely inspired by the secondary index API.\r\n\r\n__Examples for modifier functions:__\r\n\r\n```js\r\n// Inject a `lastModified` timestamp\r\ntbl.setModifier(function(oldVal, newVal) {\r\n    return newVal.merge({lastModified: r.now}).default(null);\r\n  })\r\n```\r\n(Note that `r.now` is the deterministic `r.now` that's filled in when the write query triggering this is compiled, not when the modifier is set. This might require some extra plumbing to work.)\r\n\r\n```js\r\n// Verify that the documents have certain fields.\r\ntbl.setModifier(function(oldVal, newVal) {\r\n    return r.branch(newVal.hasFields(\"field1\", \"field2\"), newVal, r.error(\"Missing fields\")).default(null);\r\n  })\r\n```"
  , issueState = "closed"
  , issueId = Id 157808808
  , issueComments = 23
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 505365
                , simpleUserLogin = N "danielmewes"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/505365?v=3"
                , simpleUserUrl = "https://api.github.com/users/danielmewes"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 11
          , milestoneNumber = 120
          , milestoneClosedIssues = 16
          , milestoneDescription = Just ""
          , milestoneTitle = "2.4"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/120"
          , milestoneCreatedAt = 2016 (-04) (-07) 18 : 34 : 44 UTC
          , milestoneState = "open"
          }
  }