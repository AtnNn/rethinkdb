IssueComment
  { issueCommentUpdatedAt = 2015 (-12) (-09) 03 : 45 : 24 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/163095798"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3736#issuecomment-163095798"
  , issueCommentCreatedAt = 2015 (-12) (-09) 03 : 43 : 58 UTC
  , issueCommentBody =
      "Here's an alternate proposal:\r\n\r\n* We implement `fold`.  We've needed this for a while.\r\n  - `fold` would be like `reduce`, except it would always proceed left-to-right, and you're able to specify a `base`.  (So the function signature is `.fold(lambda acc, el: ...` or `.fold(lambda acc, el: ..., base=...)`.\r\n  - If no base is specified, `fold` will treat the first element of the sequence as the base.\r\n  - If the stream is empty, the base is returned.  Otherwise the result of the last function invocation is returned.\r\n  - If the stream is empty and no base is specified, it's a non-existence error.\r\n* We add an optarg `emit` to `fold`.  `emit` will be set to another function that also receives the accumulated value and the current value, but instead of returning a new accumulated value returns an array of elements to be added to the output.\r\n  - If `emit` is set, then we accumulate the emitted values and return that rather than returning the result of the last call to the accumulator function.\r\n\r\nI sort of like this because it kills two birds with one stone, and it lets people get scan functionality by building on a term that's easier to understand.\r\n\r\nAnother advantage is that the emitter function and base are labeled as such, rather than relying on returning an array where the positions have semantic meaning.\r\n\r\n---\r\n\r\nHere are two optional extensions to this proposal:\r\n* Allow people to receive the result of the accumulator function in the `emit` function.  This lets you avoid a lot of code duplication sometimes (you would otherwise have to include a copy of the accumulator function in the emit function).\r\n  - Option 1: if the `emit` function takes 3 arguments instead of 2, we pass the result of the accumulator function to it.  So `emit=function(acc, row, new_acc) { ... }`.  (I think I prefer this option.)\r\n  - Option 2: You can specify `emit_after` to receive the new value.  So `emit=function(new_acc, row) { ... }`.\r\n* Allow people to also specify a function that runs once the entire stream is processed and receives the last return value of the accumulator function.  Maybe something like `final_emit=function(final_acc) { ...}`.  I'm not sure we need this, but it might be useful.\r\n\r\n---\r\n\r\nHere are the examples Etienne gave redone in this syntax:\r\n\r\nReturn every 3rd row:\r\n```\r\nseq.fold(lambda acc, row: acc+1,\r\n         base=0,\r\n         emit=lambda acc, row: r.branch(acc%3 == 0, [row], []))\r\n```\r\n\r\nCount added and deleted rows (Etienne's implementation looks incorrect to because it never uses the variable `n`):\r\n```\r\nchanges.fold(lambda acc, change: acc + r.branch(change['new_val'], 1, 0) + r.branch(change['old_val'], -1, 0),\r\n             base=0,\r\n             emit=lambda acc, change, new_acc: [new_acc])\r\n```\r\n\r\n(Notably, the first two lines of this are the **same thing** you'd write if you just wanted to count the number of changes rather than keeping a running tally!  I think that's cool.)\r\n\r\nCompute fibonacci sequence (Etienne's implementation of this looks incorrect to me too, unless I'm misunderstanding his proposal, because he seems to be adding the accumulator variable to the elements of the range rather than summing the last two accumulated values):\r\n```\r\nr.range().fold(lambda acc, _: [acc[1], acc[0] + acc[1]],\r\n               base=[0, 1],\r\n               emit=lambda acc, _: [acc[1]])\r\n```\r\n\r\n"
  , issueCommentId = 163095798
  }