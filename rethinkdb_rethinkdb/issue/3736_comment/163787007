IssueComment
  { issueCommentUpdatedAt = 2015 (-12) (-10) 23 : 37 : 24 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/163787007"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3736#issuecomment-163787007"
  , issueCommentCreatedAt = 2015 (-12) (-10) 23 : 37 : 24 UTC
  , issueCommentBody =
      "I *really* like that proposal.\r\n\r\nThe one thing I find minimally confusing is when the `emit` function is run compared to the accumulator function. In the proposal, `emit` is semantically run *before* the accumulator is updated right? That is the `row` that's passed into `emit` is not yet reflected in `acc`.\r\n\r\nThe extension with `emit=function(old_acc, row, new_acc)` makes it more obvious (and I like that syntax).\r\n\r\nI suspect this likely isn't an issue, but I could see someone getting confused by not realizing which version of the accumulator a two-argument `emit` function is going to get passed in. I think we shouldn't worry about it, and just make sure that we always call the argument `old_acc` or `prev_acc` instead of just `acc` in the documentation.\r\n\r\nCould `fold` be used with an `emit` argument but without a `base` argument? In that case we need to figure out what to pass into `emit` for the first row. We could pass in `null`, or we could require a `base` argument when `emit` is being used.\r\nI have a slight preference for passing in `null`, so that `default` can be used inside of `emit` to handle the initial case."
  , issueCommentId = 163787007
  }