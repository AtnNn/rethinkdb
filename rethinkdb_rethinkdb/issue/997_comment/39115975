IssueComment
  { issueCommentUpdatedAt = 2014 (-03) (-31) 17 : 25 : 19 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 706854
        , simpleUserLogin = N "AtnNn"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/706854?v=3"
        , simpleUserUrl = "https://api.github.com/users/AtnNn"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/39115975"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/997#issuecomment-39115975"
  , issueCommentCreatedAt = 2014 (-03) (-31) 17 : 25 : 19 UTC
  , issueCommentBody =
      "Here's a proposal for triggers:\r\n\r\n* `r.table(...).trigger_create(triggering_actions, triggered_reaction, name=trigger_name)`\r\n  * Returns `{db:'db', table:'table', name:'name'}` where the name is autogenerated if the name parameter is not passed.\r\n* `r.table(...).trigger_drop(trigger_name)`\r\n* `r.table(...).trigger_list()` or just `info()['triggers']`\r\n\r\nThe triggering_actions would be a list of all or some of `'after_insert'`, `'after_delete'`, `'after_replace'`, `'before_insert'`, `'before_delete'` or `'before_replace'`.\r\n\r\nThe triggered_reaction would be a function that receives an object of the form `{old_val: ..., new_val: ...}` where old_val is `null` for inserts, and new_val is `null` for deletes.\r\n\r\n* For `before_*` actions, the function would return either null, to delete the row, or an object, to override the new_val.\r\n* For `after_*` actions, the return value of the function is ignored.\r\n\r\nI also propose adding feeds, with this API:\r\n\r\n* `r.db(...).feed_create(name=optional_name, queue=..., keep=...)` returning a string, the name of the feed\r\n* `r.feed_close(name)`\r\n* `sequence.feed_write(name)` returning null\r\n* `datum.feed_write(name)` returning null\r\n* `r.feed_read(name)` returns a sequence or datum\r\n\r\nThe options for `feed_create` would mean:\r\n\r\n* `queue=false` (default): there can be more than one reader, and items get dropped off the queue if there are no readers.\r\n* `queue=true`: there can only be one reader, but items get queued when there is no reader.\r\n* `keep=false` (default): after the first read, the feed gets deleted when there are no more readers or when there are no more writers.\r\n* `keep=true`: the feed does not get deleted.\r\n\r\nAs a special case, `trigger_create` would create a temporary feed and return a sequence. Calling `.feed_write()` with no arguments inside the triggered function will write to that sequence. If there is such a call, the trigger gets dropped when the feed is closed."
  , issueCommentId = 39115975
  }