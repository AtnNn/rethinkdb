IssueComment
  { issueCommentUpdatedAt = 2014 (-03) (-31) 21 : 32 : 02 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/39144733"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/997#issuecomment-39144733"
  , issueCommentCreatedAt = 2014 (-03) (-31) 21 : 31 : 32 UTC
  , issueCommentBody =
      "A few more notes:\r\n\r\n```python\r\n# What happens in these cases? It would be extremely\r\n# convenient to make it work, but should they be equivalent?\r\nr.table('foo').filter(r.row['age'] > 50).onChange()\r\nr.table('foo').onChange().filter(r.row['age'] > 50)\r\n```\r\n\r\nAlso, if we do #2134 in time, we can extend the API as follows:\r\n\r\n```python\r\ncursor = r.table('users').onChange(since=timestamp)\r\nevent = cursor.next()\r\n```\r\n\r\nIf we do this, `next` would return an additional field `timestamp`. If passed that back to `onChange`, the cursor would return all documents that have been changed since the timestamp before returning realtime events. It couldn't return a *diff* for those documents, but there isn't much we can easily do about that.\r\n"
  , issueCommentId = 39144733
  }