IssueComment
  { issueCommentUpdatedAt = 2014 (-04) (-05) 00 : 09 : 07 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/39622951"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/997#issuecomment-39622951"
  , issueCommentCreatedAt = 2014 (-04) (-05) 00 : 09 : 07 UTC
  , issueCommentBody =
      "> That's a bug in the implementation.\r\n\r\n> All the parts designed for finite result sets, any part not designed for processing a big hose of incoming writes that were splayed out to shards on different servers.\r\n\r\nSaying that changefeeds can't be streams because of unspecified conflicts with a type system that is different from the current implementation and not written down anywhere isn't particularly helpful.  Could you be more specific?\r\n\r\n(An example of being more specific would be \"we don't want to let people run aggregations or `foreach` on feeds\", which is a reasonable concern.  It may be that we want to extend our type system to include a type \"Feed\" which inherits from \"Stream\" but allows a different set of operations (the way \"Selection\" does now), and which decays to a stream when sent to the clients (once again like \"Selection\" does now).  Or actually, maybe \"Stream\" should inherit from \"Feed\" and we should call it something more general, since it will probably support a subset of the legal operations you can perform on a \"Stream\".)"
  , issueCommentId = 39622951
  }