IssueComment
  { issueCommentUpdatedAt = 2013 (-09) (-21) 10 : 14 : 55 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1951912
        , simpleUserLogin = N "flipchart"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1951912?v=3"
        , simpleUserUrl = "https://api.github.com/users/flipchart"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/24859885"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1466#issuecomment-24859885"
  , issueCommentCreatedAt = 2013 (-09) (-21) 10 : 14 : 55 UTC
  , issueCommentBody =
      "@mlucy how about having an optarg which takes in the two join sequences and maps to a single sequence result? Something like\r\n\r\n    r.table(\"people\").eq_join(\"spouse\", r.table(\"people\"), lambda person, spouse: { \"PersonName\": person[\"Name\"], \"Spouse\": spouse })\r\n\r\n    # =>\r\n\r\n    [\r\n\t\t{ \r\n\t\t\t\"PersonName\": \"John Doe\",\r\n\t\t\t\"Spouse\":\r\n\t\t\t{\r\n\t\t\t\t\"Id\": 2,\r\n\t\t\t\t\"Name\": \"Jane Doe\",\r\n\t\t\t\t\"Age\": 32\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"PersonName\": \"Sam Smith\",\r\n\t\t\t\"Spouse\":\r\n\t\t\t{\r\n\t\t\t\t\"Id\": 4,\r\n\t\t\t\t\"Name\": \"Mary Smith\",\r\n\t\t\t\t\"Age\" 22\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n\r\nThis makes it similar to the [.Net LINQ Join method][1] which would look something like this:\r\n\r\n    var people = ...;\r\n\t\r\n\tpeople.Join(people, x => x.Id, x => x.SpouseId, (person, spouse) => new { PersonName: person.Name, Spouse: spouse });\r\n\t\r\nThe second and third parameters are the values to join on which should match for the method to join up the records. \r\n\r\n[1]: http://msdn.microsoft.com/en-us/library/system.linq.enumerable.join.aspx"
  , issueCommentId = 24859885
  }