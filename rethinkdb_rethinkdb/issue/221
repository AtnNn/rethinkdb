Issue
  { issueClosedAt = Just 2013 (-03) (-12) 12 : 40 : 09 UTC
  , issueUpdatedAt = 2014 (-04) (-03) 20 : 50 : 19 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/221/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/221"
  , issueClosedBy = Nothing
  , issueLabels = []
  , issueNumber = 221
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 747641
        , simpleUserLogin = N "thisandagain"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/747641?v=3"
        , simpleUserUrl = "https://api.github.com/users/thisandagain"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Follow node.js conventions for callbacks"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/221"
  , issueCreatedAt = 2013 (-01) (-13) 23 : 29 : 36 UTC
  , issueBody =
      Just
        "I truly hope that this isn't divisive, but I would like to open a discussion on migrating the callback interface for the RethinkDB node.js module over to the convention of `callback(err, result)` rather than the current interface which tends towards separation of the `error` and `result` callback functions. Likewise, for events (like `run()` or `next()`) I propose following the node.js event emitter pattern more closely.\n\nThe reasons for this are various, but the three that I find most compelling are:\n- Reducing boilerplate\n- The current interface conflates the callback and event emitter patterns\n- Following conventions will ease the process of on-boarding new users to RethinkDB\n---\n\nIn terms of boilerplate, the issue that exists within the current interface implementation is that it requires a fair amount of mindless code to integrate RethinkDB into the vast majority of existing NPM modules (and even node core itself). For example, let's look at (a somewhat silly example of) how RethinkDB would currently work with `async` (#3 most depended on NPM module):\n\n``` javascript\nvar async = require('async'), \n     r         = require('rethinkdb');\n\nasync.auto({\n    connect: function (callback) {\n        r.connect({\n            host:   'localhost', \n            port:   28015\n        }, function (client) {\n           callback(null, client);\n        }, function (e) {\n           callback(e);\n        });\n    },\n    thing: function (callback) {\n        thing('argument', callback);\n    }\n}, function (err, obj) {\n    // Do something else\n});\n```\n\nTo show how this would be simplified, we can use a theoretically normative interface on the RethinkDB module:\n\n``` javascript\nvar async = require('async'), \n     r         = require('rethinkdb');\n\nasync.auto({\n    connect: function (callback) {\n        r.connect({\n            host:   'localhost', \n            port:   28015\n        }, callback);\n    },\n    thing: function (callback) {\n        thing('argument', callback);\n    }\n}, function (err, obj) {\n    // Do something else\n});\n```\n\nCertainly this is a minimal gain in terms of simplicity, but I do think that this relates closely to the next two issues:\n---\n\nThese can be merged together into one example as I believe that they are consequent. As NPM modules as a collective whole and even node.js itself have evolved, a separation of interface norms has developed between the standard callback convention and what I would sum up (read: oversimplify) as the eventive convention. Yes, both are events \8211 and yes, both are capable of performing both of these types of behaviors, but in practice, the two haven taken on distinct roles. For example, here is what I would argue is the normative implementation and interface of a \"callback\":\n\n``` javascript\nfunction task (param, callback) {\n    if (param !== 'hello') return callback('Invalid input');\n    callback(null, param + ' world');\n}\n\ntask('hello', function (err, obj) {\n    // Do something\n});\n```\n\nAs far as events go, I think the node.js [stream](http://nodejs.org/api/stream.html) and [event emitter](http://nodejs.org/api/events.html) docs do a good job of illustrating that pattern. In order to illustrate where I believe these two patterns are being conflated, let's look at how the `connect` method could be implemented in both. First the callback pattern:\n\n``` javascript\nr.connect({\n    host:   'localhost', \n    port:   28015\n}, function (err, connection) {\n    if (err) throw('Oh no');\n    // do something with the connection\n});\n```\n\nNext, let's look at the event pattern:\n\n``` javascript\nvar emitter = r.connect({\n    host:   'localhost', \n    port:   28015\n});\n\nemitter.on('error', function (err) {\n    throw('Oh no');\n});\n\nemitter.on('connect', function (connection) {\n    // do something with the connection\n});\n```\n\nObviously the event emitter pattern is not appropriate in this instance as we only ever expect to generate either one error or one connection from our call to `r.connect()`. The current implementation which I argue falls somewhere in-between these two norms is confusing in that it provides an interface that is somewhat indicative of an event emitter, but only will ever return once per call. A similar but opposite issue exists for the `run()` and `next()` methods which follow a pattern that is normally understood as returning \"once\" but in fact operate within iterator.\n\nThis is quite the pedantic issue, but so much of what I appreciate about RethinkDB is an mindfulness and dedication to detail. Any feedback is graciously appreciated.\n"
  , issueState = "closed"
  , issueId = Id 9928296
  , issueComments = 59
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 0
          , milestoneNumber = 5
          , milestoneClosedIssues = 227
          , milestoneDescription = Just ""
          , milestoneTitle = "1.4"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/5"
          , milestoneCreatedAt = 2012 (-12) (-21) 23 : 41 : 54 UTC
          , milestoneState = "closed"
          }
  }