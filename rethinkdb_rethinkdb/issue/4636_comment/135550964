IssueComment
  { issueCommentUpdatedAt = 2015 (-08) (-27) 20 : 46 : 38 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/135550964"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/pull/4636#issuecomment-135550964"
  , issueCommentCreatedAt = 2015 (-08) (-27) 20 : 46 : 38 UTC
  , issueCommentBody =
      "My only concern is how this relates to #117. For example, if we add `r.uuid(type='scheme1 | scheme2 | etc')`, passing a name to `r.uuid` won't make sense in all cases.\r\n\r\nThe options I can think of:\r\n\r\n- Just merge the patch, and then add another term for other types of key generation later.\r\n- Adjust the patch to make the string a named optarg.\r\n- Merge the patch; when we add other schemes we can throw if the user passes a string.\r\n- merge the patch; when we add other schemes, break the API and make the string a named optarg then.\r\n\r\n@mlucy @danielmewes -- what do you think?"
  , issueCommentId = 135550964
  }