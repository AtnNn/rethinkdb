IssueComment
  { issueCommentUpdatedAt = 2015 (-03) (-31) 17 : 59 : 26 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1366
        , simpleUserLogin = N "deontologician"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1366?v=3"
        , simpleUserUrl = "https://api.github.com/users/deontologician"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/88189031"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3995#issuecomment-88189031"
  , issueCommentCreatedAt = 2015 (-03) (-31) 17 : 59 : 26 UTC
  , issueCommentBody =
      "We have [contains](http://rethinkdb.com/api/python/contains/) but we don't use `__contains__` as syntactic sugar to allow the `in` operator because it coerces the return value into a boolean, and we need it to return a reql term type.\r\n\r\nSo for example, if you write this class:\r\n\r\n```python\r\n\r\nclass Bar(object):\r\n    pass\r\n\r\nclass Foo(object):\r\n    def __contains__(self, other):\r\n        return Bar()\r\n```\r\n\r\nIt won't do what you expect:\r\n\r\n```bash\r\n>>> f = Foo()\r\n>>> 13 in f\r\nTrue\r\n```\r\n"
  , issueCommentId = 88189031
  }