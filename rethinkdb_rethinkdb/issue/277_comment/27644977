IssueComment
  { issueCommentUpdatedAt = 2013 (-11) (-03) 13 : 55 : 52 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1478120
        , simpleUserLogin = N "davidthomas426"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1478120?v=3"
        , simpleUserUrl = "https://api.github.com/users/davidthomas426"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/27644977"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/277#issuecomment-27644977"
  , issueCommentCreatedAt = 2013 (-11) (-03) 13 : 55 : 52 UTC
  , issueCommentBody =
      "I got it working without compiler optimization, but with optimization I'm having problems when a coroutine migrates to another thread and then accesses thread-local storage. For example, suppose a coroutine is on thread 0, and wants to move to thread 1. The optimizer causes the coroutine to cache the thread pointer for thread 0 in a register, then move to thread 1, then use the cached thread pointer, which is now incorrect.\r\n\r\nA Google search revealed other people discussing this problem, which is not just for ARM:\r\n\r\n* [http://permalink.gmane.org/gmane.comp.lang.c%2B%2B.isocpp.proposals/3137]\r\n* [http://www.crystalclearsoftware.com/soc/coroutine/coroutine/coroutine_thread.html]\r\n"
  , issueCommentId = 27644977
  }