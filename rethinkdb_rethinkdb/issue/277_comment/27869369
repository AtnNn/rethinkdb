IssueComment
  { issueCommentUpdatedAt = 2013 (-11) (-06) 12 : 30 : 02 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1478120
        , simpleUserLogin = N "davidthomas426"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1478120?v=3"
        , simpleUserUrl = "https://api.github.com/users/davidthomas426"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/27869369"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/277#issuecomment-27869369"
  , issueCommentCreatedAt = 2013 (-11) (-06) 12 : 30 : 02 UTC
  , issueCommentBody =
      "It only works when compiled without optimization, so I didn't want to submit a pull request yet. With optimization, the first thread-local access after a coroutine migrates to a different thread results in a segfault (because it's looking at the wrong thread's version of the thread-local). The problem is, I'm not sure how to fix this problem (well, short of something crazy...like storing a global array for each thread-local variable storing the addresses of the variable on each thread, and using the gettid syscall to find out what thread I'm on every time I want to access TLS).\r\n\r\nI've posted a question on stackoverflow about it at http://stackoverflow.com/questions/19811474/how-do-i-force-g-on-linux-to-update-the-thread-pointer-for-tls-when-a-corout"
  , issueCommentId = 27869369
  }