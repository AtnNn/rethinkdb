IssueComment
  { issueCommentUpdatedAt = 2015 (-10) (-15) 20 : 32 : 42 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/148512170"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3151#issuecomment-148512170"
  , issueCommentCreatedAt = 2015 (-10) (-15) 20 : 32 : 42 UTC
  , issueCommentBody =
      "@kevincox Thanks for writing your proposal up here!\r\nIt sounds like we can gain a lot of flexibility with respect to key management from using TLS.\r\n\r\nI think the pre-shared key might be the easiest option to do in practice for people who don't want to set up their own CA.\r\n\r\nI'm not sure how well managing the certificates in a RethinkDB table would work, since tables can become unavailable and the table would need to be maintained. It's probably easier to specify the certificate file in the server configuration on each server.\r\n\r\nThat being said, your proposal of joining with a self-generated certificate that just needs to be confirmed through the web UI sounds like it would make for a great user experience when setting up a distributed cluster, since it removes the need to share any certificates prior to setup between the servers.\r\nI think if we support TLS connections with a pre-shared certificate first, then adding this type of interactive join process could be the second step. It's a bit more involved since it requires us to dynamically manage and distribute keys throughout the cluster."
  , issueCommentId = 148512170
  }