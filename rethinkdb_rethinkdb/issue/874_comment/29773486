IssueComment
  { issueCommentUpdatedAt = 2013 (-12) (-04) 02 : 46 : 54 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/29773486"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/874#issuecomment-29773486"
  , issueCommentCreatedAt = 2013 (-12) (-04) 02 : 46 : 54 UTC
  , issueCommentBody =
      "I definitely agree that we should try to keep RethinkDB's string manipulation to a minimum.  If we ever decide to push further into the realm of string processing, we may want to take a second look at supporting Unicode text-manipulation.\r\n\r\nI think \"crippled\" is a little strong though.  English is used by way more than 5% of the web (Wikipedia places it at 55% (http://en.wikipedia.org/wiki/Languages_used_on_the_Internet), and it doesn't seem to be going down very quickly (http://w3techs.com/technologies/history_overview/content_language/ms/y)).  For the particular subset of the web that's likely to be RethinkDB customers, I think 55% is probably a large under-estimate.\r\n\r\nThis isn't to say that other languages aren't important -- they definitely are -- but it's not like we're adding a feature that will only work for 5% of people using the product.\r\n\r\nAlso, empirically, the fact that e.g. Ruby and Python don't seem to support Unicode case-manipulation out of the box doesn't seem to have hurt their adoption as web languages.\r\n\r\n---\r\n\r\nI don't really understand the locale issue as well as I'd like.  I've spent about 20 minutes googling around, and I can't seem to find a straight answer as to how `en_US.UTF-8` and `de_DE.UTF-8` are treated differently by different libraries.\r\n\r\nThe boost library requires that a locale be passed to the `to_upper` function, and the documentation seems to suggest that it affects the output.\r\n\r\nMaybe the normalization is different in different locales?  (Many characters, like letters with accents over them, can be produced by multiple different sequences of code points, and most Unicode processing libraries consider these different sequences of code points to be equivalent.  To make life easier, the Unicode text is usually normalized to a single canonical representation prior to processing.)"
  , issueCommentId = 29773486
  }