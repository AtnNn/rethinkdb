IssueComment
  { issueCommentUpdatedAt = 2013 (-07) (-02) 17 : 22 : 45 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1461947
        , simpleUserLogin = N "neumino"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1461947?v=3"
        , simpleUserUrl = "https://api.github.com/users/neumino"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/20361123"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1099#issuecomment-20361123"
  , issueCommentCreatedAt = 2013 (-07) (-02) 17 : 22 : 45 UTC
  , issueCommentBody =
      "@markenzie I think the limit here is about the number of element returned, not until which character `split` should work (at least that's what the limit is in Python and JavaScript).\r\nTo split until a certain character, I would do something like\r\n```\r\nstring.slice(0, <limit>).split()\r\n```\r\nNote: It looks like we don't such a slice function for string...\r\n\r\nI don't expect `split` to be variadic. If people want to split with comma and string, they should use a regex, that's what they are for.\r\n\r\nThe limit (the number of elements returned) is useful. Suppose I want to create a slug according to the first words of a text. I can do\r\n```\r\ntext.split(\" \").limit(3).join()\r\n===== vs =====\r\ntext.split(\" \", 3).join()\r\n```\r\nI would naturally prefer the second syntax for this problem for performance reason.\r\n\r\n+1 for `.join`"
  , issueCommentId = 20361123
  }