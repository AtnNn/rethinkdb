IssueComment
  { issueCommentUpdatedAt = 2013 (-02) (-24) 20 : 42 : 16 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 82501
        , simpleUserLogin = N "michaelmior"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/82501?v=3"
        , simpleUserUrl = "https://api.github.com/users/michaelmior"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/14015535"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/189#issuecomment-14015535"
  , issueCommentCreatedAt = 2013 (-02) (-24) 20 : 42 : 16 UTC
  , issueCommentBody =
      "Would love to see a RethinkDB CLI. Below a simple start. This just launches the standard node REPL with `r` already available connected to the specified server. One question is how to integrate with the `rethinkdb` binary. A node-based CLI seems to make sense, so should `rethinkdb` just exec the node script?\r\n\r\nAnother thing which seems necessary is a way to print more understandable output from commands. (As-is, there's a full screen of output from something as simple as `r.dbCreate('foo').run();`) This should be relatively straightforward via applying pipes to stdio.\r\n\r\n```\r\n#!/usr/bin/env node\r\n\r\nvar r = require('rethinkdb'),\r\n    repl = require('repl')\r\n    argv = require('optimist').argv;\r\n\r\nr.connect({\r\n  host: argv.host || 'localhost',\r\n  port: argv.port || 28015\r\n}, function(conn) {\r\n  var local = repl.start(\"rethinkdb> \");\r\n  local.context.r = r;\r\n});\r\n```"
  , issueCommentId = 14015535
  }