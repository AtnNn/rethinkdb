IssueComment
  { issueCommentUpdatedAt = 2014 (-07) (-01) 16 : 49 : 25 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1461947
        , simpleUserLogin = N "neumino"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1461947?v=3"
        , simpleUserUrl = "https://api.github.com/users/neumino"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/47680857"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/281#issuecomment-47680857"
  , issueCommentCreatedAt = 2014 (-07) (-01) 16 : 49 : 25 UTC
  , issueCommentBody =
      "@mike-marcacci -- I'm not sure to understand why you want to manually acquire/release a connection Is it for syntactic reasons?\r\nCurrently the implementation in rethinkdbdash is I believe optimal and flawless (as far as I know): You cannot have a closed/non available/used connection in the pool.\r\n\r\n\r\nAbout doing multiple `require`, the way rethinkdbdash works is that you need to execute the module (like with Express/Koa). You do something like\r\n```\r\nvar r = require('rethinkdbdash')(); // That creates a pool\r\n```\r\n\r\nIf you want to share the object return by the module, you can create a file `rethinkdb.js` with\r\n```\r\nmodule.exports = require('rethinkdbdash')();\r\n```\r\nThen import multiple time `rethinkdb.js`.\r\n\r\n\r\nWould that work for you?\r\n\r\n\r\nIf we separate the pool from the driver, the syntax would look like\r\n```\r\nvar r = require('rethinkdb');\r\nvar pool = r.createPool();\r\nr.table('test').run(pool).then(...).error(...)\r\n```\r\nBut then you want to share `pool` in multiple files too, so you also have to create a new `.js` file. So I'm not convinced that this is a better syntax - but maybe I'm missing something?"
  , issueCommentId = 47680857
  }