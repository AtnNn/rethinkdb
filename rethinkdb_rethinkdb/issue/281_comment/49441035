IssueComment
  { issueCommentUpdatedAt = 2014 (-07) (-18) 15 : 08 : 22 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 218725
        , simpleUserLogin = N "dminkovsky"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/218725?v=3"
        , simpleUserUrl = "https://api.github.com/users/dminkovsky"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/49441035"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/281#issuecomment-49441035"
  , issueCommentCreatedAt = 2014 (-07) (-18) 15 : 03 : 51 UTC
  , issueCommentBody =
      "Just want to make sure you guys are aware of Bluebird's `.using()` and `.disposer()`. They provide for semantics and resource handling that mimics Python's context managers. Combined with https://github.com/coopernurse/node-pool you can come up with something really simple.\r\n\r\nI've got a wrapper object `LmData` that wraps my data sources and manages pools for each data source\8212among them Rethink:\r\n\r\n```\r\nvar Promise = require('bluebird');                                                                                                                                                \r\nvar Pool = require('generic-pool');                                                                                                                                               \r\nvar rethink = require('rethinkdb'); \r\n\r\nfunction LmData(options) {                                                                                                                                                        \r\n    this.options = options;                                                                                                                                                       \r\n    this.pools = {                                                                                                                                                                \r\n        rethink: Pool.Pool({                                                                                                                                                      \r\n            create: function(callback) { rethink.connect(options.rethink, callback); },                                                                                           \r\n            destroy: function(conn) { conn.close(); }                                                                                                                             \r\n        })                                                                                                                                                                        \r\n    }                                                                                                                                                                             \r\n    this.pools.rethink.acquire = Promise.promisify(this.pools.rethink.acquire, this.pools.rethink);                                                                               \r\n}\r\n\r\nLmData.prototype.getRethinkConn = function() {                                                                                                                                    \r\n    var self = this;                                                                                                                                                              \r\n    return this.pools.rethink.acquire().disposer(function(conn) { self.pools.rethink.release(conn); });                                                                           \r\n};                                                                                                                                                                                \r\n                                                                                                                                                                                  \r\nLmData.prototype.usingRethink = function(fn) {                                                                                                                                    \r\n    return Promise.using(this.getRethinkConn(), rethink, fn);                                                                                                                     \r\n}; \r\n```\r\n\r\nAnd then it's super easy to run queries:\r\n\r\n```\r\nvar lmData = new LmData(options);\r\nlmData.usingRethink(function(conn, r) {\r\n    return r.expr(1).run(conn);\r\n})\r\n```\r\n\r\nThe `using()` and `disposer()` combo makes sure that after the function passed to `usingRethink` resolves, the connection is returned to the pool. It's similar to `putBack()` in your example above, but the putting back is handled by Bluebird.\r\n\r\nAll of this said, I think this only works if you're using the Promise-based interface, which may be a problem."
  , issueCommentId = 49441035
  }