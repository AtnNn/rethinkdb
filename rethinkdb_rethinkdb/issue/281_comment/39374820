IssueComment
  { issueCommentUpdatedAt = 2014 (-04) (-02) 19 : 47 : 14 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/39374820"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/281#issuecomment-39374820"
  , issueCommentCreatedAt = 2014 (-04) (-02) 19 : 47 : 14 UTC
  , issueCommentBody =
      "One option might be to make the argument that is passed to `run()` an abstract class, and to document it.\r\nSomething like a `ConnectionProvider` type, with an abstract function `getConnection() -> Connection` and probably something like `lock(Connection)` and `unlock(Connection)` to implement what @neumino described (so connections are not closed if there are active cursors around). The exact interface might look slightly different depending on the client language.\r\n\r\nWe could ship with a default `SingleConnectionProvider`, but people could easily implement their own connection pool mechanisms.\r\n\r\nFor convenience, we could make `run(conn)` accept a `Connection` object as well, which would have the same behavior as `connProvider = new SingleConnectionProvider(conn); query.run(connProvider)`."
  , issueCommentId = 39374820
  }