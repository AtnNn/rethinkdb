IssueComment
  { issueCommentUpdatedAt = 2016 (-02) (-16) 02 : 23 : 13 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/184477796"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3440#issuecomment-184477796"
  , issueCommentCreatedAt = 2016 (-02) (-16) 02 : 23 : 13 UTC
  , issueCommentBody =
      "Maybe a nicer option would be to make our error types more structured. Rather than an error being just an error type and a text message, we could have them have additional properties.\r\n\r\nLet's say we add a new error type `ReqlWriteError` to our error hierarchy (http://rethinkdb.com/docs/error-types/). Then we could make the instances of `ReqlWriteError` have a field `writeResult` or something similar, which contains essentially what a write operation currently returns, i.e. a document of the form `{inserted: ..., replaced: ..., errors: ..., etc.}`. `first_error` would become the error message of the `ReqlWriteError` itself.\r\n\r\nIn that case we could make any failing write operation always throw an error, rather than returning the document. This would be much more friendly towards new users I think.\r\nFor the users who care about partially succeeded writes, all the currently exposed information would still be available as part of the error object.\r\n\r\nFor backwards compatibility, we could add a flag to restore the old behavior (though I think we would probably deprecate that later)."
  , issueCommentId = 184477796
  }