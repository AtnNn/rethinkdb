IssueComment
  { issueCommentUpdatedAt = 2015 (-02) (-06) 22 : 47 : 06 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1366
        , simpleUserLogin = N "deontologician"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1366?v=3"
        , simpleUserUrl = "https://api.github.com/users/deontologician"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/73327447"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1721#issuecomment-73327447"
  , issueCommentCreatedAt = 2015 (-02) (-06) 22 : 47 : 06 UTC
  , issueCommentBody =
      "@danielmewes I was trying to reconcile your strategy with a standard evaluation strategy. So what I was suggesting was rethrowing the error if an undefined was evaluated, but also evaluating the arguments to `r.and` and `r.or` left to right lazily. It's mostly the same as yours, except in the cases I mentioned. Yours seems to be a little more complex because it explicitly tries to step around undefined values if it can, whereas lazy evaluation just explodes if it hits one. I think the more complicated behavior isn't necessary if we just kill the idiom of using `r.or` for defaulting values.\r\n\r\nI wrote a small comment on #3562 alluding to my suspicion that returning non-boolean values from `r.or` isn't super useful since we have the ability to explicitly use `.default`.  (`r.and` returning non-booleans seems particularly useless to me, and only ever seems to be included to be consistent with `or`'s behavior). I would love to see counterexamples to these assertions however"
  , issueCommentId = 73327447
  }