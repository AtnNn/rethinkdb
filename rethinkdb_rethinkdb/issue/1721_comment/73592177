IssueComment
  { issueCommentUpdatedAt = 2015 (-02) (-09) 21 : 18 : 50 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/73592177"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1721#issuecomment-73592177"
  , issueCommentCreatedAt = 2015 (-02) (-09) 21 : 18 : 50 UTC
  , issueCommentBody =
      "@mlucy If we want to implement JavaScript undefined semantics, which ReQL terms would we need to change?\r\nAs far as I can tell:\r\n- all terms that use truthness (`branch`, `and`, `or`, `not`)\r\n- comparison operators, to make `undefined < 1 -> false`\r\n- anything else?\r\n\r\nWe should also offer turning this behavior off I think. All of those terms would probably need to take an optarg, which might become a little messy in languages where we overload the operators.\r\n\r\nAlternatively we could only apply these semantics inside a filter and use the filter's `default` optarg to control the behavior. That sounds like a very bad idea though."
  , issueCommentId = 73592177
  }