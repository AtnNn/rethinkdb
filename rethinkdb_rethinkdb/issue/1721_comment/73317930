IssueComment
  { issueCommentUpdatedAt = 2015 (-02) (-06) 21 : 43 : 15 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/73317930"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1721#issuecomment-73317930"
  , issueCommentCreatedAt = 2015 (-02) (-06) 21 : 42 : 56 UTC
  , issueCommentBody =
      "Yes, dropping non-existence in `filter` by default will occasionally introduce subtle bugs down the line. This is also true for every single SQL system when the user uses non-existance, it's true for Mongo, and it's probably true for every other NoSQL database on the market. It can suck, but that's the price of admission.\r\n\r\nOn the other hand, throwing by default on non-existence will make early user interactions with the database frustrating, and in a world of three second attention spans a little early frustration maps pretty directly to commercial catastrophe. So the option isn't between throwing and not throwing. It's between people trying the product and mostly leaving very early, and occasionally having subtle bugs later like they do in every other similar system.\r\n\r\nThis was true back when we changed this behavior to its current incarnation, and it's equally true now. The fact that the user can turn this behavior off by typing `{default: false}` doesn't change the equation. \r\n\r\nIf the user does encounter a subtle bug, finding it is as simple as typing `{default: r.error}`. It sucks, but it's not catastrophic."
  , issueCommentId = 73317930
  }