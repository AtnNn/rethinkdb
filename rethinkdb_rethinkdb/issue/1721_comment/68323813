IssueComment
  { issueCommentUpdatedAt = 2014 (-12) (-30) 02 : 05 : 32 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/68323813"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1721#issuecomment-68323813"
  , issueCommentCreatedAt = 2014 (-12) (-30) 02 : 04 : 59 UTC
  , issueCommentBody =
      "Noted.\r\n\r\nI like the ternary logic of your proposal [3]. Especially if we do it as described by @coffeemug here https://github.com/rethinkdb/rethinkdb/issues/1721#issuecomment-29684787 with `~unknown = unknown`, which avoids the problem with @jdoliner's `s.filter(lambda x: ~x[\"hidden\"])`.\r\n\r\nI also think we should never return the `unknown` object to the user. Instead we should throw a non-existence error if it reaches the top level. We would keep the default for `filter`, such that if the filter predicate evaluates `unknown` for an object we fall back to the filter default just like we do now for missing values.\r\nThe difference would be that `or`/`and` expressions would work much more nicely, including avoiding the issue encountered in the SO question.\r\n\r\n@mlucy Can you estimate how big of a project it would be to implement internal support for an `unknown` value with these semantics?\r\n\r\nSo far the only other ReQL-related item on my (unfinished) wish list for 2.0 is making https://github.com/rethinkdb/rethinkdb/issues/3365 consistent with other operations (for indexes etc.), so resolving this could be doable if it's not too massive."
  , issueCommentId = 68323813
  }