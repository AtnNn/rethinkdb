IssueComment
  { issueCommentUpdatedAt = 2015 (-02) (-09) 22 : 53 : 29 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/73608555"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1721#issuecomment-73608555"
  , issueCommentCreatedAt = 2015 (-02) (-09) 22 : 53 : 29 UTC
  , issueCommentBody =
      "@coffeemug Oh I think you are right. I didn't realize those where the same semantics as far as `and` and `or` are concerned.\r\n\r\nThe difference starts with `branch` and `not`. In my system we would keep the `undefined` intact (e.g. `!undefined -> undefined`, `r.branch(undefined, \"a\", \"b\") -> undefined`), while JS treats `undefined` as falsey (`!undefined -> true`, `r.branch(undefined, \"a\", \"b\") -> \"b\"`).\r\n\r\nThis actually suggests that we can change only `and` and `or` for 2.0. We can later decide whether we want to go for JS semantics all the way, or stay more conservative. In either case the `or` / `and` semantics would remain consistent.\r\n\r\nFor the `and` and `or` changes I agree that we don't necessarily need a way for turning them off."
  , issueCommentId = 73608555
  }