IssueComment
  { issueCommentUpdatedAt = 2015 (-01) (-07) 01 : 10 : 38 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 706854
        , simpleUserLogin = N "AtnNn"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/706854?v=3"
        , simpleUserUrl = "https://api.github.com/users/AtnNn"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/68963789"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1721#issuecomment-68963789"
  , issueCommentCreatedAt = 2015 (-01) (-07) 01 : 10 : 38 UTC
  , issueCommentBody =
      "This third option will be the source of many bugs and it will make debugging reql a lot harder. I believe it is the wrong solution.\r\n\r\nFor example, it has been proposed that:\r\n\r\n> * `~unknown => unknown`\r\n> * `branch(unknown, x, y) => y`\r\n\r\nHowever this leads to `branch(~unknown, x, y) => y`. I believe ternary logic like this is the problem we are trying to fix. Many users have introduced bugs in there code and been very confused because `.filter(foo)` == `.filter(~foo)` when `foo` generates a non-existance error.\r\n\r\nIt has also been proposed that \r\n\r\n> we would switch to treating errors like values instead of exceptions, and we would consider them to be falsey\r\n\r\nThis would make debugging extremely hard. One thing that makes exceptions useful is that, no matter how deep they are in the code, exceptions get reported to the developer or get caught and handled correctly."
  , issueCommentId = 68963789
  }