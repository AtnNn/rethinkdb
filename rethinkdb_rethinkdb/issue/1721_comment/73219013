IssueComment
  { issueCommentUpdatedAt = 2015 (-02) (-06) 10 : 49 : 13 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/73219013"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1721#issuecomment-73219013"
  , issueCommentCreatedAt = 2015 (-02) (-06) 10 : 49 : 13 UTC
  , issueCommentBody =
      "> Cause legitimate errors to be thrown instead of treated as falsy, such as in `.filter(r.row('non existant') + 1 < 2)`.\r\n\r\n...\r\n\r\n> Actually I might change my mind about the default value of `default` for `filter`. \r\n\r\nI feel *extremely* strongly that `filter` should not throw on non-existence errors by default. We've discussed this before in great depth, and there needs to be significant new evidence in order to consider flipping this behavior. I understand not everyone agrees with a permissive behavior by default and I respect that, but please, let's not reopen this discussion unless there are substantive new arguments that we haven't previously considered.\r\n\r\n> * Take into account `not` and `branch`. `.filter(r.not(a))` should return the complement of `.filter(a)`.\r\n* Be easy to understand and debug and not introduce more heuristics and surprising behaviour.\r\n* Be easy to turn off, as with `filter`'s `default` optional argument.\r\n* Work well with `r.args` and `r.do`. `r.or(r.rargs([a,b]))` should be the same as `r.or(a,b)` and as `r.do(a, b, lambda aa, bb: r.or(aa, bb))`\r\n\r\nIt would be great to fix these points if we can swing it in time, but I think that https://github.com/rethinkdb/rethinkdb/issues/1721#issuecomment-73182328 is (a) significantly better than nothing as it would fix the most common edge case for this issue, and (b) doesn't seem to preclude us from fixing the other points later (am I mistaken on this?) So if that's all we do for this issue in 2.0, we'll be ahead of where we are now."
  , issueCommentId = 73219013
  }