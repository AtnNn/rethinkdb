Issue
  { issueClosedAt = Just 2013 (-05) (-22) 11 : 45 : 35 UTC
  , issueUpdatedAt = 2013 (-06) (-13) 07 : 06 : 02 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/182/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/182"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "02d7e1"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/cp:reql"
          , labelName = "cp:reql"
          }
      ]
  , issueNumber = 182
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 181337
        , simpleUserLogin = N "pixelspark"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/181337?v=3"
        , simpleUserUrl = "https://api.github.com/users/pixelspark"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Add a way to randomly sample objects from a table"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/182"
  , issueCreatedAt = 2012 (-12) (-24) 10 : 49 : 26 UTC
  , issueBody =
      Just
        "For some applications, it would be useful to be able to randomly sample objects from a table. The simplest implementation is probably a stream operator (mimicking 'limit') that randomly lets objects through or not. The following should read about 10% of the objects from the table (each object in the table can either be let through or not; this is sampling without replacement):\r\n\r\n```javascript\r\nr.db().table().sample(0.1).run()\r\n```\r\n\r\nMore complex implementations could also support sampling with replacement or sampling a fixed amount of objects:\r\n\r\n```javascript\r\nr.db().table().sample(0.5).run(); // each object has 50% chance of being selected\r\nr.db().table().sampleExactly(50).run(); // sample exactly 50 objects without replacement\r\nr.db().table().sampleExactly(50,true).run(); // sample exactly 50 objects with replacement\r\n```\r\n"
  , issueState = "closed"
  , issueId = Id 9499336
  , issueComments = 13
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 706854
                , simpleUserLogin = N "AtnNn"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/706854?v=3"
                , simpleUserUrl = "https://api.github.com/users/AtnNn"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 1
          , milestoneNumber = 17
          , milestoneClosedIssues = 593
          , milestoneDescription =
              Just
                "The scope of this issue is covered by another issue. The closing comment should link to the other issue."
          , milestoneTitle = "duplicate"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/17"
          , milestoneCreatedAt = 2013 (-03) (-29) 20 : 23 : 12 UTC
          , milestoneState = "closed"
          }
  }