IssueComment
  { issueCommentUpdatedAt = 2016 (-09) (-01) 21 : 17 : 27 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 2024235
        , simpleUserLogin = N "babakness"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/2024235?v=3"
        , simpleUserUrl = "https://api.github.com/users/babakness"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/244200648"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/6067#issuecomment-244200648"
  , issueCommentCreatedAt = 2016 (-09) (-01) 20 : 23 : 48 UTC
  , issueCommentBody =
      "My recent PR enables it to work directly in React Native. \r\n\r\nhttps://github.com/mikemintz/rethinkdb-websocket-client/pull/15\r\n\r\nTo me, this is superior to Meteor's minimongo \"database everywhere\"--which doesn't work React Native. This works in RN, including iOS and Android. Indeed this is more powerful than Horizon because all of RethinkDB's power directly accessible. \r\n\r\nI'm currently working on using this with Redux. \"Optimistic UI\" or \"Latency Compensation\" is then just state management and rolling back on failure. I see major potential here. As stated above, the whitelist approach is brilliant way to secure the backend, it's both flexible and feels natural."
  , issueCommentId = 244200648
  }