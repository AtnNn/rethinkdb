IssueComment
  { issueCommentUpdatedAt = 2016 (-07) (-22) 20 : 03 : 52 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 877936
        , simpleUserLogin = N "marshall007"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/877936?v=3"
        , simpleUserUrl = "https://api.github.com/users/marshall007"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/234642434"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/5990#issuecomment-234642434"
  , issueCommentCreatedAt = 2016 (-07) (-22) 20 : 03 : 52 UTC
  , issueCommentBody =
      "@aihornmac I've needed to do the same thing in the past. As @danielmewes mentioned you can pretty easily normalize both queries before comparing them with something like this:\r\n\r\n```js\r\nlet replace = {}\r\nlet index = 0\r\n\r\nquery.replace(/_var(\\d+)/g, (match, id) => {\r\n  if (replace[id] == null) replace[id] = index++\r\n  return `_var${replace[id]}`\r\n})\r\n```\r\n\r\nAnother trick is to create the indices you want to compare against on an empty temp table.  You can then compare the binary data in the `function` field you get back from `.indexStatus()` between the two. I've found this approach to be more reliable than parsing the strings."
  , issueCommentId = 234642434
  }