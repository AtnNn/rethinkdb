IssueComment
  { issueCommentUpdatedAt = 2013 (-01) (-15) 00 : 27 : 35 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 290841
        , simpleUserLogin = N "al3xandru"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/290841?v=3"
        , simpleUserUrl = "https://api.github.com/users/al3xandru"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/12247124"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/211#issuecomment-12247124"
  , issueCommentCreatedAt = 2013 (-01) (-15) 00 : 07 : 52 UTC
  , issueCommentBody =
      "Here is how I'd like to write the original query:\r\n\r\n```\r\ntable.filter(function(row) {\r\n   return row('entities')('urls')('*')('expanded_url').eq(value)\r\n})\r\n```\r\nI'd be OK with using something else instead of ('*') to indicate that the match should be done for each element of an array.\r\n\r\n--- \r\n\r\nGave it a bit more thought and instead of `('*')` a more generic solution would be to have a function that can either run against all items in an array or against the item with a specified index.\r\n\r\nExample:\r\n\r\n```\r\nrow('entities')('urls').array_item('*')('expanded_url')\r\n\r\nor\r\n\r\nrow('entities')('urls').array_item(23)('expanded_url')\r\n```"
  , issueCommentId = 12247124
  }