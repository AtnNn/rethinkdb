IssueComment
  { issueCommentUpdatedAt = 2013 (-01) (-14) 22 : 08 : 09 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 479538
        , simpleUserLogin = N "Raynos"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/479538?v=3"
        , simpleUserUrl = "https://api.github.com/users/Raynos"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/12242524"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/221#issuecomment-12242524"
  , issueCommentCreatedAt = 2013 (-01) (-14) 22 : 08 : 09 UTC
  , issueCommentBody =
      "@thisandagain \r\n\r\nIt's very important to note whether query objects should be push or pull streams. Consider:\r\n\r\n```js\r\nvar query = table.filter(lambda).run();\r\n\r\n// rows are being pushed at me\r\nquery.on('row', function (row) {\r\n    // do something with that row\r\n})\r\n\r\n// I'm pulling rows\r\nquery.nextRow(function (row) {\r\n\r\n})\r\n```\r\n\r\nIf you use the push model I need a way to do `query.pause()` to apply backpressure. If I'm pulling the rows out then back pressure is trivial, I stop pulling.\r\n\r\n@wmrowan \r\n\r\n`r.div(r.add(r.mul(2, 2), 1), 3)` The LISP community knows how to make that code readable. There are plenty of flow control abstractions in userland for that.\r\n\r\nThere are also hacks to make overloading `+` and `*` work but those are limited ( http://www.2ality.com/2011/12/fake-operator-overloading.html )"
  , issueCommentId = 12242524
  }