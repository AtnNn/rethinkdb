IssueComment
  { issueCommentUpdatedAt = 2013 (-01) (-24) 06 : 12 : 43 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 747641
        , simpleUserLogin = N "thisandagain"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/747641?v=3"
        , simpleUserUrl = "https://api.github.com/users/thisandagain"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/12638937"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/221#issuecomment-12638937"
  , issueCommentCreatedAt = 2013 (-01) (-24) 06 : 12 : 43 UTC
  , issueCommentBody =
      "@wmrowan I'm really happy to see `(err, obj)` style callbacks and I believe that your points re: node's `stream` API are reasonable \8211 but I can't say that I agree with the assertion that the Node.js module should be compromised for the sake of single-line-REPL-y-ness. Write a driver that the community can use to make great things and someone will write a REPL for it (see @Raynos comment above). Heck... I *volunteer* to write a REPL for it if we can get the module's interface nailed. :smile: \r\n\r\nAs per some of my previous comments and I suppose contrary to some of @coffeemug 's feedback above I highly prefer having a connection object upon which all subsequent queries are performed. This is both normative and explicit. Expecting the module (singleton) to manage connections implicitly for the sake of a REPL seems to be a rather unfortunate lack of separation of concerns. Furthermore, mixing both an explicit connection object while still allowing `.run`, `.table`, etc. off the module is inconsistent and (thus) confusing.\r\n\r\nOn a more behavioral note, I see \"separation of concerns\" or I suppose just good old fashioned \"focus\" being the largest issue in play throughout this thread... Node.js vs Browser, Node.js vs REPL, etc. Wanting to be all things to all people can be an admirable goal, but is not an admirable means of getting there. In many ways I see the solution to making a great experience for Node.js users being just simply \8211 *make a module for Node.js*. So much is being compromised through hurdles that ought not exist. \r\n\r\nOf course normalizing the interface across platforms is important and so is reducing complexity, but in my opinion that shouldn't come at the cost of user-land experience... particularly for a young project seeking an audience. The Node.js community has an increasingly good grasp on [deploying commonJS to the client-side](https://github.com/substack/node-browserify), and building a REPL or even a stream-based middleware is trivial as long as the community is engaged. While this is an improvement I still see this as pretty far from ideal in terms of creating an idiomatic interface.\r\n\r\nHappy to provide more detailed feedback, but I think most of @coffeemug 's points covered it... I want to try to suss out the core issue here."
  , issueCommentId = 12638937
  }