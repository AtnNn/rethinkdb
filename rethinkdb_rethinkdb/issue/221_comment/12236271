IssueComment
  { issueCommentUpdatedAt = 2013 (-01) (-14) 20 : 00 : 36 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 747641
        , simpleUserLogin = N "thisandagain"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/747641?v=3"
        , simpleUserUrl = "https://api.github.com/users/thisandagain"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/12236271"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/221#issuecomment-12236271"
  , issueCommentCreatedAt = 2013 (-01) (-14) 19 : 51 : 21 UTC
  , issueCommentBody =
      "@wmrowan Thanks so much for the response Bill. It's great to know that this is something that is already on your radar. To echo @othiym23 last paragraph, I'm also happy to pitch in to get this sorted out. \r\n\r\nTo some of @Raynos notes, having delt with database APIs exposed as event emitters in production quite a bit (specifically `node-mysql`) I can say that the use case for database APIs exposed as readable/writable streams is exciting, but certainly not a critical feature for me (and I say that as a bit of a stream sycophant). Thus, I'm far less interested in RethinkDB implementing idiomatic Node.js APIs and forcing them into the browser as much as I am interested in embracing the context in which RethinkDB is used in javascript-land and making interface changes that make that feel as native and natural as possible.\r\n\r\nThe lambda syntax is interesting, but I agree that the documentation for RethinkDB needs to do some catching up. In terms of communicating I just think talking about it's relative expressiveness (as you've started to do here) is a great first step. Verbosity is almost always a problem when trying to introduce new conventions in Javascript and thus I think writing from a position of clarity over terseness might be a better way to go. I.e: \"when in doubt... split it up!\". @Raynos example directly above is a good example of that.\r\n\r\nBringing Node.js core libraries into the browser has been a (one of many) holy grail for Node.js community for a while now. I really don't see a strongly persuasive argument for doing so now while RethinkDB is still in a relatively young form. That said, I do believe that in order for RethinkDB to be strongly usable within Node.js the core issues we are discussing here need to be resolved, and paramount among them is providing an evented interface for the cursors and a normative callback interface for everything else.\r\n\r\nFinally, I find the way in which the RethinkDB module is handling connection objects to be irrational / inconsistent. Both `node-mysql` and `node_redis` are great examples of handling this in two completely different but both completely reasonable ways.\r\n\r\nTo take a more conservative approach to some of @Raynos recommendations that would still allow for easy transformation into the stream API within user-land, I could see something like this working well:\r\n\r\n```javascript\r\nvar rethink = require('rethink');\r\n\r\n// Create a connection\r\nrethink.connect({\r\n    host:   'localhost',\r\n    port:   28015,\r\n    db:     'testdb'\r\n}, function (err, r) {\r\n    if (err) throw (err);\r\n    \r\n    // All subsequent queries are performed upon that connection.\r\n    // Because the rethink module does not perform connection pooling (nor \r\n    // should it IMO) this is the most natural way to create an explicit link\r\n    // between calls to the rethink database connection.\r\n    var table = r.table('hello');\r\n    table.insert({name: 'world', age: 10}, function (err, result) {\r\n        // do something\r\n    });\r\n\r\n    // Async to the insert, let's perform a filter operation upon that same\r\n    // connection object & table\r\n    var lambda = r.row('age').gt(5);\r\n    var query = table.filter(lambda).run();\r\n\r\n    query.on('row', function (row) {\r\n        // do something with that row\r\n    });\r\n\r\n    query.on('error', function (err) {\r\n        // handle the error\r\n    });\r\n\r\n    query.on('end', function (err) {\r\n        // handle the completion event\r\n    });\r\n});\r\n```"
  , issueCommentId = 12236271
  }