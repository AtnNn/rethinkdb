IssueComment
  { issueCommentUpdatedAt = 2013 (-01) (-25) 18 : 50 : 10 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 646357
        , simpleUserLogin = N "wmrowan"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/646357?v=3"
        , simpleUserUrl = "https://api.github.com/users/wmrowan"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/12714961"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/221#issuecomment-12714961"
  , issueCommentCreatedAt = 2013 (-01) (-25) 18 : 50 : 10 UTC
  , issueCommentBody =
      "1. connection close in this case would mean no longer accepting more queries. Then when all responses have fully drained the underlying TCP connection could actually be closed. Of course, then we'd have to support something like `cancel` to immediately close the connection (thus canceling any outstanding queries). `reconnect` would be shorthand for `cancel` then `connect` rather than `close` then `connect`.\r\n\r\n2. I too do not like the exception throwing style. That's why I proposed the alternative. Returning `true` or `false` seemed to confuse a lot of people because it wasn't well documented and most people ended up simply not returning anything which was interpreted as `false` (since `undefined` is falsy). Instead of allowing for this confusing default, what if we simply enforce that the return value of the callback is a boolean (with a helpful error message if it is not)?"
  , issueCommentId = 12714961
  }