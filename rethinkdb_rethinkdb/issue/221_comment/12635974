IssueComment
  { issueCommentUpdatedAt = 2013 (-01) (-24) 04 : 07 : 43 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/12635974"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/221#issuecomment-12635974"
  , issueCommentCreatedAt = 2013 (-01) (-24) 03 : 52 : 35 UTC
  , issueCommentBody =
      "```javascript\r\n// connect also returns the connection (ignored here) as\r\n// a convenience for repl users.\r\nr.connect({host:'localhost', port:28015}, function(err, conn) {\r\n   if(err) throw err;\r\n```\r\n   \r\nThis is wonderful, with the exception of returning the connection. I think we shouldn't change the API design to make the REPL work because so far it has proven to confuse a lot of people as to the proper API usage. I think `connect` shouldn't return anything. (I'll get to how I think we should deal with the REPL at the end).\r\n\r\n```javascript\r\n   // Within this callback all `run` invocations will be made against\r\n   // this connection. In other contexts, invoke `run` from the connection\r\n   // object itself to avoid ambiguity or invoke `with` on the connection\r\n   // to reenter a context in which this connection will be used by `query.run`\r\n   // To support repl usage, the last connection global will still be set and\r\n   // used outside of specific `with` contexts.\r\n   conn.run(query, function(err, result) {...});\r\n   conn.with(function() {\r\n      query.run(function(err, result) {...});\r\n   });\r\n```\r\n\r\nThis is awesome. I also think we should make the following changes:\r\n\r\n1. drop the concept of `last_connection`\r\n2. forbid people from calling `query.run()` unless it's called from within a `conn.with` context (again, I'll deal with the REPL at the end)\r\n3. drop the form `query.run(..., { connection: conn })` and standardize on the form `conn.run(q)`. Having two ways of doing this has only confused people so far as to the proper usage.\r\n   \r\n```javascript\r\n   // There is no cursor. `run` takes a callback the receives any\r\n   // error or any result. `run` itself returns nothing\r\n   r.table('tbl').get(0).run(function(err, result) {\r\n      if(err) throw err;\r\n      result['field'];\r\n      ...\r\n   });\r\n```\r\n\r\nAwesome.\r\n\r\n```javascript\r\n   // Stream results received a lazy batched iterator (just like\r\n   // Python driver) that supports the JS array iteration methods\r\n   r.table('tbl').run(function(err, tbl) {\r\n      if(err) throw err;\r\n```\r\n\r\nI think we need to be very straight forward here. `tbl` here should be a cursor object that should support a few primitive operations:\r\n\r\n1. `next(function (err, obj) {...})`\r\n2. `is_more(function(err) {...})`\r\n3. `toArray(function (err, array) {})` (the old `collect`)\r\n4. `each(function (err, obj) {...})`. If the callback throws a special kind of exception (e.g. r.InterruptException), `each` should stop iterating.\r\n\r\nNote that all callbacks on the cursor methods take an error argument because of the inherent lazyness and error-proness of cursors. We don't need to do lazy filters and maps and things like that on the client. That complicates the API significantly, makes it much more difficult to explain, and has somewhat dubious benefit for our users.\r\n\r\nAs to the REPL, I don't think we should change the function signatures. Having `connect` return something for REPL users is very confusing. Instead, I'd define a set of helpers that REPL users can use to make their lives easier. So:\r\n\r\n```javascript\r\n\r\n// repl_connection_callback sets the connection on the global\r\n// context (equivalent to calling with(conn, ...)).\r\nr.connect({ host: host, port: port}, repl_connection_callback);\r\n\r\n// We can now run queries like this\r\nquery.run(repl_result_printer)\r\n```\r\n\r\nObviously the function names aren't ideal here, but I think this is much clearer than having an API with a split identity. I also think we should do the same thing in Python in Ruby drivers (I'll open a separate issue for this):\r\n\r\n1. drop `last_connection`\r\n2. forbid the `q.run(conn)` form and settle on the `conn.run(q)` form\r\n3. only enable `q.run()` form if the user calls something special on the repl, such as `set_global_connection(conn)`."
  , issueCommentId = 12635974
  }