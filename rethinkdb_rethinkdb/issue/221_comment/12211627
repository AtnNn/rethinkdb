IssueComment
  { issueCommentUpdatedAt = 2013 (-01) (-14) 09 : 38 : 54 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 479538
        , simpleUserLogin = N "Raynos"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/479538?v=3"
        , simpleUserUrl = "https://api.github.com/users/Raynos"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/12211627"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/221#issuecomment-12211627"
  , issueCommentCreatedAt = 2013 (-01) (-14) 09 : 38 : 54 UTC
  , issueCommentBody =
      "@wmrowan node's eventemitters and streams are just javascript libraries, they can be included in browsers.\r\n\r\nThe other feedback I have is that I find the query builder confusing. I don't understand whether the functions will run on the database server or whether you parse them and convert them into queries. This is an issue because I don't know what happens if I pass you unpure functions (i.e. functions that refer to upvalues or global values).\r\n\r\nFor example I'm used to mongoDB's mapReduce which literally converts your map and reduce functions to strings and runs them on the server. those functions fail if they are unpure. Your examples show unpure functions so I presume that the functions get executed locally in my javascript environment and not send to the database server.\r\n\r\nI also find `do(function (num) { return num.mul(num); })` un intuitive. The only thing I can think of is that `num.mul(num)` is a destructive operation that multiples the number or it's a non destructive operation that returns a \"cursor\" whatever of the that number multiplied by itself.\r\n\r\nAs for the cursor interface, it can do some work. it's not obvouis how you pause / resume it. It's not obvouis how you pull values out of one by one. It's not obvouis whether it's a push or pull stream."
  , issueCommentId = 12211627
  }