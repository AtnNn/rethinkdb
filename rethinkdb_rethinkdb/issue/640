Issue
  { issueClosedAt = Just 2013 (-04) (-18) 23 : 33 : 41 UTC
  , issueUpdatedAt = 2013 (-04) (-23) 00 : 20 : 47 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/640/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/640"
  , issueClosedBy = Nothing
  , issueLabels = []
  , issueNumber = 640
  , issueAssignee =
      Just
        SimpleUser
          { simpleUserId = Id 646357
          , simpleUserLogin = N "wmrowan"
          , simpleUserAvatarUrl =
              "https://avatars.githubusercontent.com/u/646357?v=3"
          , simpleUserUrl = "https://api.github.com/users/wmrowan"
          , simpleUserType = OwnerUser
          }
  , issueUser =
      SimpleUser
        { simpleUserId = Id 646357
        , simpleUserLogin = N "wmrowan"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/646357?v=3"
        , simpleUserUrl = "https://api.github.com/users/wmrowan"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "driver interrupt handling behavior"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/640"
  , issueCreatedAt = 2013 (-04) (-10) 18 : 39 : 52 UTC
  , issueBody =
      Just
        "Both the Python and Ruby drivers block on the response for each query. The OS may interrupt this syscall leaving the connection in a bad state. This is not a problem in JS because of it's asynchronous networking API.\r\n\r\nAfter much discussion we decided on the following:\r\n\r\n* We can ignore most interrupt conditions as in almost all cases the program will simply crash\r\n* We do want to handle the case when the user interrupts a long running query in the repl\r\n* In this case we want to kill the query on the server in addition to interrupting the blocking call on the driver\r\n* While annoying, it's ok to invalidate other outstanding cursors in this situation\r\n\r\nThis lead to the following proposal:\r\n\r\n* Catch the exception generated by Python on a keyboard interrupt (and the equivalent one in Ruby) while waiting on a response and reset the connection. This:\r\n  - cancels the query on the server\r\n  - invalidates other cursors but we can live with that\r\n  - resets data alignment in the tcp stream eliminating some failure modes\r\n* Simply error on token mismatch, this is a nicer failure mode than deadlock\r\n\r\nsee discussion in #609 "
  , issueState = "closed"
  , issueId = Id 13033847
  , issueComments = 8
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Just 2013 (-05) (-15) 07 : 00 : 00 UTC
          , milestoneOpenIssues = 0
          , milestoneNumber = 8
          , milestoneClosedIssues = 183
          , milestoneDescription =
              Just "Issues that are absolutely necessary for 1.5."
          , milestoneTitle = "1.5"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/8"
          , milestoneCreatedAt = 2013 (-03) (-20) 02 : 06 : 44 UTC
          , milestoneState = "closed"
          }
  }