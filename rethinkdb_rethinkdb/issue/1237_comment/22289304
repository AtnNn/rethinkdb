IssueComment
  { issueCommentUpdatedAt = 2013 (-08) (-07) 22 : 29 : 44 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 258437
        , simpleUserLogin = N "srh"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/258437?v=3"
        , simpleUserUrl = "https://api.github.com/users/srh"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/22289304"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1237#issuecomment-22289304"
  , issueCommentCreatedAt = 2013 (-08) (-07) 22 : 28 : 55 UTC
  , issueCommentBody =
      "Edit:  never mind, it's just another segfault.  Somehow it triggered a callstack overflow check in the segfault handler.\r\n\r\nWell here's another segfault then.\r\n\r\n```\r\nRepeating all tests (iteration 20) . . .\r\n\r\nNote: Google Test filter = BTreeSindex.LowLevelOps\r\n[==========] Running 1 test from 1 test case.\r\n[----------] Global test environment set-up.\r\n[----------] 1 test from BTreeSindex\r\n[ RUN      ] BTreeSindex.LowLevelOps\r\nVersion: rethinkdb 1.7.3-581-gd3f532 (debug) (GCC 4.7.2)\r\nerror: Error in src/arch/runtime/thread_pool.cc at line 317:\r\nPrevious message may not have been written to the log file (cannot open or find log file).\r\nerror: Callstack overflow in a coroutine\r\nPrevious message may not have been written to the log file (cannot open or find log file).\r\nerror: Backtrace:\r\nPrevious message may not have been written to the log file (cannot open or find log file).\r\nerror: Wed Aug  7 15:25:55 2013\r\n       \r\n       1: rethinkdb_backtrace(void**, int) at thread_stack_pcs.cc:151\r\n       2: lazy_backtrace_t::lazy_backtrace_t() at backtrace.cc:250\r\n       3: format_backtrace(bool) at backtrace.cc:197\r\n       4: report_fatal_error(char const*, int, char const*, ...) at errors.cc:68\r\n       5: linux_thread_pool_t::sigsegv_handler(int, siginfo*, void*) at thread_pool.cc:317\r\n       6: +0xf030 at 0x7ffcf2047030 (/lib/x86_64-linux-gnu/libpthread.so.0)\r\n       7: +0x12162c at 0x7ffcf1dcf62c (/lib/x86_64-linux-gnu/libc.so.6)\r\n       8: blob_t::remove_level(scc_transaction_t<mc_cache_t>*, int*) at blob.cc:856\r\n       9: blob_t::unappend_region(scc_transaction_t<mc_cache_t>*, long) at blob.cc:456\r\n       10: blob_t::clear(scc_transaction_t<mc_cache_t>*) at blob.cc:498\r\n       11: set_secondary_indexes_internal(scc_transaction_t<mc_cache_t>*, scc_buf_lock_t<mc_cache_t>*, std::map<std::string, secondary_index_t, std::less<std::string>, std::allocator<std::pair<std::string const, secondary_index_t> > > const&) at secondary_operations.cc:36\r\n       12: set_secondary_index(scc_transaction_t<mc_cache_t>*, scc_buf_lock_t<mc_cache_t>*, std::string const&, secondary_index_t const&) at secondary_operations.cc:94\r\n       13: unittest::run_sindex_low_level_operations_test() at btree_sindex.cc:73\r\n       14: boost::detail::function::void_function_invoker0<void (*)(), void>::invoke(boost::detail::function::function_buffer&) at function_template.hpp:113\r\n       15: boost::function0<void>::operator()() const at function_template.hpp:760\r\n       16: starter_t::run_wrapper(boost::function<void ()> const&) at runtime.cc:56\r\n       17: boost::_mfi::mf1<void, starter_t, boost::function<void ()> const&>::operator()(starter_t*, boost::function<void ()> const&) const at mem_fn_template.hpp:166\r\n       18: void boost::_bi::list2<boost::_bi::value<starter_t*>, boost::_bi::value<boost::function<void ()> > >::operator()<boost::_mfi::mf1<void, starter_t, boost::function<void ()> const&>, boost::_bi::list0>(boost::_bi::type<void>, boost::_mfi::mf1<void, starter_t, boost::function<void ()> const&>&, boost::_bi::list0&, int) at bind.hpp:314\r\n       19: boost::_bi::bind_t<void, boost::_mfi::mf1<void, starter_t, boost::function<void ()> const&>, boost::_bi::list2<boost::_bi::value<starter_t*>, boost::_bi::value<boost::function<void ()> > > >::operator()() at bind_template.hpp:20\r\n       20: boost::detail::function::void_function_obj_invoker0<boost::_bi::bind_t<void, boost::_mfi::mf1<void, starter_t, boost::function<void ()> const&>, boost::_bi::list2<boost::_bi::value<starter_t*>, boost::_bi::value<boost::function<void ()> > > >, void>::invoke(boost::detail::function::function_buffer&) at function_template.hpp:154\r\n       21: boost::function0<void>::operator()() const at function_template.hpp:760\r\n       22: callable_action_instance_t<boost::function<void ()> >::run_action() at callable_action.hpp:28\r\n       23: callable_action_wrapper_t::run() at runtime_utils.cc:67\r\n       24: coro_t::run() at coroutines.cc:178\r\nPrevious message may not have been written to the log file (cannot open or find log file).\r\nerror: Exiting.\r\nPrevious message may not have been written to the log file (cannot open or find log file).\r\nTrace/breakpoint trap\r\n```"
  , issueCommentId = 22289304
  }