IssueComment
  { issueCommentUpdatedAt = 2015 (-02) (-16) 19 : 02 : 48 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/74556868"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3678#issuecomment-74556868"
  , issueCommentCreatedAt = 2015 (-02) (-16) 19 : 02 : 48 UTC
  , issueCommentBody =
      "We should get this going.\r\n\r\n@mlucy can you comment on the interface? You had mentioned something about named events in the context of your Slack ReQL bot development. Which interface would seem natural to you given the other EventMachine interfaces that you have encountered?\r\n\r\nSo far @gchpaco has suggested this interface:\r\n```\r\nEventMachine.run do\r\n  Fiber.new {\r\n    for change in r.table('foo').changes().run(conn).fiber\r\n        # ... do something\r\n    end\r\n  }.resume\r\n  Fiber.new {\r\n    for change in r.table('bar').changes().run(conn).fiber\r\n        # ... do something\r\n    end\r\n  }.resume\r\nend\r\n```\r\n\r\nor alternatively one that uses `on` with a callback, possibly also supporting an object/method name pair:\r\n```\r\nclass Klass\r\n   def bar(change)\r\n      ...\r\n   end\r\n   def foo(change)\r\n      ...\r\n   end\r\n   ...\r\nend\r\nk = Klass.new\r\nfeed1 = r.table('foo').changes().run(conn).on(k, :foo)\r\nfeed2 = r.table('bar').changes().run(conn).on(k, :bar)\r\n```\r\n(not sure what this would look like exactly with EventMachine. @gchpaco can you clarify?)"
  , issueCommentId = 74556868
  }