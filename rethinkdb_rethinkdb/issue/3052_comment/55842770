IssueComment
  { issueCommentUpdatedAt = 2014 (-09) (-17) 02 : 53 : 29 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 91193
        , simpleUserLogin = N "mglukhovsky"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/91193?v=3"
        , simpleUserUrl = "https://api.github.com/users/mglukhovsky"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/55842770"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/pull/3052#issuecomment-55842770"
  , issueCommentCreatedAt = 2014 (-09) (-17) 02 : 53 : 29 UTC
  , issueCommentBody =
      "@chipotle, I added a number of fixes. Some are style, some are semantic. The biggest semantic note is that for release notes, I'd do the following:\r\n\r\n- Go to each person and ask what they think the biggest changes are for the release, based on specific issues (e.g. \"Which issues do you think are the biggest changes for this release?\")\r\n- When you write up the issue, do pyramid-style writing -- start with the immediate, visceral impact to the user, as opposed to how the developers (we) would perceive the change. For example:\r\n\r\n> Replaced the `zip_datum_stream_t` type with a transformer function, improving performance (#2654)\r\n\r\n... provides almost no information to the user -- for example, which kinds of queries are now faster in my application?\r\n- Be aware that issues can change meaning by their resolution, but their titles may not change. #1915 is a perfect example of this: it starts out by changing the datum_t type to a new format, but ends with us lazily deserializing datums (wow! what a change!) @coffeemug, @mlucy, this is yet another argument for us to change issues titles and figure out how to resolve the email thread issue / deal with that pain. Can I propose that we change issue titles when they've been closed (by the closer) to summarize the problem?"
  , issueCommentId = 55842770
  }