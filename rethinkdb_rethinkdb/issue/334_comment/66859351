IssueComment
  { issueCommentUpdatedAt = 2014 (-12) (-13) 01 : 29 : 55 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/66859351"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/334#issuecomment-66859351"
  , issueCommentCreatedAt = 2014 (-12) (-13) 01 : 29 : 55 UTC
  , issueCommentBody =
      "Here's a summary of most of the proposals made here. I might have missed some proposals and/or pros/cons. Please let me know if anything important is missing.\r\n\r\nStick with `concatMap`\r\n+ + compatibility\r\n+ + \"concat\" isn't actually such a bad name probably\r\n\r\n`flatMap()`\r\n+ + known from Scala\r\n\r\n`flattenMap()`\r\n+ + more self-explanatory than `concatMap` for some\r\n- - the term `flatten` is associated with recursively nested structures in some languages https://github.com/rethinkdb/rethinkdb/issues/334#issuecomment-66856617\r\n\r\n`map(... {multi: true})`\r\n- - \"reads really badly to me for some reason\" https://github.com/rethinkdb/rethinkdb/issues/334#issuecomment-20388841\r\n\r\n`unwind()` (or `unwindMap`?)\r\n+ + known from MongoDB\r\n- - probably not as self-explanatory as some of the alternatives\r\n\r\n`emit()`\r\n- - \"imperative connotations\"\r\n- - different from terms in CouchDB and MongoDB with the same name (through there's debate about *how* different, see https://github.com/rethinkdb/rethinkdb/issues/334#issuecomment-20304714 and around) \r\n\r\n`unionMap()`\r\n+ + named consistently with our existing term `union` (unless there's a difference we haven't discussed here)\r\n\r\nMake it `map().concat()`\r\n+ + similar to well-known Unix `cat` command\r\n+ + more ReQL-like than `concatMap()`\r\n+ + naturally allows for concatenation without mapping https://github.com/rethinkdb/rethinkdb/issues/3435\r\n- - requires rework in the server\r\n- - people might mistake it for `add` on arrays https://github.com/rethinkdb/rethinkdb/issues/334#issuecomment-20307563\r\n- - different meaning than functions with the same name in Ruby and Javascript\r\n- - we lose the ability to concatenate streams (rather than arrays) https://github.com/rethinkdb/rethinkdb/issues/334#issuecomment-20317623\r\n\r\nMake it `map().flatten()`\r\n+ + more ReQL-like than `flattenMap()`\r\n+ + naturally allows for concatenation without mapping https://github.com/rethinkdb/rethinkdb/issues/3435\r\n- - requires rework in the server\r\n- - we lose the ability to concatenate streams (rather than arrays) https://github.com/rethinkdb/rethinkdb/issues/334#issuecomment-20317623\r\n- - associated with recursively nested structures, though we could implement recursive flattening through an opt arg"
  , issueCommentId = 66859351
  }