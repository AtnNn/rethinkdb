Issue
  { issueClosedAt = Just 2014 (-11) (-20) 03 : 45 : 15 UTC
  , issueUpdatedAt = 2014 (-11) (-20) 19 : 49 : 42 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/3356/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/3356"
  , issueClosedBy = Nothing
  , issueLabels = []
  , issueNumber = 3356
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 357737
        , simpleUserLogin = N "chanon"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/357737?v=3"
        , simpleUserUrl = "https://api.github.com/users/chanon"
        , simpleUserType = OwnerUser
        }
  , issueTitle =
      "Allow multi indexes to be used to query for all documents that include all tags queried"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/3356"
  , issueCreatedAt = 2014 (-11) (-19) 09 : 27 : 14 UTC
  , issueBody =
      Just
        "As asked here:\nhttp://stackoverflow.com/questions/26561755/in-rethinkdb-using-multi-indexes-for-tags-how-to-get-items-that-match-more-than/26569500\n\nSuppose I have a story table (with example data):\n\n```\n     story\n     {id: 1, name: 'First Story', tags: ['plants', 'flowers', 'dog']}\n     {id: 2, name: 'Second Story', tags: ['flowers', 'wedding']}\n     {id: 3, name: 'Third Story', tags: ['plants', 'wedding']}\n     {id: 4, name: 'A Fourth Story', tags: ['dog']}\n```\n\nThe story table has a multi index on the `tags` field.\n\nI can get all stories that have the `plants` tag with:\n\n```\n     r.table('story').getAll('plants', {index: tags})\n```\n\n(returns stories 1 and 3)\n\nI can get all stories that have the `plants`   or  `dog` tags with:\n\n```\n     r.table('story').getAll('plants', 'dogs', {index: tags})\n```\n\n(returns stories 1, 3 and 4)\n\nNow how would I get all stories that have **both** the `plants` and `dog` tags in an efficient manner utilizing the tags multi index? (So that it returns just story 1).\n\nThis is required in the general case of filtering items by more than one tag.\n\nAs answered by AtnNn in the SO question, workarounds include not using any index and creating a 'powerset' index (which could become pretty large).\n\nThe best solution however is if RethinkDB could use the already created tags multi index for this / or there should be some other way to create an efficient index for this requirement.\n\nOr maybe instead of the server merging (union-ing) the results of getAll for each tag in\n\n```\n     r.table('story').getAll('plants', 'dogs', {index: tags})\n```\n\nthere could be an option to tell the server to 'intersect' the results instead.\n"
  , issueState = "closed"
  , issueId = Id 49354864
  , issueComments = 2
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 706854
                , simpleUserLogin = N "AtnNn"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/706854?v=3"
                , simpleUserUrl = "https://api.github.com/users/AtnNn"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 1
          , milestoneNumber = 17
          , milestoneClosedIssues = 595
          , milestoneDescription =
              Just
                "The scope of this issue is covered by another issue. The closing comment should link to the other issue."
          , milestoneTitle = "duplicate"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/17"
          , milestoneCreatedAt = 2013 (-03) (-29) 20 : 23 : 12 UTC
          , milestoneState = "closed"
          }
  }