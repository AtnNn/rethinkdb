IssueComment
  { issueCommentUpdatedAt = 2013 (-10) (-23) 07 : 58 : 28 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/26886689"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1560#issuecomment-26886689"
  , issueCommentCreatedAt = 2013 (-10) (-23) 07 : 58 : 28 UTC
  , issueCommentBody =
      "If anyone has a problem with me breaking ReQL discussion rules and commenting on this now, let me know and I'll stfu.\r\n\r\nThe immediate reaction I had is that this sounds *really* dangerous. Consider:\r\n\r\n```python\r\ntable.index_create(\"a_b_c\", r.row, combination=True)\r\n```\r\n\r\nOne option is to limit the number of keys in the returned document to some small `k` (like 4). That would sort of work, but we have no way to effectively return an error, so all `index_create` queries that break this rule would fail silently on offending rows. That may be ok -- I'm not sure.\r\n\r\nIf we can work around the danger, it sounds like it could be a cool feature. I don't think I personally would use something like this (I'd just create the required indexes manually), but I could see people using it. It sounds somewhat google-enginesque (where they log the queries you do in dev, and then automagically create indexes when you deploy). This feature isn't quite that, but it feels like it adopts the same spirit and fits into our system nicely."
  , issueCommentId = 26886689
  }