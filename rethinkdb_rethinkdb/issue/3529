Issue
  { issueClosedAt = Just 2015 (-03) (-02) 23 : 23 : 42 UTC
  , issueUpdatedAt = 2015 (-03) (-02) 23 : 23 : 42 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/3529/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/3529"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "007575"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:API_settled"
          , labelName = "tp:API_settled"
          }
      , IssueLabel
          { labelColor = "0052cc"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:ReQL_proposal"
          , labelName = "tp:ReQL_proposal"
          }
      ]
  , issueNumber = 3529
  , issueAssignee =
      Just
        SimpleUser
          { simpleUserId = Id 552910
          , simpleUserLogin = N "Tryneus"
          , simpleUserAvatarUrl =
              "https://avatars.githubusercontent.com/u/552910?v=3"
          , simpleUserUrl = "https://api.github.com/users/Tryneus"
          , simpleUserType = OwnerUser
          }
  , issueUser =
      SimpleUser
        { simpleUserId = Id 7431361
        , simpleUserLogin = N "larkost"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/7431361?v=3"
        , simpleUserUrl = "https://api.github.com/users/larkost"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Add non-blocking option to cursors for changefeeds"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/3529"
  , issueCreatedAt = 2015 (-01) (-08) 23 : 00 : 53 UTC
  , issueBody =
      Just
        "It would be a lot easier to work with `changefeeds` if they had some method of doing a (more or less) non-blocking read on them. For example, the following blocks unless something else adds a change:\n\n``` python\nfeed = r.table('smith').changes().run(conn)\nnext(feed) # blocks forever here without outside intervention\n```\n\nTo avoid this we could mimic Python's `Queue` object and add a `.get([block, [timeout]])` method to the `Cursor` object that would either return an already fetched item, or do a short-timeout request for the next object(s) and if that got nothing raise an exception based on `Queue.Empty`. There is a similar model to follow for the Ruby driver in the `thread` module also named `Queue` that could be used the same way, and this is not an issue in JavaScript.\n\n``` python\nfeed = r.table('smith').changes().run(conn)\nwhile True:\n    try:\n        item = feed.get(False)\n        # work on item\n    except Queue.Empty:\n        # do something else\n```\n\nFor completeness we could also add `get_nowait()` which is equivalent to `get(block=False, timeout=0)`.\n\nThis is slightly orthogonal but related to an number of other issues:\n- Reading from multiple changefeeds in Python #3298\n- Asynchronous Driver For Python <Tornado and Tulip> #2622\n- Execute queries in parallel on a single connection #3296\n- Consider basing our client protocol on an existing underlying stream protocol #3460\n"
  , issueState = "closed"
  , issueId = Id 53812822
  , issueComments = 10
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 505365
                , simpleUserLogin = N "danielmewes"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/505365?v=3"
                , simpleUserUrl = "https://api.github.com/users/danielmewes"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 0
          , milestoneNumber = 89
          , milestoneClosedIssues = 117
          , milestoneDescription = Just ""
          , milestoneTitle = "2.0"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/89"
          , milestoneCreatedAt = 2015 (-01) (-26) 07 : 45 : 17 UTC
          , milestoneState = "closed"
          }
  }