Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2015 (-10) (-09) 20 : 24 : 52 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4785/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/4785"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "0052cc"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:ReQL_proposal"
          , labelName = "tp:ReQL_proposal"
          }
      ]
  , issueNumber = 4785
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "RFC: RethinkDB plugins"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4785"
  , issueCreatedAt = 2015 (-09) (-02) 03 : 57 : 48 UTC
  , issueBody =
      Just
        "There are a lot of features that are useful to have in a database which can be implemented on top of existing ReQL constructs. Some of them are not currently available out of the box.\n\nTo name a few:\n- Document expiration (TTL) #746 \n- GraphQL support #3711\n- Triggers (using changefeeds) #3367\n- Monitoring and administration tools, including our current web UI (on the server side it's just an HTTP server that executes ReQL)\n- Query logging #544 / #2238\n\nCurrently, implementing these features without modifying the server requires deploying and managing a separate application. You have to manage its configuration and state, you have to make sure that it runs on the right servers, you have to deal with application failures and server restarts etc. This can often be inconvenient.\n\nThis proposal is a work in progress. Its idea is to provide a \"plugin\" interface that allows running small extensions directly with the RethinkDB server process (credits to @mlucy who came up with the idea). Plugins can be easily enabled on a given RethinkDB server. They can provide additional ports and APIs to clients (e.g. for GraphQL queries). Their state and configuration will be stored in the RethinkDB cluster, so that it can be automatically synchronized across all servers.\n\nWe will develop some plugins ourselves. But we will also make it extremely easy for everyone to write their own plugins.\n# RethinkDB plugin proposal (RFC / WIP)\n## Initialization\n\nMany plugins will need a separate setup phase for creating tables, initializing configuration etc.\n\nRather than trying to do this automatically when a plugin is first enabled (which can be tricky in a clustered environment), I think we should just have a \"setup\"/\"initialization\" phase that needs to be triggered manually.\n## Command line syntax\n\n`--setup-plugin <plugin name>`\n`--load-plugin <plugin name>`\n\nSome plugins should launch by default (web UI). I suggest we just keep the current `--no-http-admin` command line option to disable it.\n\nIn the long term, we might want to allow starting, stopping etc. plugins without restarting the server. This should probably work through a ReQL admin table. I suggest we don't care about that for now.\n## State\n\nPlugins shall only keep state in a single database.\nAll of their configuration shall be stored there.\nThe database and all required tables shall be created during the setup phase (this is important to avoid race conditions during table creation in a cluster).\n\nWe should standardize the naming scheme for the db.\nSomething like `_plugin_<plugin_name>`?\n\nThe nice thing about having all state in a database is that this allows admins to configure\nreplication, and to change the plugin configuration and state directly through ReQL (things like\nwhich port a plugin should bind to etc.).\n## Connectivity\n\nThe RethinkDB server provides the required access credentials to the plugin.\nUsually this would require passing in the port and the auth key.\nI suggest we provide plugins with a Unix domain socket instead, so that we don't have to pass out an auth key (and it will also be more efficient and more secure). The domain socket would not require an auth key to connect.\n\nThe path of the domain socket can be passed into the plugin through environment variables.\n## Monitoring\n\n`r.db('rethinkdb).table('server_status')` will have a new field 'active_plugins' with an\narray of all the running plugins.\n\nPlugins can also write to the server log (see \"Process details\").\n## Process details\n\nIf a plugin is enabled, we simply launch a node.js instance with the right environment variables.\nIf it terminates, we print a log message and try restarting it after a certain time (30 seconds?).\nAny line the process prints to stdout is forwarded to the rethinkdb log as \"LOG_INF\" entries. stderr is forwarded as \"LOG_ERR\" entries.\n\nI suggest we ignore sandboxing and limiting permissions for the first revision. In the longer term, we might want to set process limits and put them in a chroot among others.\n\nAn open question is packaging. We can either bundle our own node.js server with RethinkDB, or rely on the system's one. The latter option might be preferable because it simplifies keeping `node.js` up to date. The downside is that some plugins might not work on all systems in case there are any incompatibilities between different `node.js` releases.\n## File structure\n\nI think a plugin should just be a folder in a specific path (e.g. `/usr/lib/rethinkdb/plugins/<plugin name>`). The folder has to contain at least two files:\n  `run.js` and `setup.js`\n\nFor the web UI, we might want to do something special so we don't add new file dependencies (i.e. we might want to keep compiling it into the RethinkDB binary).\n"
  , issueState = "open"
  , issueId = Id 104398339
  , issueComments = 29
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 268
          , milestoneNumber = 41
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone will be revisited after each major release during the planning stage for the major release after it. They will be moved to a specific release milestone if chosen for that release."
          , milestoneTitle = "subsequent"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/41"
          , milestoneCreatedAt = 2013 (-06) (-30) 07 : 32 : 52 UTC
          , milestoneState = "open"
          }
  }