Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2015 (-06) (-10) 02 : 07 : 40 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4338/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/4338"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "0052cc"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:ReQL_proposal"
          , labelName = "tp:ReQL_proposal"
          }
      ]
  , issueNumber = 4338
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "\"ordered union\" term to merge ordered streams"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4338"
  , issueCreatedAt = 2015 (-06) (-03) 18 : 40 : 46 UTC
  , issueBody =
      Just
        "There are situations where you have multiple streams that are all sorted according to the same order function, and you want to efficiently merge them into a single stream that's still sorted accordingly.\r\n\r\nThis came up in https://github.com/rethinkdb/rethinkdb/issues/4325\r\n\r\nRight now `r.union` doesn't make any guarantees about the ordering of its result. So the only work around is `r.union(orderedStream1, orderedStream2).orderBy(...)` which is inefficient because the fact that the individual substreams are already sorted isn't utilized.\r\n\r\nThe proposal is to have something like an \"ordered union\" that takes an attribute or a function to sort by, and merges the substreams in the correct order, assuming that each of them has already been ordered by the same attribute.\r\n\r\nI haven't thought about a concrete interface yet."
  , issueState = "open"
  , issueId = Id 84712095
  , issueComments = 4
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 882
          , milestoneNumber = 2
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone are not an immediate priority, and will be periodically revisited. When we decide to work on an issue in backlog, we'll move it to next."
          , milestoneTitle = "backlog"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/2"
          , milestoneCreatedAt = 2012 (-11) (-11) 14 : 16 : 11 UTC
          , milestoneState = "open"
          }
  }