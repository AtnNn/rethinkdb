Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2015 (-03) (-23) 19 : 46 : 45 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/1408/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/1408"
  , issueClosedBy = Nothing
  , issueLabels = []
  , issueNumber = 1408
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 318501
        , simpleUserLogin = N "cespare"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/318501?v=3"
        , simpleUserUrl = "https://api.github.com/users/cespare"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Add time rounding to the API"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/1408"
  , issueCreatedAt = 2013 (-09) (-09) 06 : 59 : 27 UTC
  , issueBody =
      Just
        "Hey guys, thanks for your sexyawesome database.\r\n\r\nI'm tinkering around with some timeseries stuff using the hot new time data types. I've got some data that looks like this:\r\n\r\n```\r\n[\r\n  { \"count\": 10, \"ts\": r.time(2013, 1, 1, 5, 23, 13, 'Z') },\r\n  ...\r\n]\r\n```\r\n\r\nSo in this example I've got datapoints at second intervals. I'd like to query them in bigger groups; for instance: what is the total count for each hour?\r\n\r\nRight now I'm doing something like this (in Ruby):\r\n\r\n``` ruby\r\nr.table(\"ev\").grouped_map_reduce(\r\n  lambda { |row| [row[:ts].year, row[:ts].month, row[:ts].day, row[:ts].hours] },\r\n  lambda { |row| row.pluck(:value) },\r\n  lambda { |acc, row| {:value => acc[:value] + row[:value]} }\r\n).run\r\n```\r\n\r\nThis works, but it somewhat annoying:\r\n\r\n* `[row[:ts].year, row[:ts].month, row[:ts].day, row[:ts].hours]` is repetitive and ugly\r\n* Now I have to reconstruct the date from an array like `[2013, 1, 1, 4]` at the receiving end\r\n\r\nI think it would be fixed with a `round()` function for times that could round the time to the nearest {hour, minute, second, day, arbitrary time span, ...}.\r\n\r\nOff the top of my head, one model for such a function would be [the `Time.Round` function from the time package in the Go standard library](http://golang.org/pkg/time/#Time.Round)."
  , issueState = "open"
  , issueId = Id 19179379
  , issueComments = 3
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 883
          , milestoneNumber = 2
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone are not an immediate priority, and will be periodically revisited. When we decide to work on an issue in backlog, we'll move it to next."
          , milestoneTitle = "backlog"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/2"
          , milestoneCreatedAt = 2012 (-11) (-11) 14 : 16 : 11 UTC
          , milestoneState = "open"
          }
  }