IssueComment
  { issueCommentUpdatedAt = 2013 (-06) (-30) 08 : 22 : 20 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/20243938"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1096#issuecomment-20243938"
  , issueCommentCreatedAt = 2013 (-06) (-30) 08 : 22 : 20 UTC
  , issueCommentBody =
      "Another open question. Suppose I want `group` to place a document into two or more groups (for example, if I'm doing word counting on text stored in a document, I have to split a single document into many groups). Currently, I'd have to first run `concatMap` on the stream, and then call `group` on that. Should we leave it this way, or find a way to allow `group` to return multiple groups?\r\n\r\nIn most existing map/reduce implementations it's extremely common to have the grouping function return multiple groups per entry. We can go for composability and tell people to use a combination of `concatMap` and `group`, or we can extend `group` to allow returning multiple groups. What does everyone think?"
  , issueCommentId = 20243938
  }