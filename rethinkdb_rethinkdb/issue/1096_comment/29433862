IssueComment
  { issueCommentUpdatedAt = 2013 (-11) (-28) 01 : 41 : 30 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 43867
        , simpleUserLogin = N "jdoliner"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/43867?v=3"
        , simpleUserUrl = "https://api.github.com/users/jdoliner"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/29433862"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1096#issuecomment-29433862"
  , issueCommentCreatedAt = 2013 (-11) (-28) 01 : 41 : 30 UTC
  , issueCommentBody =
      "I really like the pseudo-type part I think we should do that.\r\n\r\nAnother key part of this is that you can chain binary functions to objects\r\nof type grouped_atoms and get back grouped_atoms. You need this to get\r\n`avg` to work properly since `avg` is a chain of `map` followed by `reduce`\r\nfollowed by a `do`.\r\nOn Nov 27, 2013 7:36 PM, \"Michael Lucy\" <notifications@github.com> wrote:\r\n\r\n> Alright, since it's been a while since we discussed this, here's a\r\n> concrete proposal for what I think we should do. It's very rough, and I'm\r\n> less than sure about much of it.\r\n>\r\n> table.group{|row| ...} # what you expecttable.group('a') # table.group{|row| row['a'].default(nil)}table.group('a', 'b') # table.group{|row| [row['a'].default(nil), row['b'].default(nil)]}table.group(index:'c') # group by the index `c`\r\n>\r\n> group returns a pseudotype grouped_streams which is never returned to the\r\n> user. If a user writes a query that results in grouped_streams, we give\r\n> them an error saying that you can't return that type, and recommend\r\n> chaining reduce on the end. A good error message here is key.\r\n>\r\n> grouped_streams has the semantics Joe indicated above. If you call mapetc. on it, you get back\r\n> grouped_streams; if you call reduce etc. on grouped_streams, you get back\r\n> a pseudotype grouped_atoms.\r\n>\r\n> grouped_atoms can be returned to the clients. Clients can handle this\r\n> pseudotype different ways. Javascript will turn it into the current form ([{:group\r\n> => 1, :reduction => 5}, ...]), while Ruby and Python will turn it into an\r\n> object ({1 => 5, ...}). They have to handle it differently because JS\r\n> can't have objects with non-string keys, even though you frequently want to\r\n> group by numbers. (*Note*: returning a pseudotype that's handled\r\n> differently in the clients is the part of this that I'm least sure about).\r\n>\r\n> Finally, the current arguments to groupby (avg, sum, count) will be\r\n> changed to be operations that work on any stream. r.table('test').sum('a')will sum up all the values of the field\r\n> a in the table test, for example. The equivalent of r.table('test').groupby('a',\r\n> r.sum('b')) will be r.table('test').group('a').sum('b'). I also think we\r\n> should take this opportunity to add min and max, which are probably the\r\n> most-requested basic reductions that we don't offer.\r\n>\r\n> (Side-note: I also think that r([1,2,3]).sum should work. Basically if\r\n> you don't pass a field to sum or avg, it sums or averages the values in\r\n> the stream. Same for min and max.)\r\n>\r\n> \8212\r\n> Reply to this email directly or view it on GitHub<https://github.com/rethinkdb/rethinkdb/issues/1096#issuecomment-29431703>\r\n> .\r\n>"
  , issueCommentId = 29433862
  }