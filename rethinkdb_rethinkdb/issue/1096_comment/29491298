IssueComment
  { issueCommentUpdatedAt = 2013 (-11) (-29) 01 : 13 : 32 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 43867
        , simpleUserLogin = N "jdoliner"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/43867?v=3"
        , simpleUserUrl = "https://api.github.com/users/jdoliner"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/29491298"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1096#issuecomment-29491298"
  , issueCommentCreatedAt = 2013 (-11) (-29) 01 : 13 : 32 UTC
  , issueCommentBody =
      "Without grouped_atoms (which I actually think we should call\r\ngrouped_datums) avg has to be implemented in a terribly hacky way. With\r\ngrouped_datums the exact code that averages a stream of numbers also\r\naverages groups of streams of numbers. That's a very good smell to me.\r\n\r\nI think doing multiple reductions is good but we should do it as a separate\r\nproposal rather than tack it on to this. It's orthogonal implementation\r\nwise. And I think were already getting this complicated enough that it's\r\ngoing to be tough to finish before Christmas.\r\nOn Nov 28, 2013 3:35 AM, \"coffeemug\" <notifications@github.com> wrote:\r\n\r\n> *Overall:*\r\n>\r\n>    - I really like the overall proposal (it's pretty much in tune with\r\n>    what we were all probably thinking).\r\n>    - I like the idea of multi groups, I think it's important we do that.\r\n>\r\n> *On grouped atoms:*\r\n>\r\n> I don't like the idea of grouped_atoms, I think we should just return\r\n> plain JSON. Firstly, it has the smell of an over-engineered component to\r\n> me. One test for this is to imagine removing this feature after it already\r\n> exists. How many people would say \"man, what they had was so much better,\r\n> too bad they took it out\"? How strongly would they demand to bring it back?\r\n> As an example, if we added the group.map.reduce syntax, and then took it\r\n> out a year later and reintroduced groupedMapReduce I think people would\r\n> complain pretty strongly. If we did that with grouped atoms, I think the\r\n> only reason people would complain is backwards compatibility.\r\n>\r\n> Secondly, I don't think having different interpretations in different\r\n> drivers is a strong benefit. It seems like the potential drawback is\r\n> bigger. A lot of people I spoke to use the data explorer pretty heavily to\r\n> design queries and then rewrite them in their language of choice. I think\r\n> they would be surprised by the result.\r\n>\r\n> Also, as a matter of philosophy, I think we should be conservative about\r\n> introducing pseudotypes that can go all the way back to the client. If\r\n> something can be represented by JSON, by default I think it probably should\r\n> be. Before we introduce pseudotypes like this I think we should look for\r\n> strong evidence that it's necessary. In people's minds, we're a JSON\r\n> database, not an arbitrary cross-language data structure store. Regardless\r\n> of what we are internally, I think that breaking this expectation has a\r\n> pretty high cost and we should try to respect it whenever possible.\r\n>\r\n> *Other comments:*\r\n>\r\n>    - The foo.group(bar).sum syntax is awesome, but for this feature to be\r\n>    bulletproof we absolutely need a syntax for multiple reductions. How to do\r\n>    this is the biggest open question IMO.\r\n>    - I think that in addition to accepting field names, aggregators\r\n>    should be able to accept a lambda.\r\n>    - If we drop grouped atoms (which I think we should), it would be nice\r\n>    to let people name things (i.e. \"city/population\" vs. \"group/reduction\"\r\n>    field names in the return object). It's a small thing to us, but it turns\r\n>    out to be a big deal to many, many users.\r\n>    - It would be really nice to give people an option to include the\r\n>    members of the group in addition with their reductions. See #1096\r\n>    (comment)<https://github.com/rethinkdb/rethinkdb/issues/1096#issuecomment-20873905>for details/rationale.\r\n>\r\n> \8212\r\n> Reply to this email directly or view it on GitHub<https://github.com/rethinkdb/rethinkdb/issues/1096#issuecomment-29447005>\r\n> .\r\n>"
  , issueCommentId = 29491298
  }