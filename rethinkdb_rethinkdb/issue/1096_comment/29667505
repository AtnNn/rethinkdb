IssueComment
  { issueCommentUpdatedAt = 2013 (-12) (-02) 23 : 02 : 22 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/29667505"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1096#issuecomment-29667505"
  , issueCommentCreatedAt = 2013 (-12) (-02) 23 : 02 : 22 UTC
  , issueCommentBody =
      "> For example, suppose I want to chain this query to map the groups (and not the stream)\r\n\r\nYou'd have to coerce to an array first, and then call map on that array.\r\n\r\n> I am also not sure that having `sum`, `avg` etc. take a lambda functon/field name is a good idea.\r\n\r\nThis is a general technique we use elsewhere. Users can pass a string (which means attribute access), or a lambda. We'll do this in `group`, for example, and already do it in `count`. I think this is really useful, we just explain it to people once, and then they can use this in many, many places. They also don't have to learn about the feature to begin using aggregators effectively. I think it's a win-win, and a little possible confusion is worth it 100 times over once they get past it."
  , issueCommentId = 29667505
  }