IssueComment
  { issueCommentUpdatedAt = 2013 (-12) (-11) 01 : 40 : 37 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1461947
        , simpleUserLogin = N "neumino"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1461947?v=3"
        , simpleUserUrl = "https://api.github.com/users/neumino"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/30286768"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1096#issuecomment-30286768"
  , issueCommentCreatedAt = 2013 (-12) (-11) 01 : 40 : 37 UTC
  , issueCommentBody =
      "Can I use an index before `group` and give it an option?\r\n\r\nSchema:\r\n```js\r\n{\r\n    id: String\r\n    date: Date\r\n}\r\n```\r\n\r\nQuery\r\n```js\r\nr.table(\"foo\").orderBy({index: \"date\"}).group(\r\n    function(doc) { return doc(\"date\").date() },\r\n    {ordered: true})\r\n```\r\n\r\nAnd I would get a cursor of groups, each group being:\r\n```js\r\n{\r\n    group: Date,\r\n    results: [ doc1, doc2, ... ]\r\n}\r\n```\r\n\r\n`{ ordered: true}` would mean that my grouping function is going to return every time:\r\n- an element that belongs to a new group\r\n- an element that belongs to the same group as the previous element\r\n\r\nSee https://twitter.com/bencevans/status/410578630956171264"
  , issueCommentId = 30286768
  }