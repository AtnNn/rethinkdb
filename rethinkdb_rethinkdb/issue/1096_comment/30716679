IssueComment
  { issueCommentUpdatedAt = 2013 (-12) (-17) 00 : 47 : 13 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/30716679"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1096#issuecomment-30716679"
  , issueCommentCreatedAt = 2013 (-12) (-17) 00 : 47 : 13 UTC
  , issueCommentBody =
      "@mlucy, @jdoliner -- I have some questions about the implementation of this command.\r\n\r\nSuppose I have the following query:\r\n\r\n```Python\r\nstream.group(lambda x: x['text'].downcase().split(), multi=True)\r\n      .map(lambda x: 1)\r\n      .reduce(lambda x, y: x + y)\r\n```\r\n\r\n1. Would there be an intermediary step where each group holds multiple copies of the full document, or would `map` be executed incrementally during the execution of `group`?\r\n2. Would the mapping and the reduction get pushed to the shards like it did before?\r\n3. If I replace `map/reduce` commands above with `count`, would the operational semantics be equivalent? I.e. would the answers to the previous two questions stay the same?\r\n\r\n(It would be really nice if the answers to these are \"no, yes, and yes\")"
  , issueCommentId = 30716679
  }