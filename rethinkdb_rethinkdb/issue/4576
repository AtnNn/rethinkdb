Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2016 (-04) (-29) 20 : 34 : 35 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4576/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/4576"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "0052cc"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:ReQL_proposal"
          , labelName = "tp:ReQL_proposal"
          }
      ]
  , issueNumber = 4576
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 7431361
        , simpleUserLogin = N "larkost"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/7431361?v=3"
        , simpleUserUrl = "https://api.github.com/users/larkost"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "allow query fragments"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4576"
  , issueCreatedAt = 2015 (-07) (-24) 21 : 08 : 54 UTC
  , issueBody =
      Just
        "In writing a test I ran into a case where I needed the same back-half of a query, but needed to change the front-half for each. If it were the reverse I could just save the front-half to a variable, and use it time and again, but the same is not currently possible for a back-half.\r\n\r\nSo I would like to propose something like a `r.fragment` term that would allow just this. So for example you could do something like this:\r\n```\r\nfilterFunction = r.fragment.filter({'a':1})\r\nr.db('a').table('b').filterFunction().run(conn)\r\n```\r\n\r\nThis would only be implemented in the drivers, so this would never go to the server. Ideally you could glue multiple `r.fragment`s together to build queries. Possibly even `run()` could be included in the fragment providing a simpler way of handing around a `connection` object. And in that case the presence of a `r.fragment` (or even multiple) in that line would suppress the `run()` in that evaluation.\r\n\r\nOf course the current easy workaround is to create a function to wrap around this, but this would be a bit more elegant."
  , issueState = "open"
  , issueId = Id 97147658
  , issueComments = 1
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 882
          , milestoneNumber = 2
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone are not an immediate priority, and will be periodically revisited. When we decide to work on an issue in backlog, we'll move it to next."
          , milestoneTitle = "backlog"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/2"
          , milestoneCreatedAt = 2012 (-11) (-11) 14 : 16 : 11 UTC
          , milestoneState = "open"
          }
  }