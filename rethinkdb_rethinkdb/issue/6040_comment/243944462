IssueComment
  { issueCommentUpdatedAt = 2016 (-09) (-01) 00 : 45 : 12 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/243944462"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/6040#issuecomment-243944462"
  , issueCommentCreatedAt = 2016 (-09) (-01) 00 : 45 : 12 UTC
  , issueCommentBody =
      "After discussion with @VeXocide, we came up with the following:\r\n\r\n--\r\n\r\n### Mark non-const references ###\r\nWhenever you have a non-const reference, its name must end in `_ref`.\r\n\r\nThis is to make it obvious that modifying the value of a reference can have non-local side effects.\r\n\r\nIf a non-const reference is a class member, its name should end in `_ref_`:\r\n```C++\r\nclass foo_t {\r\nprivate:\r\n    int &bar_ref_;\r\n};\r\n```\r\n\r\n### Use pointers for `_out` parameters ###\r\nJust as with our existing style guide, keep using pointers for `_out` parameters, rather than references.\r\n\r\nThe point of this is that you can tell from the call-site of a function which parameters might get modified in-place by the function call (i.e. only the ones that are passed in by pointer).\r\n\r\nThis takes precedence over the \"Use a reference over a pointer where possible\" rule."
  , issueCommentId = 243944462
  }