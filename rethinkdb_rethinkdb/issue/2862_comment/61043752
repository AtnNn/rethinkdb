IssueComment
  { issueCommentUpdatedAt = 2014 (-10) (-30) 04 : 15 : 32 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 316661
        , simpleUserLogin = N "timmaxw"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/316661?v=3"
        , simpleUserUrl = "https://api.github.com/users/timmaxw"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/61043752"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2862#issuecomment-61043752"
  , issueCommentCreatedAt = 2014 (-10) (-30) 04 : 15 : 32 UTC
  , issueCommentBody =
      "By \"report change\" I meant that the `artificial_table_backend_t` tells the `artificial_table_t` that those rows might have changed. The `artificial_table_t` then asks the `artificial_table_backend_t` for the new value of those rows and compares the new value to its stored value. If they're the same, then nothing is sent to the user.\r\n\r\nWe would have to keep everything in memory on the process serving the changefeed because we currently don't have infrastructure to track the old values of these pseudo-tables. When the user requests them, the values are constructed on the fly; and when we find out that e.g. the directory has changed, we don't have a copy of the old value lying around. Since changefeeds are the only thing that needs the old values, it's easiest to make the logic of storing old values be a changefeed-specific thing, and then we don't have to do it when changefeeds aren't in use."
  , issueCommentId = 61043752
  }