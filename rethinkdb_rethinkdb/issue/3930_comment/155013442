IssueComment
  { issueCommentUpdatedAt = 2015 (-11) (-09) 09 : 48 : 32 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 2362012
        , simpleUserLogin = N "tyth"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/2362012?v=3"
        , simpleUserUrl = "https://api.github.com/users/tyth"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/155013442"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3930#issuecomment-155013442"
  , issueCommentCreatedAt = 2015 (-11) (-09) 09 : 48 : 32 UTC
  , issueCommentBody =
      "@coffeemug I see that most of the code is generated metajava.py. I haven't read it, so there could be no possible way of meeting some requirements of \"nice\" static-typed lib.\r\n\r\nBut what I generally want:\r\n1. Type boundaries on method parameters (ex:  how can `r.table(Object tableName)` method take any `Object`? Why can't we state that it can be only a `String`?)\r\n2. Sane return types. So `tableList.contains(table)` would return `Boolean`, `table.changes` would return `Cursor<Map ...>` etc.\r\n\r\nMapping to classes, @mattias800 writes about, is a great thing too, but it can be always added later on, either in a standard driver or as a separate library. \r\n\r\nI would be glad to contribute (e.g. async, intergration with streams, Scala wrapper later on), but so far as code is generated in such peculiar (for Java) way, I don't see how I can do it.\r\n"
  , issueCommentId = 155013442
  }