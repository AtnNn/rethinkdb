IssueComment
  { issueCommentUpdatedAt = 2015 (-11) (-09) 09 : 17 : 09 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 2362012
        , simpleUserLogin = N "tyth"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/2362012?v=3"
        , simpleUserUrl = "https://api.github.com/users/tyth"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/154973636"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3930#issuecomment-154973636"
  , issueCommentCreatedAt = 2015 (-11) (-09) 07 : 07 : 40 UTC
  , issueCommentBody =
      "I toyed with Snapshot version yesterday (in Scala codebase first, then checked if it is any different in Java code) and my experience was rather negative. The API design principles just don't fit well with static typed languages.\r\n\r\nThere no information in code about what types of parameters are required, there is (worst part) no information about what type will be returned. I have to find out, from documentation or library source code, what the type is and explicitly declare it. And it can go wrong any time.\r\nThe great benefit of static typing - cheching things on compile time is lost. \r\n\r\nSeriosly, when type checked SQL in Java/Scala community is  widely adopted and we have all these awesome DSLs for non relational databases, this kind of approach is terrible."
  , issueCommentId = 154973636
  }