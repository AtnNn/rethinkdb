IssueComment
  { issueCommentUpdatedAt = 2015 (-09) (-13) 03 : 11 : 24 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 4420101
        , simpleUserLogin = N "eric-poitras"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/4420101?v=3"
        , simpleUserUrl = "https://api.github.com/users/eric-poitras"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/139841060"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3930#issuecomment-139841060"
  , issueCommentCreatedAt = 2015 (-09) (-13) 03 : 05 : 21 UTC
  , issueCommentBody =
      "Hi,\r\nit is useful for Connection to be a Generic type ? Java can be a bit strange in the way he handle generics and sometime it's just better to avoid it. Here a sample case of what I am talking about:\r\n\r\n```java\r\npublic class SomeClass implements SomeApi {\r\n\r\n    private final Db         db;\r\n    private final Connection conn;\r\n\r\n    @Inject\r\n    public SomeClass( Db db, Connection conn ) {\r\n        this.db = db;\r\n        this.conn = conn;\r\n    }\r\n\r\n    @Override\r\n    public List<Device> listDevices() throws ApiException {\r\n        Cursor<Map<String, Object>> c = db.table( \"test\" ).run( conn );\r\n    }\r\n```\r\n\r\nThe line: Cursor&lt;Map&lt;String, Object&gt;&gt; c = db.table( \"test\" ).run( conn ); won't compile because I did not defined the variable conn as a generic type Connection<?> then java call the \"run\" method in JDK 1.4 style so it returns Object instead of &lt;T&gt;. (By the way, IntelliJ error highlighter don't event see this as a problem, it's javac that throws an error !).\r\n\r\nAnyway, it's not a big deal, just an annoyance. You fixed the stack overflow and thinks are looking better now. Keep up the good work !\r\n"
  , issueCommentId = 139841060
  }