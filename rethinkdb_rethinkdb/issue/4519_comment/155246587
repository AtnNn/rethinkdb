IssueComment
  { issueCommentUpdatedAt = 2015 (-11) (-10) 05 : 20 : 55 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 167416
        , simpleUserLogin = N "VeXocide"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/167416?v=3"
        , simpleUserUrl = "https://api.github.com/users/VeXocide"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/155246587"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/4519#issuecomment-155246587"
  , issueCommentCreatedAt = 2015 (-11) (-10) 00 : 41 : 57 UTC
  , issueCommentBody =
      "__Authentication__\r\nIn order to support authentication we'll unfortunately have to change our client protocol. We'll be removing the current auth key in favour of a challenge-response based authentication, almost certainly SCRAM-SHA-2 as described in https://tools.ietf.org/html/rfc7677. In the future this can be extended with X.509, Kerberos, and potentially others.\r\n\r\nA default user named `\"admin\"` with global privileges will exist and as long as it does not have a password set we will allow unauthenticated connections. These connections will be mapped onto this user, but once a password is set on it all connections from that point forward must be authenticated.\r\n\r\n__Permissions__\r\nWe will initially introduce four permissions.\r\n\r\n* `read` allows reading documents from a given scope.\r\n* `write` allows inserting and modifying documents in the given scope.\r\n* `config` allows the creation and deletion of indexes, running `reconfigure`, `rebalance`, and writing to the result of `table.config()`. In the database scope this will also allow the creation and deletion of tables, and similarly in the global scope this allows the creation and deletion of databases.\r\n* `connect` allows connecting to the outside world, currently facilitating `r.http` and only available at the global scope.\r\n\r\nThere will be three scopes, a global scope, a database scope, and a table scope. The smaller scopes will inherit the permissions of the larger scope, and the smaller scopes will overrule the larger scope. There is one exception though, the `rethinkdb` database will not inherit the `write` permission from the global scope, and will ignore the `config` permission.\r\n\r\n__Enforcement__\r\nThe following terms check permissions upon evaluation and will throw an error if the required permissions are not met.\r\n\r\n* `db` including the implicit database terms through the default database\r\n* `table`\r\n* `insert`, `update`, `replace`, `delete`\r\n* `db_create`, `db_drop`\r\n* `table_create`, `table_drop`, `index_create`, `index_drop`, `index_rename`\r\n* `reconfigure`, `rebalance`\r\n* `http` to preserve firewall boundaries and prevent the Web UI to be misused\r\n\r\n__Interface__\r\nWe will introduce a new system table `rethinkdb.users` containing the users and their associated permissions formatted as follows for a table `foo.bar`.\r\n```\r\n{\r\n  \"access\": {\r\n    \"access\": [\r\n      \"read\", \"write\"\r\n    ],\r\n    \"databases\": {\r\n      \"foo\": {\r\n        \"access\": [\r\n          \"read\"\r\n        ],\r\n        \"tables\": {\r\n          \"bar\": {\r\n            \"access\": [\r\n              \"read\"\r\n            ]\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \"username\": \"danielmewes\",\r\n  \"password\": \"<hidden>\"\r\n}\r\n```\r\n\r\nNew users can be added and removed by inserting and deleting from the table respectively, and the password and access can be set by updating the appropriate fields.\r\n\r\nGiven the complexity of the `\"access\"` field we will also introduce a new ReQL term `grant` which accepts a username and an object with a boolean per permission such as `{\"read\": true, \"write\": false}`. `r.grant` will operate on the global scope, `r.db(\"foo\").grant` will operate on the database and `r.db(\"foo\").table(\"bar\").grant` will similarly operate on the respective table.\r\n\r\nInitially we will not secure the Web UI, this can either be bound to localhost or disabled altogether.\r\n\r\n__Implementation__\r\nThe permissions will initially be stored in the semilattices and propagated through this, though there may be a better way in the future. Once authenticated the username will become part of the environment that is passed down to the evaluation of the query. "
  , issueCommentId = 155246587
  }