IssueComment
  { issueCommentUpdatedAt = 2013 (-06) (-05) 10 : 27 : 55 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/18967368"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/947#issuecomment-18967368"
  , issueCommentCreatedAt = 2013 (-06) (-05) 10 : 27 : 55 UTC
  , issueCommentBody =
      "Some more results: I've used a varying number of chained without() to test the scalability of chaining this operation.\r\nwithout() shows a similar performance penalty as pluck.\r\n\r\ntable('t55')->get(1)->run($conn);\r\ntable('t55')->get(1)->without([])->run($conn);\r\ntable('t55')->get(1)->without([])->without([])->run($conn);\r\n...\r\n\r\nAgain, I've done this for both get() and getAll(). The plot shows the latency (~processing time) of a single such query.\r\n\r\n![without chaining plot](https://f.cloud.github.com/assets/505365/611179/2c147230-cdca-11e2-97ad-73b5df9cf936.png)\r\n\r\nFor get(), chaining the withouts appears to scale quadratically, while for getAll it is scaling linearly."
  , issueCommentId = 18967368
  }