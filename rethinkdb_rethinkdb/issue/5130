Issue
  { issueClosedAt = Just 2015 (-12) (-03) 00 : 12 : 51 UTC
  , issueUpdatedAt = 2015 (-12) (-15) 22 : 27 : 19 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5130/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/5130"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "02d7e1"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/cp:reql"
          , labelName = "cp:reql"
          }
      , IssueLabel
          { labelColor = "e102d8"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:bug"
          , labelName = "tp:bug"
          }
      ]
  , issueNumber = 5130
  , issueAssignee =
      Just
        SimpleUser
          { simpleUserId = Id 67937
          , simpleUserLogin = N "encryptio"
          , simpleUserAvatarUrl =
              "https://avatars.githubusercontent.com/u/67937?v=3"
          , simpleUserUrl = "https://api.github.com/users/encryptio"
          , simpleUserType = OwnerUser
          }
  , issueUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Determinism checking in `geo.cc` is broken"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5130"
  , issueCreatedAt = 2015 (-11) (-21) 22 : 04 : 19 UTC
  , issueBody =
      Just
        "The terms in `geo.cc` that redefine `is_deterministic` all redefine it to return a constant, without regard to their arguments.  For example, `point_term_t` has the line `deterministic_t is_deterministic() const { return deterministic_t::always; }`.  I think this is incorrect because it will return `deterministic_t::always` even for term trees like `r.point(r.table('test').get(0)['x'], 1)` which are clearly not deterministic.  You can see this being done correctly in `op_term_t::is_deterministic()` where we loop over the arguments and return non-deterministic if they're non-deterministic.\n\nProbably the way we want to do this is that we want the `is_deterministic` implementations in `geo.cc` to call the `is_deterministic` implementation on their superclass, and then write them so that they can only ever produce a more conservative `deterministic_t` specification than the result of that call (like the current implementation of the poorly-named `all_are_deterministic` in `op.cc`).\n\nAssigning to @encryptio since he mentioned on Friday he was the one who first implemented this.\n"
  , issueState = "closed"
  , issueId = Id 118223861
  , issueComments = 2
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 505365
                , simpleUserLogin = N "danielmewes"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/505365?v=3"
                , simpleUserUrl = "https://api.github.com/users/danielmewes"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 0
          , milestoneNumber = 114
          , milestoneClosedIssues = 19
          , milestoneDescription = Nothing
          , milestoneTitle = "2.2.2"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/114"
          , milestoneCreatedAt = 2015 (-12) (-15) 22 : 25 : 25 UTC
          , milestoneState = "closed"
          }
  }