IssueComment
  { issueCommentUpdatedAt = 2016 (-04) (-29) 01 : 17 : 34 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 877936
        , simpleUserLogin = N "marshall007"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/877936?v=3"
        , simpleUserUrl = "https://api.github.com/users/marshall007"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/215606628"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/5707#issuecomment-215606628"
  , issueCommentCreatedAt = 2016 (-04) (-29) 01 : 17 : 34 UTC
  , issueCommentBody =
      "@danielmewes @mlucy I think #878 would make a lot of sense if we started down the path of complete `SEQUENCE <-> SINGLE_SELECTION` polymorphism. In doing so I think the `map` case would be more obvious since you would expect all terms that operate on sequences to behave a certain way for objects. Some notable examples:\r\n\r\n```js\r\n.count(function(v, k))\r\n.distinct(function(v, k))\r\n.reduce(function(acc, v, k))\r\n.map(function(v, k))\r\n```\r\n\r\n> Personally, I would expect calling `map` on an object to just work (although it's a little bit debatable whether it should return an array or another object).\r\n\r\nI think `object.map(...)` should return an array and we should still implement a new term like the one proposed here for returning an object."
  , issueCommentId = 215606628
  }