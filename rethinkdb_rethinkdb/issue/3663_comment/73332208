IssueComment
  { issueCommentUpdatedAt = 2015 (-02) (-06) 23 : 27 : 36 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/73332208"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3663#issuecomment-73332208"
  , issueCommentCreatedAt = 2015 (-02) (-06) 23 : 27 : 36 UTC
  , issueCommentBody =
      "> `[r.table(...), r.table(...), r.table(...).index(...), ...].wait()`\r\n\r\nI agree; that seems like a useful thing to want to do.  That particular syntax wouldn't work right now because you can't store tables in arrays, but `r.wait(table1, table2, index, ...)` would work, and would probably be a good idea.\r\n\r\n---\r\n\r\nI think supporting `r.table('test').index('a').wait()` but erroring on `r.table('test').index('a')` would be really bad.  People find ReQL's chaining intuitive because they can build commands up piece by piece, and because they can have a clear mental model of what every sub-chain returns.  Having queries that produce errors by themselves, but which produce something useful when you chain something else on the end is weird.  (`default` is a special case because it's meant to handle errors.)\r\n\r\nI would much prefer for `r.table('test').index('a')` to return an opaque representation of the index.  It makes the query language feel more consistent, it's strictly more useful, and I don't think anyone's going to be confused by it.  (Or if they are confused, I don't think they'll be any *more* confused than if they got an error in the same situation.)"
  , issueCommentId = 73332208
  }