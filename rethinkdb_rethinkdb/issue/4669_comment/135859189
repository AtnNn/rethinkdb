IssueComment
  { issueCommentUpdatedAt = 2015 (-08) (-28) 18 : 51 : 32 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/135859189"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/4669#issuecomment-135859189"
  , issueCommentCreatedAt = 2015 (-08) (-28) 18 : 51 : 32 UTC
  , issueCommentBody =
      "I think we're getting into the weeds a little bit.  To sum up what I think briefly:\r\n* The two error classes here occur in completely different parts of the system.  They occur in different programs on different servers, possibly maintained by different people on different upgrade schedules.  Usually errors that occur in different parts of a system are distinguished (see e.g. parsing errors vs. compilation errors vs. linking errors vs. distcc errors vs. runtime errors).  This is what I expect software to do.\r\n* The two error classes are more dissimilar than other error classes (compilation vs. runtime errors) that we already distinguish, so it feels consistent with choices we've already made to distinguish them.\r\n* The cost of distinguishing them is extremely low.\r\n\r\n(Also, from the perspective of personal experience, I have never once used a system and thought to myself \"I wish there weren't so many exception subclasses\".  Never once.  I just use the superclass if I don't care.  On the other hand, *not* having exception granularity when you need it is extraordinarily frustrating.)"
  , issueCommentId = 135859189
  }