Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2015 (-07) (-27) 22 : 05 : 43 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/3877/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/3877"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "207de5"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/cp:clustering"
          , labelName = "cp:clustering"
          }
      ]
  , issueNumber = 3877
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 316661
        , simpleUserLogin = N "timmaxw"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/316661?v=3"
        , simpleUserUrl = "https://api.github.com/users/timmaxw"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Arbiter servers"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/3877"
  , issueCreatedAt = 2015 (-03) (-04) 21 : 17 : 20 UTC
  , issueBody =
      Just
        "We should consider supporting arbiter servers for the Raft cluster. An arbiter would be a server that counted as a Raft voter but was not a replica or voter for any shard of the table. This would allow the Raft cluster to make decisions even if half of the other Raft voters were missing.\n\nThe main use case for arbiters is in a cluster of three machines. Two machines are replicas for the table, and the third machine is an arbiter; the arbiter never handles queries directly so the hardware requirements are much cheaper. If one of the replicas dies, the arbiter and the other replica can keep the table alive.\n\n(The above scenario doesn't actually work with our current implementation, since we currently need a majority of replicas for auto-failover. However, we might be able to relax this requirement, so that instead we only need enough replicas that the replicas we don't have can't perform writes.)\n"
  , issueState = "open"
  , issueId = Id 59863285
  , issueComments = 0
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 882
          , milestoneNumber = 2
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone are not an immediate priority, and will be periodically revisited. When we decide to work on an issue in backlog, we'll move it to next."
          , milestoneTitle = "backlog"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/2"
          , milestoneCreatedAt = 2012 (-11) (-11) 14 : 16 : 11 UTC
          , milestoneState = "open"
          }
  }