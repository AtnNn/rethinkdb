IssueComment
  { issueCommentUpdatedAt = 2015 (-09) (-08) 18 : 50 : 17 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/138667410"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/4807#issuecomment-138667410"
  , issueCommentCreatedAt = 2015 (-09) (-08) 18 : 50 : 17 UTC
  , issueCommentBody =
      "Thanks for the report @kulbirsaini.\r\nThat definitely sounds like a bug. We should either honour `dry_run` with `emergency_repair`, or alternatively throw an error if both options are used together.\r\n\r\n`dry_run` is a little bit less useful with `emergency_repair`, because there is no guarantee that a second call to `reconfigure()` will still yield the same result as the dry run. Without `emergency_repair`, one can take the generated configuration from the dry run, and apply it manually to the `table_config` table. This isn't possible for `emergency_repair`.\r\n\r\n@VeXocide do you think it would be easy to add `dry_run` support?"
  , issueCommentId = 138667410
  }