Issue
  { issueClosedAt = Just 2016 (-10) (-17) 14 : 58 : 41 UTC
  , issueUpdatedAt = 2016 (-10) (-17) 14 : 58 : 41 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/6138/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/6138"
  , issueClosedBy = Nothing
  , issueLabels = []
  , issueNumber = 6138
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 2024235
        , simpleUserLogin = N "babakness"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/2024235?v=3"
        , simpleUserUrl = "https://api.github.com/users/babakness"
        , simpleUserType = OwnerUser
        }
  , issueTitle =
      "Long live Rethinkdb: Rethinkdb on the client as a great alternative to Horizon"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/6138"
  , issueCreatedAt = 2016 (-10) (-07) 18 : 38 : 21 UTC
  , issueBody =
      Just
        "While Horizon is a offshoot project (really cool one at that), this project strives to bring RethinkDB / ReQL directly into the client over websockets\n\nhttps://github.com/mikemintz/rethinkdb-websocket-client\n\nWorks pretty good. We've had success with it in React Native and it works for us with Redux, RxJS and/or Redux Observables (https://github.com/redux-observable/redux-observable)\n\nI would bet that it will work just fine in NativeScript and Electron as well.\n\nAnyway, I hope other people in community can consider this too, I wonder if many don't know about it--it is much closer to the origins of the project than Horizon is. You get ReQL directly in the browser. On the server / security side of things, you have this project\n\nhttps://github.com/mikemintz/rethinkdb-websocket-server\n\nThis translates the TCP connection to websocket; It uses a whitelist to allow only specific queries through. Its a clever setup and could easily be turned into a \"serverless\" setup where the user just submits the whitelist functions and adds hooks to before and after the data is processed as well as on error triggers.\n\nHere is an example of it in use through another project by Mike that wraps the two aforementioned projects into a React Mixin for rapid prototyping:\n\nhttps://www.youtube.com/watch?v=WchhRxdNojk\n"
  , issueState = "closed"
  , issueId = Id 181739196
  , issueComments = 4
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 706854
                , simpleUserLogin = N "AtnNn"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/706854?v=3"
                , simpleUserUrl = "https://api.github.com/users/AtnNn"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 0
          , milestoneNumber = 26
          , milestoneClosedIssues = 316
          , milestoneDescription =
              Just
                "These issues are neither bugs nor feature requests. Spam, user questions and accidentally created issues end up here."
          , milestoneTitle = "invalid"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/26"
          , milestoneCreatedAt = 2013 (-04) (-05) 01 : 37 : 20 UTC
          , milestoneState = "closed"
          }
  }