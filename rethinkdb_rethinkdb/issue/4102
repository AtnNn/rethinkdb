Issue
  { issueClosedAt = Just 2015 (-05) (-02) 08 : 24 : 00 UTC
  , issueUpdatedAt = 2015 (-05) (-05) 20 : 52 : 32 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4102/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/4102"
  , issueClosedBy = Nothing
  , issueLabels = []
  , issueNumber = 4102
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 7713695
        , simpleUserLogin = N "shastingspod"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/7713695?v=3"
        , simpleUserUrl = "https://api.github.com/users/shastingspod"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Using SSL tunnels with Blue-Green Deployment"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4102"
  , issueCreatedAt = 2015 (-04) (-23) 17 : 39 : 45 UTC
  , issueBody =
      Just
        "We are trying to set up blue-green deployment for updates to our RethinkDB cluster.  For regulatory reasons, we need all intracluster traffic to be encrypted.  We are using stunnel to encrypt traffic between the nodes within a cluster, which works great when we set up a single cluster and know all the configuration details when launching stunnel and RethinkDB.  However, we're not sure the best way to make it work when trying to replicate from blue-to-green during an update.\r\n\r\nSpecifically, consider the following cluster arrangment:\r\n    We start up 3 amazon AWS servers.  Install rethinkdb and stunnel on all of them.  We then modify rethinkdb and stunnel to communicate in and out through seperate ports (i.e. server 1 will talk to server 2 through port A and listen to server 2 on port B)(see figure).  This cluster will be considered our Blue cluster.  Each node in the cluster has 2*(n) connections. Now, for example, say that Blue is out of date.  Since we don't want our servers to have any down time, we start up another cluster and call it our Green cluster.  Now we want to move the data over from Blue to Green using encripted channels.  Ideally we would like to connect one node from each cluster via stunnel and replicate across that one connection.  However, when that connection is made, RethinkDB recognizes that there are nodes that aren't connected accross the two clusters.  This prevents the replication process.  The reason for replication rather than just pulling down the data from the Blue cluster and uploading it to the Green cluster is because we would like there to be zero downtime between shutting down blue and migrating to green.\r\n\r\nIs there a way you recommend to do this without restarting the nodes?\r\n\r\nFigure:\r\nIn this chart we would like to connect the two clusters through one connection.  Since every stunnel connection uses a different port, it would be cumbersome to connect all 6 nodes.  Ideally this connection would allow us to replicate from Blue (indicated by a, b, c in blue) to Green (indicated by 1, 2, 3 in green).  After the replication process is finished we could then cut ties with the Blue cluster and use our newly created Green cluster.\r\n\r\n![rdb_bluegreen_stunnel](https://cloud.githubusercontent.com/assets/7713695/7303290/a1bc3e9e-e9bd-11e4-960f-0d7094d40199.png)\r\n"
  , issueState = "closed"
  , issueId = Id 70469671
  , issueComments = 5
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 706854
                , simpleUserLogin = N "AtnNn"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/706854?v=3"
                , simpleUserUrl = "https://api.github.com/users/AtnNn"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 0
          , milestoneNumber = 19
          , milestoneClosedIssues = 174
          , milestoneDescription =
              Just
                "It's a feature. The issue describes a RethinkDB feature or design choice as if it was a bug."
          , milestoneTitle = "notabug"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/19"
          , milestoneCreatedAt = 2013 (-03) (-29) 21 : 07 : 05 UTC
          , milestoneState = "closed"
          }
  }