Issue
  { issueClosedAt = Just 2015 (-08) (-20) 20 : 44 : 17 UTC
  , issueUpdatedAt = 2015 (-08) (-20) 20 : 44 : 17 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4687/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/4687"
  , issueClosedBy = Nothing
  , issueLabels = []
  , issueNumber = 4687
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 1581429
        , simpleUserLogin = N "andrerpena"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1581429?v=3"
        , simpleUserUrl = "https://api.github.com/users/andrerpena"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Do you think RethinkDB is a good fit for a CRM?"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4687"
  , issueCreatedAt = 2015 (-08) (-14) 01 : 50 : 43 UTC
  , issueBody =
      Just
        "First, I love RethinkDB, and these are my compelling reasons:\r\n\r\n - Easy to scale... I mean.. I don't know if it can get any easier.\r\n - Beautiful query language, to the point that an ORM becomes useless.\r\n - Server joins.\r\n - Change feeds.\r\n\r\nI'm looking for an answer, even if it's a biased one, just as a confirmation, so I feel like I'm not investing in the wrong tool for my problem. Regardless of the answers here, RethinkDB has a place in my heart :)\r\n\r\nMy goal:\r\n---\r\n\r\nI'm investing plenty of time building a platform for developing data-centric business apps called [Gearz](https://github.com/gearz-lab/gearz). When it hits the first alpha, I'm going to release a CRM on top of it. I have 8+ years of experience building ERPs. I know the problems I need to tackle, this is my take to make something new.\r\n\r\nMy focus:\r\n---\r\n\r\nTo create a platform/CRM focused on **flexibility** and **configuration-over-code**. It's completely declarative. It's possible to declare entities and properties, as well as how these properties interact with each other. For instance, it's possible to declare that a property is invisible when another property has a value that is less than 1000. I'm building an infrastructure based on React to automatically render views based on metadata. It's beautiful.\r\n\r\nHere are my points of interest:\r\n\r\n - I don't know beforehand the entities the user is going to create. When the CRM is released, there's going to be Contacts, Sales, Leads... But the user will have total freedom to declare whatever entities they want, as well as their properties and layouts.\r\n\r\nMy problem:\r\n---\r\n\r\nNormally CRMs adopt a relational database because entities relate to each other. Yes, not necessarily a Contact will have the Sales embedded. It's possible that the Contacts and the Sales will be separate entities that will have to be associated somehow. The standard approach is to have foreign-keys, I know that.\r\n\r\nNow there's a dilemma, because normally the app schema would be fixed, and that's exactly what I don't want. I want a free schema, I want the user to declaratively state that entities, properties, actions, layouts and relationships exist and I want to build everything automatically. This doesn't fix in a fixed SQL schema.\r\n\r\nMy dilemma:\r\n---\r\n\r\nI know that RethinkDB has two characteristics that may be roadblocks:\r\n\r\n - The absense of foreign keys.\r\n - The absense of transactions.\r\n\r\nYet it gives me the freedom I want, like a SQL environment would never give me.\r\n\r\nConclusion:\r\n---\r\n\r\nI have faith, and it's not more than faith, that I can handle the absense of foreign keys and the absense of transactions in the application, without that being enforced by the DB.\r\n\r\nI have faith that, if you delete a Sale but the reference in the Contact somehow wasn't updated because of the lack of transactions, I can just show the Contact as inconsistent and provide a tool to fix inconsistences automatically.\r\n\r\nI think that this will work.\r\n\r\nCan you please provide me with feedback on that architecture, on the RethinkDB side? Even if it's biased, and even if it's just a \"I think it will work\" or \"I think it will not work\"?\r\n\r\nThank you very much in advance.\r\n\r\n"
  , issueState = "closed"
  , issueId = Id 100910298
  , issueComments = 4
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 706854
                , simpleUserLogin = N "AtnNn"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/706854?v=3"
                , simpleUserUrl = "https://api.github.com/users/AtnNn"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 0
          , milestoneNumber = 19
          , milestoneClosedIssues = 174
          , milestoneDescription =
              Just
                "It's a feature. The issue describes a RethinkDB feature or design choice as if it was a bug."
          , milestoneTitle = "notabug"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/19"
          , milestoneCreatedAt = 2013 (-03) (-29) 21 : 07 : 05 UTC
          , milestoneState = "closed"
          }
  }