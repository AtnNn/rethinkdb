IssueComment
  { issueCommentUpdatedAt = 2013 (-05) (-23) 17 : 52 : 25 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/18360174"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/867#issuecomment-18360174"
  , issueCommentCreatedAt = 2013 (-05) (-23) 17 : 52 : 25 UTC
  , issueCommentBody =
      "I disagree. I think the conversation would go like this (based on the ones I had at least):\r\n\r\n> user: Can anyone help me with how to use regex to extract some data from my dataset?\r\n> us: sure, which language are you using?\r\n> user: python\r\n> user: I have a regex I want to use, \"foo(\\(\\d+\\), \\(\\d+\\))\"\r\n> us: okay, try `table.filter(r.match(\"foo(\\(\\d+\\), \\(\\d+\\))\"))`\r\n> user: ok thanks!\r\n\r\nI don't think passing the lambda function will come up very often at all. It's a pretty advanced use case as far as databases are concerned, since in overwhelming majority of the times, people just want to get all documents by a match. Of course some users will want something special, in which case:\r\n\r\n> user: oh that doesn't work for me, because I want to get all the documents where the digits add up to 5\r\n> us: ok, try `table.filter(r.match(lambda res: res[0].coerce_to('number') + res[1].corce_to('number') == 5))`\r\n> user: ok, thanks!\r\n\r\nI think the latter conversation will be very rare, but is still easy to have. It feels like the question of whether lambdas are hard to explain is valid, but orthogonal to the question of how to use `match`.\r\n\r\n"
  , issueCommentId = 18360174
  }