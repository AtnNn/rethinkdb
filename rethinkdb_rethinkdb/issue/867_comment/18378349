IssueComment
  { issueCommentUpdatedAt = 2013 (-05) (-23) 23 : 32 : 23 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 43867
        , simpleUserLogin = N "jdoliner"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/43867?v=3"
        , simpleUserUrl = "https://api.github.com/users/jdoliner"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/18378349"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/867#issuecomment-18378349"
  , issueCommentCreatedAt = 2013 (-05) (-23) 23 : 32 : 23 UTC
  , issueCommentBody =
      "So I actually think it could be pretty nice to have promiscuous truthiness everywhere. I like it in `filter` and if we have it there I really see no reason not to have it in other places. We should definitely should think about it a bit but it seems like it will work pretty well.\r\n\r\n---\r\n\r\nAs for the question of telling users they just have to learn to use lambdas to use RethinkDB I think that thus far we've done a really good job of making it not be true. We've got pretty nice sugar for `group_by`, `filter` and `map` the really help people to not use this and I think a lot of the reason those syntaxes are easier for people is that they don't require lambdas. Furthermore for I think users can really get a long way using only those syntaxes. That being said a RethinkDB user will eventually need to learn to use lambdas but I still think it's very important to think about when we're using them and why. In this case what @coffeemug proposed seems to be a very reasonable syntax that doesn't require any lambdas and leads to much nicer syntax so we should do it.\r\n\r\n---\r\n\r\nI also agree on the not citing private conversations without explaining what was said. As I remember it the conversation just came down to preferring the shortened syntax. In particular if you want to extract values being able to say `string.match(\"<\\(\\d\\)>\")[1]` is way nicer than `string.match(\"<\\(\\d\\)>\", lambda x: x[1])`. And with promiscuous truthiness it gives you a nice syntax for `filter` et. al"
  , issueCommentId = 18378349
  }