IssueComment
  { issueCommentUpdatedAt = 2013 (-05) (-24) 17 : 09 : 19 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 43867
        , simpleUserLogin = N "jdoliner"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/43867?v=3"
        , simpleUserUrl = "https://api.github.com/users/jdoliner"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/18417667"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/867#issuecomment-18417667"
  , issueCommentCreatedAt = 2013 (-05) (-24) 17 : 09 : 19 UTC
  , issueCommentBody =
      "So I was imagining the API would look as follows with promiscuous truthiness\r\n\r\n```\r\n> r(\"abcd\").match(/b/).run\r\n[\"b\"]\r\n> r(\"abcd\").match(/e/).run\r\nnil\r\n> r(\"abcd\").match(/([ab])([cd])/)[1]\r\n\"b\"\r\n> r(\"abcd\").match(/([ab])d/) {|groups| groupss}\r\nnil\r\n``` \r\n\r\nBasically return the groups and people can access them using array indexing. It seems like in your proposal we're drawing some inspiration from all 3 of the proposals. We can use `match` as a predicate. We can use it to get out the first match without a lambda if that's all we want. If we want to get any of the individual groups then we resort to the lambda.\r\n\r\n---\r\n\r\nI don't know why it is but having to write this extra lambda really just seems ugly to me and very not in keeping with our chainability motif. Even though it's an advanced operation it just feels like an ugly wart on the API to have to pass the function I want to apply to a single object rather than being able to just directly manipulate."
  , issueCommentId = 18417667
  }