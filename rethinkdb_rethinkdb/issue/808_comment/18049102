IssueComment
  { issueCommentUpdatedAt = 2013 (-05) (-17) 08 : 17 : 42 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 706854
        , simpleUserLogin = N "AtnNn"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/706854?v=3"
        , simpleUserUrl = "https://api.github.com/users/AtnNn"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/18049102"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/808#issuecomment-18049102"
  , issueCommentCreatedAt = 2013 (-05) (-17) 08 : 17 : 42 UTC
  , issueCommentBody =
      "There is a prototype for generating python documention in the branch `atnnn/pydocs`:\r\n\r\n```\r\n>>> import rethinkdb as r\r\n>>> help(r.expr)\r\nHelp on function expr in module rethinkdb.ast:\r\n\r\nexpr(val)\r\n    Construct a RQL JSON object from a native object.\r\n    \r\n    Objects wrapped with expr can then be manipulated by RQL API functions.\r\n    >>> r.expr({'a':'b'}).merge({'b':[1,2,3]}).run(conn)\r\n>>> help(r.ast)\r\n[...]\r\n     |  distinct(self)\r\n     |      Remove duplicate elements from the sequence.\r\n     |      \r\n     |      Which unique villains have been vanquished by marvel heroes?\r\n     |      >>> r.table('marvel').concat_map(lambda hero: hero['villainList']).distinct().run(conn)\r\n     |  \r\n     |  div(*args)\r\n     |      Divide two numbers.\r\n     |      \r\n     |      It's as easy as 2 / 2 = 1.\r\n     |      >>> (r.expr(2) / 2).run(conn)\r\n[...]\r\n```"
  , issueCommentId = 18049102
  }