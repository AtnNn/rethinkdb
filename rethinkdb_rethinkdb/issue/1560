Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2013 (-10) (-23) 08 : 40 : 45 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/1560/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/1560"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "0052cc"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:ReQL_proposal"
          , labelName = "tp:ReQL_proposal"
          }
      ]
  , issueNumber = 1560
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 43867
        , simpleUserLogin = N "jdoliner"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/43867?v=3"
        , simpleUserUrl = "https://api.github.com/users/jdoliner"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Add combination indexes "
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/1560"
  , issueCreatedAt = 2013 (-10) (-23) 00 : 26 : 28 UTC
  , issueBody =
      Just
        "There are 2 parts to this proposal. The first is that I think we should allow for objects as keys both in secondary indexes and primary. The reason being that if you try to create a compound index on a set of fields `[\"a\", \"b\", \"c\"]` and some of your documents are missing fields it gets really awkward really quickly. The standard way to create this index is:\r\n\r\n```Python\r\ntable.index_create(\"a_b_c\", lambda doc: [doc[\"a\"], doc[\"b\"], doc[\"c\"]])\r\n```\r\nHowever if any of these are missing the whole result returns an error which means that the row doesn't get at all. To get around this you have to type `default` a lot which is a pain. However if we allowed objects then you could do:\r\n\r\n```Python\r\ntable.index_create(\"a_b_c\", lambda doc: doc.pluck(\"a\", \"b\", \"c\"))\r\n```\r\nwhich is very convenient. I've had a few people mention that this would be nice.\r\n\r\n\r\nThis feature gets a lot more useful when you add a `combination=True` flag to `index_create` here's how it would work:\r\n\r\n```Python\r\ntable.index_create(\"a_b_c\", r.row.pluck(\"a\", \"b\", \"c\"), combination=True)\r\ntable.get_all({\"a\" : 1})\r\ntable.get_all({\"a\" : 1, \"b\" : 2})\r\n```\r\n\r\nbasically you get an indexed version of the shorthand filter syntax.\r\n\r\nThis is also really easy to implement because it uses exactly the same code paths as multi indexes."
  , issueState = "open"
  , issueId = Id 21426787
  , issueComments = 5
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 883
          , milestoneNumber = 2
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone are not an immediate priority, and will be periodically revisited. When we decide to work on an issue in backlog, we'll move it to next."
          , milestoneTitle = "backlog"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/2"
          , milestoneCreatedAt = 2012 (-11) (-11) 14 : 16 : 11 UTC
          , milestoneState = "open"
          }
  }