Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2016 (-04) (-29) 02 : 29 : 44 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5707/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/5707"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "0052cc"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:ReQL_proposal"
          , labelName = "tp:ReQL_proposal"
          }
      ]
  , issueNumber = 5707
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 3033376
        , simpleUserLogin = N "mike-thompson-day8"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/3033376?v=3"
        , simpleUserUrl = "https://api.github.com/users/mike-thompson-day8"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Introduce map-kv"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5707"
  , issueCreatedAt = 2016 (-04) (-22) 01 : 48 : 46 UTC
  , issueBody =
      Just
        "So, from what I can tell, the current pattern for iterating across the key/value pairs of an object, modifying either the key or the value, and recreating the object, looks roughly like this:\n\n```\nr({\"a\": 1, \"b\": 2}).do(\n  (obj) =>  r.map(obj.keys(), obj.values(), (k, v) => [k, v]).coerceTo('OBJECT'))\n```\n\nFor simplicity, I haven't attempted to to alter either the keys or values above, but you get the idea. \n\nNow, I program in a lisp (clojurescript) and I'm forever iterating across hashmaps and doing things with the keys or values before rebuilding the hashmap.  So the code above seems a bit clumsy and noisy for that process. \n\nBut I'm relatively new to rethinkdb, so perhaps this business of iterating over key/value pairs doesn't come up very often, so I may be out of line with this suggestion, but I would have thought this was a sufficiently common case to justify the existence of function, called say, `map-kv`  which could be used like this (equivalent in affect to the code above):\n\n```\nr({\"a\": 1, \"b\": 2}).do(\n  (obj) =>  obj.map-kv((k, v) => [k, v]))\n```\n\nAll the boilerplate around `keys` and `values` and `coerceTo` would be removed.   \n\nWould `map-o`  (map over an object) be a better name?\n\nJust a thought.\n\nI can see some discussion in related areas in these issues:\nhttps://github.com/rethinkdb/rethinkdb/issues/2768#issuecomment-51949565  and https://github.com/rethinkdb/rethinkdb/issues/3542\n"
  , issueState = "open"
  , issueId = Id 150241788
  , issueComments = 9
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 268
          , milestoneNumber = 41
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone will be revisited after each major release during the planning stage for the major release after it. They will be moved to a specific release milestone if chosen for that release."
          , milestoneTitle = "subsequent"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/41"
          , milestoneCreatedAt = 2013 (-06) (-30) 07 : 32 : 52 UTC
          , milestoneState = "open"
          }
  }