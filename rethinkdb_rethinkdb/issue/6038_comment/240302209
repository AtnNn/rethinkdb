IssueComment
  { issueCommentUpdatedAt = 2016 (-08) (-17) 03 : 14 : 51 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1430058
        , simpleUserLogin = N "ntquyen"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1430058?v=3"
        , simpleUserUrl = "https://api.github.com/users/ntquyen"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/240302209"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/6038#issuecomment-240302209"
  , issueCommentCreatedAt = 2016 (-08) (-17) 03 : 10 : 55 UTC
  , issueCommentBody =
      "@danielmewes Yesterday we faced the raft election timeout loops in almost all of our clusters, especially ones with many tables (~100 tables) and large dataset (20GB per instance). It happened after a network failure. The network recovered after 1 minute, but the raft election timeouts remained.\r\nFor more info, we are running 10 clusters of 3 instances, running in 3 machines(2 VMs with 8 dedicated CPUs, 1 bare metal), the total dataset is ~160GB per machine.\r\n\r\nI would like to ask more about good/bad of our data structure design. We are splitting the data into many tables, one for each client. The main goal is to isolate the client data. The benefits of this design is faster in write (because of small index tree) and reduce the impact when a table is reconfiguring or down. \r\n\r\nHowever, that's what we reason base on our understanding of database design. We aren't sure which is better, splitting or not splitting in case of rethinkdb cluster. I begin to concern about this design because base on our observation, the performance issue we are suffering is much related to the high number of tables. Can give us some advises?\r\n"
  , issueCommentId = 240302209
  }