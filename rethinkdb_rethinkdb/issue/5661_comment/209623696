IssueComment
  { issueCommentUpdatedAt = 2016 (-04) (-13) 20 : 05 : 03 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 67937
        , simpleUserLogin = N "encryptio"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/67937?v=3"
        , simpleUserUrl = "https://api.github.com/users/encryptio"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/209623696"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/5661#issuecomment-209623696"
  , issueCommentCreatedAt = 2016 (-04) (-13) 20 : 04 : 05 UTC
  , issueCommentBody =
      "This is actually forcing me to rethink my thoughts on exceptions (no pun intended.) My gut feeling is \"ew pls no\", but digging into it, none of my objections apply to ReQL. (The usual ones I have are related to poor documentation of what exceptions can be thrown in what situations, the difficulty of debugging a forgotten exception at one layer that was noticed at a different layer dozens of files and hundreds of stack entries away, bad use of exceptions (like for non-exceptional situations), etc; all of those objections are irrelevant to ReQL.)\r\n\r\nThe more I think about it, the less I think `catch` is a bad idea for ReQL in particular. I have some objections about the particular syntax you mention for it (overloaded one-arg `catch` is a bit scary if you allow string error names, the use of `r.literal` doesn't seem appropriate, and in the general case of `catch` I think a function handler should be the primary form with perhaps some shortcuts), but the overall idea of `catch` in ReQL seems okay after giving it some thought."
  , issueCommentId = 209623696
  }