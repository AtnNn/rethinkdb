Issue
  { issueClosedAt = Just 2015 (-11) (-16) 19 : 24 : 43 UTC
  , issueUpdatedAt = 2015 (-11) (-16) 19 : 24 : 47 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5089/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/5089"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "444444"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:performance"
          , labelName = "tp:performance"
          }
      ]
  , issueNumber = 5089
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 969456
        , simpleUserLogin = N "webmasterkai"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/969456?v=3"
        , simpleUserUrl = "https://api.github.com/users/webmasterkai"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Is r.merge() unreasonably slow?"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5089"
  , issueCreatedAt = 2015 (-11) (-14) 06 : 33 : 10 UTC
  , issueBody =
      Just
        "Let's say I want to create an object with 500 random keys. My first thought is to do something like:\n\n```\nr.range(500)\n  .map(function(row){ return r.object(r.uuid(), row) })\n  .reduce(function(left, right){ return left.merge(right) })\n```\n\nExcept that takes 250ms. If you really want to get crazy, try doing 1500 instead of 500. For me, it takes over 2.5 seconds...\n\nTo cut the time in half I can do something like:\n\n```\nr.range(250)\n  .map(function(row){ return r.object(r.uuid(), row) })\n  .reduce(function(left, right){ return left.merge(right) })\n  .merge(\n    r.range(250)\n    .map(function(row){ return r.object(r.uuid(), row) })\n    .reduce(function(left, right){ return left.merge(right) })\n  )\n```\n\nOk, so it must be related to the number of keys?\n\nThe following does 500 merges on single key objects. It takes 11ms on my machine:\n\n```\nr.range(500)\n  .map(function(row){ return [r.object(r.uuid(), row), r.object(r.uuid(), row.add(1))]})\n  .map(function(row){ return row(0).merge(row(1)) })\n```\n\n~~If I have an object with 500 keys and I do a single merge with an empty object it takes around 7ms to evaluate the merge. Doing the reverse, take an empty object and merging the 500 key object onto it takes 8-10ms.~~ [edit] Looks like `Evaluating make_obj` is the thing slowing it downhere.\n\nUsing node Array.reduce and Object.assign() on an array of 1500 objects takes less than 10ms. Why is RethinkDB 250 times slower?\n"
  , issueState = "closed"
  , issueId = Id 116904012
  , issueComments = 4
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 706854
                , simpleUserLogin = N "AtnNn"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/706854?v=3"
                , simpleUserUrl = "https://api.github.com/users/AtnNn"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 1
          , milestoneNumber = 17
          , milestoneClosedIssues = 595
          , milestoneDescription =
              Just
                "The scope of this issue is covered by another issue. The closing comment should link to the other issue."
          , milestoneTitle = "duplicate"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/17"
          , milestoneCreatedAt = 2013 (-03) (-29) 20 : 23 : 12 UTC
          , milestoneState = "closed"
          }
  }