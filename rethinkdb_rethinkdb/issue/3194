Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2015 (-02) (-23) 19 : 52 : 00 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/3194/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/3194"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "0052cc"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:ReQL_proposal"
          , labelName = "tp:ReQL_proposal"
          }
      ]
  , issueNumber = 3194
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 2115079
        , simpleUserLogin = N "techdragon"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/2115079?v=3"
        , simpleUserUrl = "https://api.github.com/users/techdragon"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "object internal order preservation"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/3194"
  , issueCreatedAt = 2014 (-10) (-15) 06 : 49 : 53 UTC
  , issueBody =
      Just
        "I have a small dance I perform in order to get from the query result to a python ordered dict without letting the query logic 'corrupt' the ordered JSON object I'm querying. So firstly, somewhere in the query semantics it would be nice to be able to specify order is important, in python there is a dead simple tool for this 'ordereddict' which functions exactly like a dictionary, it just won't screw up the order of its internal parts. I dug in, having a look with an eye towards making a PR, but wasn't sure quite where to place the logic yet. Ideally the final result would be either an ordered dict for individual object queries, or a list of ordereddict objects for queries that return a list. \r\n\r\nSecondly... and more importantly, can we get documentation or an answer, on if the underlying rethinkdb engine, preserves the order of the document. Since theres no point in me working on an ordereddict enabling argument/option for the python driver, if rethinkdb itself doesn't store the internal order of the json object. "
  , issueState = "open"
  , issueId = Id 45835001
  , issueComments = 2
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 882
          , milestoneNumber = 2
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone are not an immediate priority, and will be periodically revisited. When we decide to work on an issue in backlog, we'll move it to next."
          , milestoneTitle = "backlog"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/2"
          , milestoneCreatedAt = 2012 (-11) (-11) 14 : 16 : 11 UTC
          , milestoneState = "open"
          }
  }