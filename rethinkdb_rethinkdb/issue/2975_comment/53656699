IssueComment
  { issueCommentUpdatedAt = 2014 (-08) (-27) 23 : 49 : 16 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 316661
        , simpleUserLogin = N "timmaxw"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/316661?v=3"
        , simpleUserUrl = "https://api.github.com/users/timmaxw"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/53656699"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2975#issuecomment-53656699"
  , issueCommentCreatedAt = 2014 (-08) (-27) 23 : 49 : 16 UTC
  , issueCommentBody =
      "> I see, thanks. If the commands are being issued to the same server in a cluster, or if the cluster is only one server, is the operation safe?\r\n\r\nIt's not specifically designed to be. I think it turns out to be safe in practice (at least in version 1.14) but it's best not to rely on this.\r\n\r\n> Further, and after this I'll stop talking because I don't really know enough, but if the table_create operation is defined as conflict=ignore, maybe other servers in the cluster may interpret this as a noop. The option then would have to be passed along between servers, rather than being only client side.\r\n\r\nUnfortunately, that isn't practical under our current code-base.\r\n\r\n(Also, if I understand your suggestion correctly, I think there is still a race condition. If you run `r.table_create('foo', conflict='ignore')` on two servers simultaneously, it's possible that not all of the servers will end up agreeing on which is the \"real\" table `foo`.)"
  , issueCommentId = 53656699
  }