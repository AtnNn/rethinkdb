IssueComment
  { issueCommentUpdatedAt = 2013 (-07) (-19) 21 : 37 : 36 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 43867
        , simpleUserLogin = N "jdoliner"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/43867?v=3"
        , simpleUserUrl = "https://api.github.com/users/jdoliner"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/21279136"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/872#issuecomment-21279136"
  , issueCommentCreatedAt = 2013 (-07) (-19) 21 : 37 : 36 UTC
  , issueCommentBody =
      "@mlucy `r.literal` is something that only makes sense at very particular points in the syntax tree. It shouldn't actually evaluate to any real value and if it's passed outside of `merge` it should throw an error the same way `r.desc` does. I'd actually like the have a consistent way to handle these cases that doesn't involve pseudo types and doesn't require going directly in to the PB source which is really really cumbersome. What if we added a new type of `val_t` called a `TAGGED_VALUE` which wrapped another `val_t` but also tacked 0 or more tags which would just be enums like `DESCENDING`, `LITERAL` then we could write sane `eval_impl` functions. When you call `as_datum` on a `TAGGED_VALUE` it just returns the inner `val_t`."
  , issueCommentId = 21279136
  }