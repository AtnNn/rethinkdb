IssueComment
  { issueCommentUpdatedAt = 2013 (-07) (-02) 18 : 09 : 12 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 43867
        , simpleUserLogin = N "jdoliner"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/43867?v=3"
        , simpleUserUrl = "https://api.github.com/users/jdoliner"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/20364327"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/872#issuecomment-20364327"
  , issueCommentCreatedAt = 2013 (-07) (-02) 18 : 09 : 12 UTC
  , issueCommentBody =
      "I'm very opposed to using `r.doc` for this. Right now \"doc\" has a pretty concrete meaning in our nomenclature it's the thing you put in tables. It's similar to SQL's rows except that it can be nested and more complicated. If we use \"doc\" for this too then what does the word \"doc\" mean? What's a \"doc\" in the following expression?\r\n\r\n```\r\ntable.merge({\"foo\" : {\"bar\" : r.doc({})}})\r\n```\r\n\r\nThis to me reads that the empty dict which \"bar\" maps to is a \"doc\" but that just doesn't match at all with my current concept of what a \"doc\" is and I really don't want to dilute that concept. \r\n\r\nWhat if we called it `r.exact` since you wind up with exactly that value in the resulting object?"
  , issueCommentId = 20364327
  }