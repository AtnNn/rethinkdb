IssueComment
  { issueCommentUpdatedAt = 2014 (-03) (-03) 06 : 34 : 33 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/36484697"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2041#issuecomment-36484697"
  , issueCommentCreatedAt = 2014 (-03) (-03) 06 : 30 : 52 UTC
  , issueCommentBody =
      "One alternative could be to support views (as in SQL `CREATE VIEW`). Having a view that does a join would have a similar effect. Except that it would operate on a per-table level, while this is on a per-document level (i.e. you can have one document that has a symlink to table B, and another one that links to table C, and yet another one that doesn't have any links all in one table).\r\n\r\nSymlinks sound more appropriate for a No-SQL system. On the other hand SQL Views are more flexible when it comes to the operations that can be performed.\r\n\r\nTo combine the best of both worlds, maybe we could allow for fields to be ReQL functions?\r\nYou can have a field be the function `function (doc) { return r.table(...).get(id) }` for example. That would be equivalent to the symlink. Or you could have a document like this:\r\n```\r\n{\r\nincome: 1000,\r\nexpenses: 700,\r\nbalance: function (doc) { return doc('income') - doc('expenses'); }\r\n}\r\n```\r\nwhere the function refers to other fields of the current document."
  , issueCommentId = 36484697
  }