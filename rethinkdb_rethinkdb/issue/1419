Issue
  { issueClosedAt = Just 2013 (-09) (-11) 21 : 50 : 59 UTC
  , issueUpdatedAt = 2013 (-09) (-12) 02 : 12 : 05 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/1419/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/1419"
  , issueClosedBy = Nothing
  , issueLabels = []
  , issueNumber = 1419
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 150063
        , simpleUserLogin = N "jprichardson"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/150063?v=3"
        , simpleUserUrl = "https://api.github.com/users/jprichardson"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Crash: Out of Memory Error"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/1419"
  , issueCreatedAt = 2013 (-09) (-11) 21 : 42 : 41 UTC
  , issueBody =
      Just
        "My first experience actually writing useful data to a RethinkDB caused an out of memory crash =( Is this common or expected?\r\n\r\nThe machines are on Digital Ocean. It's a two machine cluster setup. Both have 1 GB of ram. I would have picked a larger machine size, but any documentation about RethinkDB's recommend machine requirements is non-existent.\r\n\r\nHere is the crash log output if it helps:\r\n\r\n```\r\n2013-09-11T10:29:54.415645525 33341.832036s error: Error in src/utils.cc at line 252:\r\n2013-09-11T10:29:54.416212220 33341.832603s error: Out of memory.\r\n2013-09-11T10:29:54.416230792 33341.832621s error: Backtrace:\r\n2013-09-11T10:29:54.490078982 33341.906471s error: Wed Sep 11 10:29:54 2013\\n\\n1: format_backtrace(bool) at 0xd1f872 (/usr/bin/rethinkdb)\\n2: report_fatal_error(char const*, int, char const*, ...) at 0xba8130 (/usr/bin/rethinkdb)\\n3: malloc_aligned(unsigned long, unsigned long) at 0xd317c6 (/usr/bin/rethinkdb)\\n4: log_serializer_t::malloc() at 0xd09404 (/usr/bin/rethinkdb)\\n5: translator_serializer_t::malloc() at 0xd12d2e (/usr/bin/rethinkdb)\\n6: serializer_data_ptr_t::init_malloc(serializer_t*) at 0xd15d41 (/usr/bin/rethinkdb)\\n7: mc_inner_buf_t::mc_inner_buf_t(mc_cache_t*, unsigned long, unsigned long, repli_timestamp_t) at 0xbea6bc (/usr/bin/rethinkdb)\\n8: mc_inner_buf_t::allocate(mc_cache_t*, unsigned long, repli_timestamp_t) at 0xbea891 (/usr/bin/rethinkdb)\\n9: mc_buf_lock_t::mc_buf_lock_t(mc_transaction_t*) at 0xbeb7c3 (/usr/bin/rethinkdb)\\n10: blob_t::add_level(mc_transaction_t*, int) at 0xbe60c5 (/usr/bin/rethinkdb)\\n11: blob_t::append_region(mc_transaction_t*, long) at 0xbe64a6 (/usr/bin/rethinkdb)\\n12: kv_location_set(keyvalue_location_t<rdb_value_t>*, store_key_t const&, boost::shared_ptr<scoped_cJSON_t>, btree_slice_t*, repli_timestamp_t, mc_transaction_t*) at 0xc33ed7 (/usr/bin/rethinkdb)\\n13: rdb_replace_and_return_superblock(btree_slice_t*, repli_timestamp_t, mc_transaction_t*, superblock_t*, std::string const&, store_key_t const&, ql::map_wire_func_t*, return_vals_t, ql::env_t*, promise_t<superblock_t*>*, Datum*, rdb_modification_info_t*) at 0xc360a9 (/usr/bin/rethinkdb)\\n14: rdb_replace(btree_slice_t*, repli_timestamp_t, mc_transaction_t*, superblock_t*, std::string const&, store_key_t const&, ql::map_wire_func_t*, return_vals_t, ql::env_t*, Datum*, rdb_modification_info_t*) at 0xc37081 (/usr/bin/rethinkdb)\\n15: rdb_write_visitor_t::operator()(rdb_protocol_t::point_replace_t const&) at 0xc80cae (/usr/bin/rethinkdb)\\n16: rdb_protocol_t::store_t::protocol_write(rdb_protocol_t::write_t const&, rdb_protocol_t::write_response_t*, transition_timestamp_t, btree_slice_t*, mc_transaction_t*, scoped_ptr_t<superblock_t>*, write_token_pair_t*, signal_t*) at 0xc6f96c (/usr/bin/rethinkdb)\\n17: btree_store_t<rdb_protocol_t>::write(region_map_t<rdb_protocol_t, binary_blob_t> const&, rdb_protocol_t::write_t const&, rdb_protocol_t::write_response_t*, write_durability_t, transition_timestamp_t, order_token_t, write_token_pair_t*, signal_t*) at 0xbc3684 (/usr/bin/rethinkdb)\\n18: store_subview_t<rdb_protocol_t>::write(region_map_t<rdb_protocol_t, binary_blob_t> const&, rdb_protocol_t::write_t const&, rdb_protocol_t::write_response_t*, write_durability_t, transition_timestamp_t, order_token_t, write_token_pair_t*, signal_t*) at 0x82cdf9 (/usr/bin/rethinkdb)\\n19: store_subview_t<rdb_protocol_t>::write(region_map_t<rdb_protocol_t, binary_blob_t> const&, rdb_protocol_t::write_t const&, rdb_protocol_t::write_response_t*, write_durability_t, transition_timestamp_t, order_token_t, write_token_pair_t*, signal_t*) at 0x82cdf9 (/usr/bin/rethinkdb)\\n20: listener_t<rdb_protocol_t>::perform_writeread(rdb_protocol_t::write_t const&, transition_timestamp_t, order_token_t, fifo_enforcer_write_token_t, mailbox_addr_t<void (rdb_protocol_t::write_response_t)>, write_durability_t, auto_drainer_t::lock_t) at 0x872932 (/usr/bin/rethinkdb)\\n21: callable_action_instance_t<boost::_bi::bind_t<void, boost::_mfi::mf7<void, listener_t<rdb_protocol_t>, rdb_protocol_t::write_t const&, transition_timestamp_t, order_token_t, fifo_enforcer_write_token_t, mailbox_addr_t<void (rdb_protocol_t::write_response_t)>, write_durability_t, auto_drainer_t::lock_t>, boost::_bi::list8<boost::_bi::value<listener_t<rdb_protocol_t>*>, boost::_bi::value<rdb_protocol_t::write_t>, boost::_bi::value<transition_timestamp_t>, boost::_bi::value<order_token_t>, boost::_bi::value<fifo_enforcer_write_token_t>, boost::_bi::value<mailbox_addr_t<void (rdb_protocol_t::write_response_t)> >, boost::_bi::value<write_durability_t>, boost::_bi::value<auto_drainer_t::lock_t> > > >::run_action() at 0x86119c (/usr/bin/rethinkdb)\\n22: coro_t::run() at 0xd57b0e (/usr/bin/rethinkdb)\r\n2013-09-11T10:29:54.490849096 33341.907240s error: Exiting.\r\n```\r\n\r\nI realize there are no guarantees of production level stability yet, but is this behavior the norm? \r\n\r\nThanks again for all your hard work and eagerness to help. "
  , issueState = "closed"
  , issueId = Id 19348843
  , issueComments = 5
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 706854
                , simpleUserLogin = N "AtnNn"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/706854?v=3"
                , simpleUserUrl = "https://api.github.com/users/AtnNn"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 1
          , milestoneNumber = 17
          , milestoneClosedIssues = 593
          , milestoneDescription =
              Just
                "The scope of this issue is covered by another issue. The closing comment should link to the other issue."
          , milestoneTitle = "duplicate"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/17"
          , milestoneCreatedAt = 2013 (-03) (-29) 20 : 23 : 12 UTC
          , milestoneState = "closed"
          }
  }