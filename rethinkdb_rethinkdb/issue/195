Issue
  { issueClosedAt = Just 2014 (-07) (-11) 19 : 54 : 13 UTC
  , issueUpdatedAt = 2016 (-05) (-05) 00 : 59 : 04 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/195/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/195"
  , issueClosedBy = Nothing
  , issueLabels = []
  , issueNumber = 195
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 181337
        , simpleUserLogin = N "pixelspark"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/181337?v=3"
        , simpleUserUrl = "https://api.github.com/users/pixelspark"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Add functionality for message queuing"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/195"
  , issueCreatedAt = 2012 (-12) (-27) 10 : 05 : 46 UTC
  , issueBody =
      Just
        "It would be really nice if RethinkDB could be used to pass messages between servers. My guess is that even though this feature is somewhat different than the others, a lot of the required infrastructure is already in place. Much of the query processing already happens in 'streams' anyway. On the receiver side, this could look like this:\n\n``` javascript\nr.db().table().filter({topic:\"christmas\"}).listen(function(msg) {  /* message about christmas received */ });\n```\n\nOn the sender side, it is simply an insert() to a particular table. To prevent the table from filling up, messages should periodically be removed (either by the database or by the user) based on some sort of TTL value. Another option is implementing a message channel without any backing store:\n\n``` javascript\n// sender\nr.db().channel(\"someChannel\").insert({topic:\"christmas\", message:\"hello world\"});\n\n// receiver\nr.db().channel(\"someChannel\").filter({topic:\"christmas\"}).listen(function(msg) { console.log(msg.message): });\n```\n\nFor some use cases, it should be possible to guarantee that a message was delivered to exactly one listener.\n"
  , issueState = "closed"
  , issueId = Id 9535190
  , issueComments = 31
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 706854
                , simpleUserLogin = N "AtnNn"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/706854?v=3"
                , simpleUserUrl = "https://api.github.com/users/AtnNn"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 0
          , milestoneNumber = 52
          , milestoneClosedIssues = 66
          , milestoneDescription =
              Just
                "These issues have been moved to another repository. Usually `docs` or one of the private repos."
          , milestoneTitle = "moved"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/52"
          , milestoneCreatedAt = 2013 (-11) (-06) 22 : 17 : 28 UTC
          , milestoneState = "closed"
          }
  }