IssueComment
  { issueCommentUpdatedAt = 2013 (-07) (-11) 07 : 36 : 42 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 646357
        , simpleUserLogin = N "wmrowan"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/646357?v=3"
        , simpleUserUrl = "https://api.github.com/users/wmrowan"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/20795256"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1016#issuecomment-20795256"
  , issueCommentCreatedAt = 2013 (-07) (-11) 07 : 36 : 42 UTC
  , issueCommentBody =
      "I think the correct way to do this would be to have each driver implement a ReQLType abstract class (or equivalent concept) from which the user may subclass to create a new type. Instances of this class could then be passed to and stored in rethinkdb (using any mechanism we want) and retrieving values of the custom type would result in new instances of the class. The details of serialization and deserialization could be hidden from the user rendering arguments like #1149 unnecessary as this would be purely an implementation detail internal to the server.\r\n\r\nMost of the hard work would be done within the parent class in the driver but the user would be able to provide fine grained guidance by choosing to overload comparison methods etc.\r\n\r\nI think that functionality like this would feel much more like magic than `r.register_type` and thus get us a little bit closer to closing #1000."
  , issueCommentId = 20795256
  }