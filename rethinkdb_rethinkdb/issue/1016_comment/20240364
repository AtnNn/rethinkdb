IssueComment
  { issueCommentUpdatedAt = 2013 (-06) (-30) 02 : 41 : 15 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/20240364"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1016#issuecomment-20240364"
  , issueCommentCreatedAt = 2013 (-06) (-30) 01 : 30 : 44 UTC
  , issueCommentBody =
      "My plan was to get together with everyone next week after 1.7 is out and discuss 1.8, but roughly I think the most important things for 1.8 (wrt ReQL) are as follows:\r\n\r\n* `.group.map.reduce`\r\n* dates\r\n* nested objects (extending `pluck` syntax to other commands, and implementing `r.literal`)\r\n\r\nAfter these three are done, everything else in ReQL strikes me as a \"nice to have\" category (in as much as ReQL functionality post these changes will be sufficient to satisfy a huge number of users and will cease to be a bottleneck for product adoption, possibly with triggers and very minor ReQL improvements being notable exceptions). So we can move on to performance and scalability after 1.8 is out.\r\n\r\nIt seems to me that extending ReQL with more types, and supporting a custom `registerType` functionality on the drivers are a) mostly orthogonal, and b) not a bottleneck relative to performance/scale issues. One possibility is that we might want to support client-side date types, and can implement it on top of `registerType` functionality. Since it's entirely a driver-side thing, I wouldn't be opposed to doing it in 1.8 if we have the time.\r\n\r\nAlso FYI: the 1.8 milestone contains way more than we need for 1.8 as of now. I'll pare it down soon."
  , issueCommentId = 20240364
  }