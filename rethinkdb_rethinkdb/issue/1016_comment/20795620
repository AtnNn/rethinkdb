IssueComment
  { issueCommentUpdatedAt = 2013 (-07) (-11) 07 : 46 : 39 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/20795620"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1016#issuecomment-20795620"
  , issueCommentCreatedAt = 2013 (-07) (-11) 07 : 46 : 39 UTC
  , issueCommentBody =
      "> I think the correct way to do this would be to have each driver implement a ReQLType abstract class (or equivalent concept) from which the user may subclass to create a new type.\r\n\r\nThere are a couple of downsides to this approach:\r\n\r\n* It wouldn't work well with existing types users might want to store (for example, NumPy types) because they'd have to create wrapper objects which would get rather messy.\r\n* It would be very difficult for the abstract type to magically serialize the derived type correctly. For example, many types have transient fields that don't need to be serialized, and the driver wouldn't know that. Supporting this kind of stuff would get really complicated because we'd have to build a declarative serialization framework in each driver, which is hard.\r\n\r\nOverall, I think `register_type` would be much easier to use, and would work for more use cases."
  , issueCommentId = 20795620
  }