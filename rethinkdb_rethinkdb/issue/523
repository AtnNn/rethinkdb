Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2013 (-04) (-03) 06 : 02 : 16 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/523/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/523"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "02d7e1"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/cp:reql"
          , labelName = "cp:reql"
          }
      , IssueLabel
          { labelColor = "02e10c"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:enhancement"
          , labelName = "tp:enhancement"
          }
      ]
  , issueNumber = 523
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 706854
        , simpleUserLogin = N "AtnNn"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/706854?v=3"
        , simpleUserUrl = "https://api.github.com/users/AtnNn"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Keep selection information in the response"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/523"
  , issueCreatedAt = 2013 (-03) (-22) 05 : 17 : 07 UTC
  , issueBody =
      Just
        "I would add optional database name, table name and primary key fields to the `Response` protobuf message. These fields would be filled in whenever the query is a Selection.\r\n\r\nThis would allow drivers to associate each returned object with a document in the database. My haskell driver currently does this by keeping track of what table is being queried, but it make things very complicated and fails with code like `r.branch(foo, r.table('a'), r.table('b'))`. It also assumes that the primary key is `id`.\r\n\r\nHere is a simple example from the [google datastore tutorial](https://developers.google.com/appengine/docs/python/datastore/overview) that illustrates their API. In this example, `e` is the object returned by the query, but it also remembers the document it refers to.\r\n\r\n```\r\nemployees_trained = db.GqlQuery(\"SELECT * FROM Employee WHERE email IN :1\",\r\n                                training_registration_list)\r\nfor e in employees_trained:\r\n  e.new_hire_training_completed = True\r\n  db.put(e)\r\n```"
  , issueState = "open"
  , issueId = Id 12307101
  , issueComments = 0
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 882
          , milestoneNumber = 2
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone are not an immediate priority, and will be periodically revisited. When we decide to work on an issue in backlog, we'll move it to next."
          , milestoneTitle = "backlog"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/2"
          , milestoneCreatedAt = 2012 (-11) (-11) 14 : 16 : 11 UTC
          , milestoneState = "open"
          }
  }