IssueComment
  { issueCommentUpdatedAt = 2014 (-10) (-19) 20 : 19 : 52 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/59663609"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2646#issuecomment-59663609"
  , issueCommentCreatedAt = 2014 (-10) (-19) 20 : 19 : 37 UTC
  , issueCommentBody =
      "I ran a couple of experiments but couldn't derive a final explanation at that time. Sorry I haven't followed up since then.\r\n\r\nA few things I remember out of my head:\r\n- It's only reproducible if the working set does not fit into the cache. Could be a problem due to i/o contention (and possibly bad i/o scheduling). Or i/o delays might just have amplified a different problem that's in its core unrelated to i/o.\r\n- Fiddling with the i/o priorities of reads vs. writes that we use internally in RethinkDB didn't help.\r\n- It didn't appear to be a locking problem on the block level.\r\n\r\nI will have to check my notes for more details later.\r\n\r\nWe will investigate this further."
  , issueCommentId = 59663609
  }