IssueComment
  { issueCommentUpdatedAt = 2014 (-03) (-11) 18 : 12 : 05 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 122287
        , simpleUserLogin = N "sandstrom"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/122287?v=3"
        , simpleUserUrl = "https://api.github.com/users/sandstrom"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/37329761"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/117#issuecomment-37329761"
  , issueCommentCreatedAt = 2014 (-03) (-11) 18 : 12 : 05 UTC
  , issueCommentBody =
      "Two thoughts, regarding migrations from other databases to Rethink and string representation.\r\n\r\nWhen moving from MongoDB/MySQL to Rethink it's nice to use a uniform id format. It would be good if the Rethink ID function could both generate them randomly (normal method of operation) or based on a seed (which would be the old id from another structure).\r\n\r\nFor example:\r\n\r\n    rdbUuidFunction('mysql_table_name-1') => '1u7v7tzap6ua18f6lyr' // mysql to rethink\r\n    rdbUuidFunction('5318cd64421aa9f2e800002d') => '40aubkd55r8yhoo2qr' // mongodb to rethink\r\n\r\nThis use-case would be only for migrations, and it would always generate the same output for one input string.\r\n\r\nIt would leave it to the developer to ensure that the input is unique (i.e. `database_table_id` for e.g. MySQL and another unique id for e.g. MongoDB.\r\n\r\n***\r\n\r\nI know nothing about database design and choice of id algorithms, but having an id where the string representation is short (and url compatible) is neat, i.e. `[a-z0-9]` [alpha num] is better than `[a-f0-9]` [hex]."
  , issueCommentId = 37329761
  }