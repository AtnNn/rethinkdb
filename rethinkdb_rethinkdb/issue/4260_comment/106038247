IssueComment
  { issueCommentUpdatedAt = 2015 (-05) (-27) 19 : 07 : 51 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 877936
        , simpleUserLogin = N "marshall007"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/877936?v=3"
        , simpleUserUrl = "https://api.github.com/users/marshall007"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/106038247"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/4260#issuecomment-106038247"
  , issueCommentCreatedAt = 2015 (-05) (-27) 19 : 07 : 51 UTC
  , issueCommentBody =
      "@AtnNn I'd be happy with that workaround except that the server complains if your function declaration isn't wrapped in parentheses. I'm not sure if that should be considered a bug or if there's some reasoning behind that requirement, but the workaround would be more like this:\r\n\r\n```js\r\nr.js('('+function (row) {\r\n  return row.magazines.length > 5;\r\n}.toString()+')')\r\n```\r\n\r\n[`node-webworker-threads`](https://github.com/audreyt/node-webworker-threads#installing-the-module) (among other threading/sandbox modules) implement behavior similar to what we're discussing here. Notice how you can instantiate `Worker` with a function, but that function is executed in an isolated context. I think Node.js developers will either already be familiar with this concept or pick it up pretty quickly upon seeing the error message.\r\n\r\nLike I said though, I'd be happy with the inline `.toString()` workaround if the parentheses could be made optional."
  , issueCommentId = 106038247
  }