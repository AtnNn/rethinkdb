IssueComment
  { issueCommentUpdatedAt = 2015 (-07) (-16) 21 : 41 : 43 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1366
        , simpleUserLogin = N "deontologician"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1366?v=3"
        , simpleUserUrl = "https://api.github.com/users/deontologician"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/122111039"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/4543#issuecomment-122111039"
  , issueCommentCreatedAt = 2015 (-07) (-16) 21 : 41 : 35 UTC
  , issueCommentBody =
      "Under the hood it creates an array of arrays, which are then turned into an object:\r\n\r\n```\r\n[[\"key\", \"val\"], [\"key2\", \"val2\"]]\r\n```\r\n\r\nAn array shaped like that can be coerced to an object, assuming the keys are all distinct, and the first value of all the sub arrays are strings.\r\n\r\n> I didn't know [...] map would accept an array as parameter instead of a function\r\n\r\nThis is part of  `r.row`'s magic. If you use `r.row` it wraps the surrounding expression with a function, so it's equivalent to:\r\n\r\n```js\r\nfoo.map(function(x){return [x('field1'), x('field2')]})\r\n```"
  , issueCommentId = 122111039
  }