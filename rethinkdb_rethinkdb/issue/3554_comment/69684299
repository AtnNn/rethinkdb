IssueComment
  { issueCommentUpdatedAt = 2015 (-01) (-13) 02 : 07 : 19 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/69684299"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3554#issuecomment-69684299"
  , issueCommentCreatedAt = 2015 (-01) (-13) 02 : 07 : 19 UTC
  , issueCommentBody =
      "I like the \"We could make auto_drainer_t have a non-trivial constructor\" option because it's not much work (especially the `remember_to_consider_destructor_order_t` variant) and would likely be a noticeable improvement already.\r\n\r\nThe explicit `stop()` seems slightly more effective. I'm a little bit concerned that it might become  annoying to use though.\r\n\r\nStatic analysis seems to give the strongest guarantees. We could even consider enforcing that *all* class members come before an auto drainer, unless they're somehow added to a white list. This solution seems to be very work-intensive though, and I'm not convinced that this would be work well spent."
  , issueCommentId = 69684299
  }