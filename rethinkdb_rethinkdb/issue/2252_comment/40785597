IssueComment
  { issueCommentUpdatedAt = 2014 (-04) (-18) 04 : 14 : 40 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 412608
        , simpleUserLogin = N "kamilion"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/412608?v=3"
        , simpleUserUrl = "https://api.github.com/users/kamilion"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/40785597"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2252#issuecomment-40785597"
  , issueCommentCreatedAt = 2014 (-04) (-18) 04 : 14 : 40 UTC
  , issueCommentBody =
      "Yes, This is something I needed months ago.\r\n\r\nUSE CASE:\r\nRight now I've got a ~53 node rethinkdb cluster that started at 1.7 and is now running 1.11 on 13.04.\r\nToday, I'm busily updating everything for 14.04. It's all based on a modified livecd made with the ubuntu-builder project (which sadly, was discontinued a month ago. It's fairly trivial to add the 14.04 repositories to it's last release though!) that is derived from Lubuntu. Large 'desktop' packages like abiword are removed so just the bare GUI with terminal, text editor, filemanager and Control Panel remain, development tools and python3 goodies are added, as well as the Xen hypervisor and several other essential virtualization tools like openvswitch.\r\n\r\nEach of the nodes is equipped with a 2GB industrial USB stick ( http://r.ebay.com/TPcjF1 ) which contains a fat32 partition and the GRUB2 bootloader.\r\n\r\nmenuentry \"Lubuntu Live ISO RAMROOT (32Bit)\" {\r\n  set isofile=\"/boot/isos/lubuntu.iso\"\r\n  loopback loop $isofile\r\n  set gfxpayload=keep\r\n  linux (loop)/casper/vmlinuz boot=casper iso-scan/filename=$isofile console=ttyS0,115200 console=tty0 TORAM=Yes --\r\n  initrd (loop)/casper/initrd.lz\r\n}\r\n\r\nIn early boot, ubuntu's 'casper' boot script copies the squashfs file from the .iso to a tmpfs ramdisk before mounting it. Without the \"TORAM=Yes\", it is mounted directly from the ISO file, incurring a relatively horrible speed penalty if the ISO resides on a slow device such as a USB stick or actual optical media.\r\n\r\nFrom there, initscripts start supervisord, and supervisord uses a combination of the DHCP-assigned hostname and serf ( http://www.serfdom.io/ ) to discover a local master server.\r\n\r\nA rethinkdb configuration file is written to --join the found master. RethinkDB is started and now provides access to the authentication database where all user data is stored with the 'scrypt' encryption cipher.\r\n\r\nWhen a user successfully authenticates, the secret stored within the scrypt container is released for use. In my case, I simply store 64 random characters inside; but it can contain binary data of any length, so there's nothing stopping someone from storing a SSH private key or cat.jpg or JSON/YAML, or mom's recipes. The only important property I care about is that scrypt will either return an error/exception if the passphrase is wrong, or return data when the passphrase is correct.\r\n\r\nThis is far far more secure than any password hashing scheme.\r\nUnfortunately, python's passlib will only support it in a future 1.7.0 release, the current 1.6.2 does not.\r\n\r\nWhy do I use rethinkdb for this? Well, SQL has this well-intentioned-but-pesky limit of field sizes.\r\nSince the above scheme could grow arbitratily large per record, SQL is not a good fit.\r\nPlus, more recently, I've been providing live status of the hardware state of my cluster to the database using upserts. I have a very nicely working interface between ubuntu's udisks2 infrastructure to map the attributes it exposes to rethinkdb documents in realtime as they change.\r\nI've been working on tools to convert smartctl's output to json so that disk health values are updated in realtime via upserts.\r\n\r\nHere's an example: https://gist.github.com/kamilion/9825450\r\n\r\nIt has been. SO. EASY. Well, other than the pesky \"figure out how to make everything json\" bits.\r\n\r\nAnyway. One of the caveats of this architecture, most notably the \"TORAM=Yes\" boot parameter, is that when a machine shuts down, all of it's state that was in RAM has nowhere to go, and vanishes somewhere into the magic blue smoke stored inside computer chips.\r\n\r\nTo combat this; a master machine was assigned (by dhcp hostname) and given a disk to mount using a simple 'if your dhcpname is Master, then mount -t btrfs /dev/sda2; swapon /dev/sda1;' in the bootscripts.\r\n\r\nCurrently, I've been doing evil/unclean things using https://github.com/rethinkdb/rethinkdb/blob/next/test/common/http_admin.py#L484\r\n\r\nBut I think it could be done in a much cleaner way. As a sidenote, to anyone else moving to 14.04 and using python3, there's a couple roadbumps that will be ironed out in post-release update packages:\r\n\r\nhttp://www.reddit.com/r/linux/comments/239xw2/ubuntu_1404_lts_is_here/cgv6ueb"
  , issueCommentId = 40785597
  }