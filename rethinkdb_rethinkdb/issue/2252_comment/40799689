IssueComment
  { issueCommentUpdatedAt = 2014 (-04) (-18) 10 : 44 : 21 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 412608
        , simpleUserLogin = N "kamilion"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/412608?v=3"
        , simpleUserUrl = "https://api.github.com/users/kamilion"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/40799689"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2252#issuecomment-40799689"
  , issueCommentCreatedAt = 2014 (-04) (-18) 10 : 09 : 01 UTC
  , issueCommentBody =
      "Great! I'd love to see some clustering knobs and buttons that can be mashed from a shell prompt and/or various languages (import subprocess32 is acceptable ;) ).\r\n\r\nAs for wojon's managing the actual ebb and flow of nodes for clusters, I would figure an external machination would be more suitable, such as serf, or something else of the user's choosing like ansible, salt-stack, juju, puppet, or chef.\r\n\r\nSerf is very good at delivering simple out of band events to handlers.\r\nhttp://www.serfdom.io/docs/commands/event.html\r\nhttp://www.serfdom.io/docs/agent/event-handlers.html\r\n\r\nAs well as simple queries using a scatter->gather system for basic metrics.\r\nhttp://www.serfdom.io/docs/commands/query.html\r\n\r\nTime is a very simplistic metric to operate upon, but an effective one none the less.\r\nIt is, however, the very thing that makes serf work:\r\nhttp://www.serfdom.io/docs/internals/gossip.html\r\n\r\nI'll reproduce one of the more informative paragraphs here:\r\n\r\n>Serf makes heavy use of lamport clocks to maintain some notion of message ordering despite being eventually consistent. Every message sent by Serf contains a lamport clock time.\r\n\r\n>When a node gracefully leaves the cluster, Serf sends a leave intent through the gossip layer. Because the underlying gossip layer makes no differentiation between a node leaving the cluster and a node being detected as failed, this allows the higher level Serf layer to detect a failure versus a graceful leave.\r\n\r\n>When a node joins the cluster, Serf sends a join intent. The purpose of this intent is solely to attach a lamport clock time to a join so that it can be ordered properly in case a leave comes out of order.\r\n\r\nThis makes serf quite good at handling network dropouts, something that rethinkdb could use some work at, while you're attacking the Clustering system. One of my cheap hundred megabit switches has gone a bit flakey and rethink gets quite unhappy, while serf notices and recovers. And occasionally linode's uplinks in dallas evaporate for no discernible reason.\r\n\r\nThe query example in the serf docs, calling the 'uptime' shell command, should also return you the load average of the machines. While extremely coarse, it can be a good metric to watch loosely to see if expansion or contraction is necessary, or if your architecture is containerized, having a container depart after 48 hours so the next expansion operation inherently pulls a more recent container revision. \r\n\r\nFor example, Linode's now got hourly 'cloud' machines and an API to launch 'em, kill 'em, and detect their untimely deaths.\r\nhttps://blog.linode.com/2014/04/09/introducing-hourly-billing/\r\nhttps://blog.linode.com/2014/04/17/linode-cloud-ssds-double-ram-much-more/\r\nAWS it ain't, but it sure beats Azure. It's kind of stuffed deep in the bottom of their pricing FAQ, but the gist is, when you use the API to cancel an hourly VM, you're issued an account credit which can then be consumed by other VMs added via API.\r\nhttps://library.linode.com/prepaid-billing#sph_removing-services\r\n\"Service credit is always used before charging the credit card on file for ongoing service.\"\r\nand \"All services are billed automatically on the first of the month, and all fees billed to your account are prorated for the current billing cycle.\"\r\nFun information you only learn if you lurk #linode on irc :)\r\n\r\nEveryone is going to need slightly different logic based on their business needs; and at the same time trying to mash rethink in as quickly and easily as possible.\r\n\r\nEasy things should stay easy, hard things should get easier, and impossible things should get hard.\r\n\r\nSerf isn't going to be for everyone, but if you're reasonably small, it makes a great first page to start out on."
  , issueCommentId = 40799689
  }