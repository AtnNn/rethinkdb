IssueComment
  { issueCommentUpdatedAt = 2014 (-01) (-31) 01 : 45 : 09 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 61540
        , simpleUserLogin = N "pilwon"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/61540?v=3"
        , simpleUserUrl = "https://api.github.com/users/pilwon"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/33755032"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1395#issuecomment-33755032"
  , issueCommentCreatedAt = 2014 (-01) (-31) 01 : 44 : 37 UTC
  , issueCommentBody =
      "@neumino I agree that the addition of generator could wait until Node.js 0.12, but I'd hope that promise be added sooner. In my opinion, promise is just another style and callback style will probably never be completely replaced with callback. Instead of waiting until the perfect signal (which I don't think will happen), one way would be to add support for both, like some other projects do, and give users an option.\r\n\r\nI usually have no problem wrapping any callback-only code with [q](https://github.com/kriskowal/q)'s `Q.denodeify` or `Q.nbind` but rethinkdb driver makes it really tricky to wrap it because the query builder functions are all built into the same module. I also tried [rql-promise](https://github.com/guillaumervls/rql-promise) but what I concluded was it's the cleanest and the easiest to just add this to the official driver, especially when it doesn't take too much effort as you mentioned.\r\n\r\nIt's currently one of the biggest pain points for me right now as user's perspective. (mixing with other promise-based code)"
  , issueCommentId = 33755032
  }