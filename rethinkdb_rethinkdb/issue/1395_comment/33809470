IssueComment
  { issueCommentUpdatedAt = 2014 (-01) (-31) 16 : 33 : 07 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1456118
        , simpleUserLogin = N "jamescostian"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1456118?v=3"
        , simpleUserUrl = "https://api.github.com/users/jamescostian"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/33809470"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1395#issuecomment-33809470"
  , issueCommentCreatedAt = 2014 (-01) (-31) 16 : 33 : 07 UTC
  , issueCommentBody =
      "I think it would be cool if there was an `r.connectPromise` which would act like `r.connect` but it would return a promise. One could then wait until that promise is fulfilled with either `.then()` (Q-style) or by using a generator that yeilds to the promise.\r\n\r\nQueries could be run with just `.run(conn)` if conn is a connection that was made with `r.connectPromise` and the way that one could tell if it was made with `r.connectPromise` is the connection object could have a property `isPromise` that could be set to true if the user wants to use promises or false if the user wants to use callbacks."
  , issueCommentId = 33809470
  }