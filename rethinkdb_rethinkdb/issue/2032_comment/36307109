IssueComment
  { issueCommentUpdatedAt = 2014 (-02) (-27) 23 : 56 : 46 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1461947
        , simpleUserLogin = N "neumino"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1461947?v=3"
        , simpleUserUrl = "https://api.github.com/users/neumino"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/36307109"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2032#issuecomment-36307109"
  , issueCommentCreatedAt = 2014 (-02) (-27) 23 : 56 : 46 UTC
  , issueCommentBody =
      "They are going to run\r\n\r\n```\r\nr.table(\"foo\").group('a').count().run(connection, function(err, cursor) {\r\n    if (err) throw err;\r\n    cursor.toArray(function(err, result) {\r\n        console.log(JSON.stringify(result, null, 2))\r\n    })\r\n})\r\n```\r\n\r\nAnd they will never know that they have a `grouped_data` object. Returning a new type of object doesn't solve the problem.\r\nNode.js users don't use the shell as python users can.\r\n\r\nI also don't see what's wrong with the explanation of `group`/`ungroup` I gave in my previous comment.\r\n\r\nWe shouldn't worry about the driver not always matching the type of a result with the type in the server.\r\n\r\nHaving to deal with array and cursor is already confusing -- and if someone thinks it's not, and wants to reopen this debate, I would be happy to go through my logs to show concrete example of confused users.\r\nAdding a `grouped_data` is exactly the same thing (maybe worst).\r\n\r\nIf we keep matching the driver and the server, we are going to end up adding a new type of object for numbers since JavaScript numbers are just 32 bits double."
  , issueCommentId = 36307109
  }