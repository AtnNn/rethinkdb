IssueComment
  { issueCommentUpdatedAt = 2014 (-02) (-28) 00 : 49 : 20 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/36310710"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2032#issuecomment-36310710"
  , issueCommentCreatedAt = 2014 (-02) (-28) 00 : 49 : 20 UTC
  , issueCommentBody =
      "@coffeemug -- an array of pairs solves half the confusion (\"the output is the same whether or not I call `ungroup`\", but not \"I'm getting back an array but I can't chain functions on the end like I expect\").  If we have to do something like this, we should return something that doesn't look like another type in our type system (e.g. we could return the raw psuedotype).\r\n\r\n@neumino -- we can't just solve this with a better error message because sometimes we just do the wrong thing rather than causing an error.  For example, if the user writes `tbl.group('a').min('a').pluck('reduction')`, they probably expect to get back an array like `[{reduction: ...}, ...]`, but instead they get back `[{group: ..., reduction: {}}, ...]`.\r\n\r\n@Tryneus -- \"confusing\" and \"simple and usable\" or not orthogonal.  In this case, I think confusion is our biggest usability problem."
  , issueCommentId = 36310710
  }