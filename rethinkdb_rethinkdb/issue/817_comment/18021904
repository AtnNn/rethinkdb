IssueComment
  { issueCommentUpdatedAt = 2013 (-05) (-16) 19 : 00 : 52 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 552910
        , simpleUserLogin = N "Tryneus"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/552910?v=3"
        , simpleUserUrl = "https://api.github.com/users/Tryneus"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/18021904"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/817#issuecomment-18021904"
  , issueCommentCreatedAt = 2013 (-05) (-16) 19 : 00 : 52 UTC
  , issueCommentBody =
      "Ok, I added a check for kv_location.value.has() before the kv_location_delete, which seems to fix the problem.\r\n\r\nThen, I tried adding a sindex for a field that doesn't exist in all rows, and that resulted in the second error I had above:\r\n\r\n```c\r\nVersion: rethinkdb 1.5.0-8-g8f447d-dirty (debug) (GCC 4.6.1)\r\nerror: Error in ../src/rdb_protocol/protocol.cc at line 238:\r\nerror: Guarantee failed: [ser_res == 0]  (errno 11 - Resource temporarily unavailable) corruption in disk-backed queue\r\nerror: Backtrace:\r\nerror: Thu May 16 11:56:36 2013\r\n       \r\n       1: rethinkdb_backtrace(void**, int) at thread_stack_pcs.cc:151\r\n       2: lazy_backtrace_t::lazy_backtrace_t() at backtrace.cc:250\r\n       3: format_backtrace(bool) at backtrace.cc:197\r\n       4: report_fatal_error(char const*, int, char const*, ...) at errors.cc:67\r\n       5: rdb_protocol_details::post_construct_and_drain_queue(std::set<uuid_u, std::less<uuid_u>, std::allocator<uuid_u> > const&, btree_store_t<rdb_protocol_t>*, boost::shared_ptr<internal_disk_backed_queue_t>, auto_drainer_t::lock_t) at protocol.cc:238\r\n       6: void boost::_bi::list4<boost::_bi::value<std::set<uuid_u, std::less<uuid_u>, std::allocator<uuid_u> > >, boost::_bi::value<btree_store_t<rdb_protocol_t>*>, boost::_bi::value<boost::shared_ptr<internal_disk_backed_queue_t> >, boost::_bi::value<auto_drainer_t::lock_t> >::operator()<void (*)(std::set<uuid_u, std::less<uuid_u>, std::allocator<uuid_u> > const&, btree_store_t<rdb_protocol_t>*, boost::shared_ptr<internal_disk_backed_queue_t>, auto_drainer_t::lock_t), boost::_bi::list0>(boost::_bi::type<void>, void (*&)(std::set<uuid_u, std::less<uuid_u>, std::allocator<uuid_u> > const&, btree_store_t<rdb_protocol_t>*, boost::shared_ptr<internal_disk_backed_queue_t>, auto_drainer_t::lock_t), boost::_bi::list0&, int) at bind.hpp:457\r\n       7: boost::_bi::bind_t<void, void (*)(std::set<uuid_u, std::less<uuid_u>, std::allocator<uuid_u> > const&, btree_store_t<rdb_protocol_t>*, boost::shared_ptr<internal_disk_backed_queue_t>, auto_drainer_t::lock_t), boost::_bi::list4<boost::_bi::value<std::set<uuid_u, std::less<uuid_u>, std::allocator<uuid_u> > >, boost::_bi::value<btree_store_t<rdb_protocol_t>*>, boost::_bi::value<boost::shared_ptr<internal_disk_backed_queue_t> >, boost::_bi::value<auto_drainer_t::lock_t> > >::operator()() at bind_template.hpp:21\r\n       8: callable_action_instance_t<boost::_bi::bind_t<void, void (*)(std::set<uuid_u, std::less<uuid_u>, std::allocator<uuid_u> > const&, btree_store_t<rdb_protocol_t>*, boost::shared_ptr<internal_disk_backed_queue_t>, auto_drainer_t::lock_t), boost::_bi::list4<boost::_bi::value<std::set<uuid_u, std::less<uuid_u>, std::allocator<uuid_u> > >, boost::_bi::value<btree_store_t<rdb_protocol_t>*>, boost::_bi::value<boost::shared_ptr<internal_disk_backed_queue_t> >, boost::_bi::value<auto_drainer_t::lock_t> > > >::run_action() at runtime_utils.hpp:58\r\n       9: callable_action_wrapper_t::run() at runtime_utils.cc:67\r\n       10: coro_t::run() at coroutines.cc:178\r\n```"
  , issueCommentId = 18021904
  }