Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2016 (-05) (-31) 14 : 30 : 08 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4150/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/4150"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "0052cc"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:ReQL_proposal"
          , labelName = "tp:ReQL_proposal"
          }
      ]
  , issueNumber = 4150
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "ReQL optimizer"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4150"
  , issueCreatedAt = 2015 (-04) (-30) 02 : 23 : 47 UTC
  , issueBody =
      Just
        "When I talk to users about optimization, I get a 50/50 split:\n- Half the people love explicit indexes. They like complete control of the execution and guarantees about asymptotic performance in production.\n- Half the people hate explicit indexes, because for certain workloads using them turns out to be really, really hard.\n\nFor example, many users store time-series data (say, a log of all customer purchases over time), and give analysts a UI where they can filter and sort on random fields. An analyst might say:\n- give me all the purchases where product type is shoes\n- purchased after 2014\n- sorted by price\n\nSince the queries are essentially generated dynamically (the analyst toggles things in a custom UI to get what they want), it's _very_ hard to write ReQL code that's executed efficiently. Even if you know the query ahead of time, it's hard to make it run efficiently. Should I use the product type index, the datetime index, or the price index? Which one performs better?\n\nThis is an extremely common use case.\n\nI think the philosophy of explicit index specification is sound, and I think a traditional approach of writing queries and having the database optimize them behind the scenes is (a) hard to implement and (b) bad for live, realtime systems. I'd like to propose an alternative that satisfies the following goals:\n- Allows us to maintain the philosophy of explicit index specification\n- Is reasonably simple to implement\n- Makes use cases like the one above dramatically easier to implement efficiently\n\n``` py\nr.begin_optimizer()\n .table('purchases')\n .get_all('shoes', index='product_type')\n .between(r.time(2014, 1, 1), r.maxval, index='purchase_date')\n .order_by(index='price')\n .end_optimizer()\n .whatever_you_want()\n```\n\nThe commands within the `begin/end_optimizer` block would have the restriction of an allowed whitelist of indexable commands (e.g. `get_all`, `between`, etc.) Non-indexable commands and transformations aren't allowed (e.g. no `map`, `filter`, etc.) The optimizer can reorder commands within the block, and pick the indexes it believes are most valuable (i.e. it can choose not to use a particular index within the block).\n\nIt could be implemented either in a traditional way (by collecting statistics), or in a more creative way (e.g. run multiple versions of the query in parallel, kill the queries once the fastest one returns, and cache the information for a while).\n\nThis gives the following advantages:\n- Fixes the most common use case where the optimizer is needed\n- Is much easier to implement than a traditional optimizer since it's more limited, doesn't require parsing the AST within `filter`, etc.\n- Allows us to maintain explicit indexing philosophy\n\n/cc @mlucy \n"
  , issueState = "open"
  , issueId = Id 72040403
  , issueComments = 46
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 268
          , milestoneNumber = 41
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone will be revisited after each major release during the planning stage for the major release after it. They will be moved to a specific release milestone if chosen for that release."
          , milestoneTitle = "subsequent"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/41"
          , milestoneCreatedAt = 2013 (-06) (-30) 07 : 32 : 52 UTC
          , milestoneState = "open"
          }
  }