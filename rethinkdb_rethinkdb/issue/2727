Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2016 (-04) (-29) 20 : 27 : 29 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/2727/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/2727"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "02d7e1"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/cp:reql"
          , labelName = "cp:reql"
          }
      , IssueLabel
          { labelColor = "0052cc"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:ReQL_proposal"
          , labelName = "tp:ReQL_proposal"
          }
      ]
  , issueNumber = 2727
  , issueAssignee =
      Just
        SimpleUser
          { simpleUserId = Id 1777134
          , simpleUserLogin = N "mlucy"
          , simpleUserAvatarUrl =
              "https://avatars.githubusercontent.com/u/1777134?v=3"
          , simpleUserUrl = "https://api.github.com/users/mlucy"
          , simpleUserType = OwnerUser
          }
  , issueUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Meteor feedback on changes"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/2727"
  , issueCreatedAt = 2014 (-07) (-20) 02 : 20 : 11 UTC
  , issueBody =
      Just
        "From @coffeemug :\r\n\r\nSome feedback on this command from the Meteor team:\r\n\r\n- `r.table('users').orderBy(r.desc('age')).limit(2).changes()` is really important to support and comes up in almost every app, including hello world. @mlucy tells me this is easy to do as long as we require an index in `orderBy`. There is a question of how to return data here (i.e. how do we indicate that an item has moved in the list, for example).\r\n- Atomically getting the current resultset + changes is very important.\r\n- Documenting guarantees is important. For example, if the object's value changes and then changes back to the original value, is the user guaranteed to see the change? We should document guarantees clearly.\r\n- It's important to clearly specify the relationship between when acks to writes occur and when changes are pushed onto a feed. It's also important to see the ack before the change on a given connection (or to be able to correlate them between different connections).\r\n- How do I easily and efficiently subscribe to changes of multiple objects or multiple different changes? What happens when I call `t.getAll(x, y, z).changes()`?\r\n\r\nWe don't have to solve all these problems right away, but I wanted to document this so we can make incremental improvements over time."
  , issueState = "open"
  , issueId = Id 38249313
  , issueComments = 2
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 882
          , milestoneNumber = 2
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone are not an immediate priority, and will be periodically revisited. When we decide to work on an issue in backlog, we'll move it to next."
          , milestoneTitle = "backlog"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/2"
          , milestoneCreatedAt = 2012 (-11) (-11) 14 : 16 : 11 UTC
          , milestoneState = "open"
          }
  }