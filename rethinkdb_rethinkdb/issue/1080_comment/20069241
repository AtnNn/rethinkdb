IssueComment
  { issueCommentUpdatedAt = 2013 (-06) (-26) 18 : 28 : 30 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/20069241"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1080#issuecomment-20069241"
  , issueCommentCreatedAt = 2013 (-06) (-26) 18 : 25 : 27 UTC
  , issueCommentBody =
      "Wait, which scheduler change are you talking about exactly?\r\n\r\nDo you mean the anticipatory delay I was talking about? Well, fact is that Linux has made good experience with this trick. We could probably do it in a smart way. However, allowing shards to merge their writebacks seems like the way more important improvement anyways.\r\nApart from that, I actually don't think that we should discuss my suggested improvements in too much detail before we haven't even figured out completely what's going wrong.\r\n\r\nI also disagree that single connection performance is the most important number. If we were tuning for those numbers at the expense of scalability, we would just shoot people in the back when they would start getting some load on their production systems later on.\r\nOf course single-client numbers shouldn't suck, but that's not what we are talking about here, are we?\r\n\r\n(Also, regarding batching: I think that batching is extremely difficult to use for updates. Even for inserts I personally don't think that you can use it in a lot of applications, can you?)"
  , issueCommentId = 20069241
  }