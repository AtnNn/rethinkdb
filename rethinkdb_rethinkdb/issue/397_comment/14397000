IssueComment
  { issueCommentUpdatedAt = 2013 (-03) (-04) 18 : 42 : 57 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/14397000"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/397#issuecomment-14397000"
  , issueCommentCreatedAt = 2013 (-03) (-04) 18 : 41 : 47 UTC
  , issueCommentBody =
      "I agree that dropping the matching `id` requirement in replace is somewhat controversial because it lets people accidentally write queries that may or may not do what they expect. However, I think there are good reasons to support this anyway:\r\n\r\n1. We allow people to make the same mistake with `del()`, and `update()`. Neither of these functions require a matching `id` field, which is inconsistent with `replace()`. We should strive make all four functions consistent.\r\n2. In my interactions with ReQL, I found using `del()` and `update()` really pleasant, while `replace()` is usually a pain because unlike the other two functions, it gives me what I perceive to be a superflous error instead of just doing what I need it to do.\r\n3. In general, I found that every time we implement a feature designed to protect users from themselves, we have to rescind later because it makes ReQL just plain annoying. Examples of this are the static type system, throwing on pluck and filter when the attribute is missing, explicitly converting arrays to streams (and soon probably explicitly converting streams to arrays), and a few others I can't think of now. Basically, parental controls should exist as warnings (assuming we can find a good warning system) or not at all.\r\n\r\nAs for the issue title, I stand ashamed."
  , issueCommentId = 14397000
  }