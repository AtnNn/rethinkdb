IssueComment
  { issueCommentUpdatedAt = 2014 (-08) (-28) 22 : 42 : 31 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/53815228"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2134#issuecomment-53815228"
  , issueCommentCreatedAt = 2014 (-08) (-28) 22 : 42 : 31 UTC
  , issueCommentBody =
      "I'm confused about which situations will cause the the key/value pairs to be annotated to say that a deletion entry should be left behind.\r\n\r\n> When it comes across an old{t0} key/value pair, it throws it at the secondary index in a separate write transaction. In that write transaction, if a new{t0} value or deletion entry is present, it is untouched, except to say that if the value is removed, a deletion entry should be left behind. \r\n\r\nWhy does the `old{t0}` make the `new{t0}` leave a deletion entry behind?  Also, why wouldn't the `new{t0}` already be annotated to say it should leave a deletion entry behind?"
  , issueCommentId = 53815228
  }