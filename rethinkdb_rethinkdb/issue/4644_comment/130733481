IssueComment
  { issueCommentUpdatedAt = 2015 (-08) (-13) 15 : 41 : 53 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 203771
        , simpleUserLogin = N "fantasticsid"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/203771?v=3"
        , simpleUserUrl = "https://api.github.com/users/fantasticsid"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/130733481"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/pull/4644#issuecomment-130733481"
  , issueCommentCreatedAt = 2015 (-08) (-13) 15 : 41 : 53 UTC
  , issueCommentBody =
      "I changed the generic message, it's clearer to me (less surprising compared to original message).\r\n\r\nI wrote a script to test out the error message:\r\n\r\n~~~ruby\r\nrequire 'rethinkdb'\r\ninclude RethinkDB::Shortcuts\r\n\r\nr.connect(:host=>\"localhost\", :port=>28015).repl\r\n\r\ndef run_expr(expr)\r\n  begin\r\n    result = expr.run\r\n    puts \"#{expr.pp} => \\n got result: #{result}\"\r\n  rescue RethinkDB::RqlRuntimeError => e\r\n    puts \"#{expr.pp} => \\n got exception: #{e}\"\r\n  end\r\nend\r\n\r\n\r\nrun_expr(r.expr([1,2,3,4,5]).reduce{|a| a})\r\nrun_expr(r.expr([1,2,3,4,5]).reduce{|a, b| a + b})\r\n\r\nrun_expr(r.expr([1,2,3,4,5]).max{|x| x + 1})\r\nrun_expr(r.expr([1,2,3,4,5]).max{|x, y| x + y})\r\n\r\nrun_expr(r.expr([1,2,3,4,5]).min{|x| x + 1})\r\nrun_expr(r.expr([1,2,3,4,5]).min{|x, y| x + y})\r\n\r\nrun_expr(r.expr([1,2,3,4,5]).avg{|x| x + 1})\r\nrun_expr(r.expr([1,2,3,4,5]).avg{|x, y| x + y})\r\n\r\nrun_expr(r.expr([1,2,3,4,5]).filter{|x| x > 3})\r\nrun_expr(r.expr([1,2,3,4,5]).filter{|x, y| x > 3})\r\n\r\nrun_expr(r.expr([1,2,3,4,5]).map{|x| x * x})\r\nrun_expr(r.expr([1,2,3,4,5]).map{|x, y| x + y})\r\n\r\nrun_expr(r.expr([1,2,3,4,5]).concat_map{|x| [x, x + 1]})\r\nrun_expr(r.expr([1,2,3,4,5]).concat_map{|x, y| [x, y]})\r\n\r\nrun_expr(r.expr([1,2,3,4,5]).group{|x| x % 2})\r\nrun_expr(r.expr([1,2,3,4,5]).group{|x, y| x + 1})\r\n\r\nrun_expr(r.do(1, 2, lambda{|a,b| a+b}))\r\nrun_expr(r.do(1, 2, lambda{|a,b,c| a+b}))\r\n~~~\r\n\r\nThis produces this output:\r\n\r\n~~~\r\nr([1, 2, 3, 4, 5]).reduce {|var_1| var_1} =>\r\n got exception: Expected function with 2 arguments but found function with 1 argument.\r\nBacktrace:\r\nr([1, 2, 3, 4, 5]).reduce {|var_1| var_1}\r\nr([1, 2, 3, 4, 5]).reduce {|var_2, var_3| var_2.add(var_3)} =>\r\n got result: 15\r\nr([1, 2, 3, 4, 5]).max {|var_4| var_4.add(1)} =>\r\n got result: 5\r\nr([1, 2, 3, 4, 5]).max {|var_5, var_6| var_5.add(var_6)} =>\r\n got exception: Expected function with 1 argument but found function with 2 arguments.\r\nBacktrace:\r\nr([1, 2, 3, 4, 5]).max {|var_5, var_6| var_5.add(var_6)}\r\nr([1, 2, 3, 4, 5]).min {|var_7| var_7.add(1)} =>\r\n got result: 1\r\nr([1, 2, 3, 4, 5]).min {|var_8, var_9| var_8.add(var_9)} =>\r\n got exception: Expected function with 1 argument but found function with 2 arguments.\r\nBacktrace:\r\nr([1, 2, 3, 4, 5]).min {|var_8, var_9| var_8.add(var_9)}\r\nr([1, 2, 3, 4, 5]).avg {|var_10| var_10.add(1)} =>\r\n got result: 4\r\nr([1, 2, 3, 4, 5]).avg {|var_11, var_12| var_11.add(var_12)} =>\r\n got exception: Expected function with 1 argument but found function with 2 arguments.\r\nBacktrace:\r\nr([1, 2, 3, 4, 5]).avg {|var_11, var_12| var_11.add(var_12)}\r\nr([1, 2, 3, 4, 5]).filter {|var_13| var_13.gt(3)} =>\r\n got result: [4, 5]\r\nr([1, 2, 3, 4, 5]).filter {|var_14, var_15| var_14.gt(3)} =>\r\n got exception: Expected function with 1 argument but found function with 2 arguments.\r\nBacktrace:\r\nr([1, 2, 3, 4, 5]).filter {|var_14, var_15| var_14.gt(3)}\r\nr([1, 2, 3, 4, 5]).map {|var_16| var_16.mul(var_16)} =>\r\n got result: [1, 4, 9, 16, 25]\r\nr([1, 2, 3, 4, 5]).map {|var_17, var_18| var_17.add(var_18)} =>\r\n got exception: The function passed to `map` expects 2 arguments, but 1 sequence was found.\r\nBacktrace:\r\nr([1, 2, 3, 4, 5]).map {|var_17, var_18| var_17.add(var_18)}\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nr([1, 2, 3, 4, 5]).concat_map {|var_19| [var_19, var_19.add(1)]} =>\r\n got result: [1, 2, 2, 3, 3, 4, 4, 5, 5, 6]\r\nr([1, 2, 3, 4, 5]).concat_map {|var_20, var_21| [var_20, var_21]} =>\r\n got exception: Expected function with 1 argument but found function with 2 arguments.\r\nBacktrace:\r\nr([1, 2, 3, 4, 5]).concat_map {|var_20, var_21| [var_20, var_21]}\r\nr([1, 2, 3, 4, 5]).group {|var_22| var_22.mod(2)} =>\r\n got result: {0=>[2, 4], 1=>[1, 3, 5]}\r\nr([1, 2, 3, 4, 5]).group {|var_23, var_24| var_23.add(1)} =>\r\n got exception: Expected function with 1 argument but found function with 2 arguments.\r\nBacktrace:\r\nr([1, 2, 3, 4, 5]).group {|var_23, var_24| var_23.add(1)}\r\nr.do(1, 2) {|var_25, var_26| var_25.add(var_26)} =>\r\n got result: 3\r\nr.do(1, 2) {|var_27, var_28, var_29| var_27.add(var_28)} =>\r\n got exception: Expected function with 2 arguments but found function with 3 arguments.\r\nBacktrace:\r\nr.do(1, 2) {|var_27, var_28, var_29| var_27.add(var_28)}\r\n~~~\r\n"
  , issueCommentId = 130733481
  }