Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2016 (-04) (-29) 23 : 40 : 11 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5495/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/5495"
  , issueClosedBy = Nothing
  , issueLabels = []
  , issueNumber = 5495
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 1747361
        , simpleUserLogin = N "Eliakos"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1747361?v=3"
        , simpleUserUrl = "https://api.github.com/users/Eliakos"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Visual Flow-based Programming"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5495"
  , issueCreatedAt = 2016 (-03) (-09) 03 : 02 : 19 UTC
  , issueBody =
      Just
        "Hello,\r\n\r\nIt's a suggestion about allowing easier creation and maintenance of powerful backend logic.\r\n\r\nI won't paraphrase articles about visual programming definition and added values (wikipedia [here](https://en.wikipedia.org/wiki/Visual_programming_language)) and Flow-based programming (wikipedia [here](https://en.wikipedia.org/wiki/Flow-based_programming))\r\n\r\nbut i will paraphrase niallobrien about queue and microservices ([Link Here](https://forums.meteor.com/t/rethinkdb-graphql-advances-in-realtime-technology/13134/1) ) :\"If you're then wondering how you'd implement custom backend logic, I'm sure RethinkDB have a plan for this (not entirely sure what just yet) but worst case scenario would be to do it exactly like Firebase, and that is to implement a fault tolerant job queue. You'd then push jobs onto individual queues and you could have microservices listening to particular queues for work to process. The job queue would ensure that a job is only processed once etc. Once processed, the job queue would pop the task off the queue (and write a success message to another endpoint the client is listening to) or set its status to complete, thus informing the client to update etc.\"\r\n\r\nI would well see visual flow-based programming adapted for the orchestration of the queues and microservices with a simple tool such as [node-red](http://nodered.org/) or [noflo ](http://noflojs.org/documentation/).\r\n\r\nNote: for those who want to have a look on an exhautive list of screenshots (with references) of different visual programming languages, follow the [link ](http://blog.interfacevision.com/design/design-visual-progarmming-languages-snapshots/)"
  , issueState = "open"
  , issueId = Id 139462033
  , issueComments = 3
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 883
          , milestoneNumber = 2
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone are not an immediate priority, and will be periodically revisited. When we decide to work on an issue in backlog, we'll move it to next."
          , milestoneTitle = "backlog"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/2"
          , milestoneCreatedAt = 2012 (-11) (-11) 14 : 16 : 11 UTC
          , milestoneState = "open"
          }
  }