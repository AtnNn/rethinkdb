IssueComment
  { issueCommentUpdatedAt = 2016 (-09) (-19) 04 : 50 : 35 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 478118
        , simpleUserLogin = N "bchavez"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/478118?v=3"
        , simpleUserUrl = "https://api.github.com/users/bchavez"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/247909985"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/6112#issuecomment-247909985"
  , issueCommentCreatedAt = 2016 (-09) (-19) 04 : 33 : 15 UTC
  , issueCommentBody =
      "Hi @jlove-nz,\r\n\r\nYou have an interesting problem. I have not been able to reproduce your issue. Could you elaborate:\r\n* What version of **Java runtime** are you using?\r\n* What version of the RethinkDB **Java Client Driver** are you using?\r\n* Can you double check your `CLASSPATH` and ensure there are no duplicate **Java Driver** libs anywhere?\r\n* What **Operating System** are you using to run the RethinkDB **Java Client** driver?\r\n* What **Operating System** are you using to run **RethinkDB Server**?\r\n\r\n---\r\n:package: :dizzy: WOMB (works on my box). My application terminates immedately with an exception over a broken socket.\r\n```\r\nDocument count is 3\r\n15:34:40.749 [main] DEBUG com.rethinkdb.ast.Query - JSON Send: Token: 8 [1,[56,[[15,[[14,[\"test\"]],\"bucket\"]],[3,[],{\"counter\":0}]]]]\r\n15:34:40.751 [pool-3-thread-1] DEBUG com.rethinkdb.ast.Query - JSON Recv: Token: 8 {\"t\":1,\"r\":[{\"deleted\":0,\"errors\":0,\"generated_keys\":[\"0c165bf4-6464-4450-b788-6cc544fe0667\"],\"inserted\":1,\"replaced\":0,\"skipped\":0,\"unchanged\":0}]}\r\n15:34:42.751 [main] DEBUG com.rethinkdb.ast.Query - JSON Send: Token: 9 [1,[43,[[15,[[14,[\"test\"]],\"bucket\"]]]]]\r\n15:34:42.753 [pool-3-thread-1] DEBUG com.rethinkdb.ast.Query - JSON Recv: Token: 9 {\"t\":1,\"r\":[4]}\r\nDocument count is 4\r\n\r\ncom.rethinkdb.gen.exc.ReqlDriverError: Can't write query because response pump is not running.\r\n```\r\n-----\r\n\r\nSo, after looking at your `jstack`, the call stack for the `main` thread makes sense: `Thread.State: WAITING (parking)` waiting for `.get()` which is the core reason why your application appears to hang. There are two scenarios that should have played out to avoid getting hung up in `.get()`. **1)** The [`Future<Response>/awaiter`](https://github.com/rethinkdb/rethinkdb/blob/next/drivers/java/src/main/java/com/rethinkdb/net/Connection.java#L165) should have already been signaled by  `pool-1-thread-1` (response pump) when [`close()`ing down](https://github.com/rethinkdb/rethinkdb/blob/next/drivers/java/src/main/java/com/rethinkdb/net/Connection.java#L124) the network connection on a network read error or **2)** the `main` thread should have thrown if the query [`write` failed](https://github.com/rethinkdb/rethinkdb/blob/next/drivers/java/src/main/java/com/rethinkdb/net/Connection.java#L210) on the network socket.\r\n\r\nBut neither seem to be the case in your situation.\r\n\r\nI'm not totally sure what `pool-1-thread-1` (response pump) thread is doing. The `pool-1-thread-1` (response pump) thread is also in a state of `Thread.State: WAITING (parking)`; however there is no sign of any calls into the driver.  I do not know if **a)** `pool-1-thread-1`'s thread state of `WAITING (parking)` is a normal state for a completed thread returning back to the thread pool (waiting for more work) or if **b)** `pool-1-thread-1` thread is blocking on some native IO socket read function.\r\n\r\nI'm hoping (and leaning toward) the former **a)**. If it's **a)** then I kinda see a *very*, **very**, ***very***, obscure way you could land in a situation like this.\r\n\r\nSo, assuming **a)**, I suppose the `main` thread passes the [check here](https://github.com/rethinkdb/rethinkdb/blob/next/drivers/java/src/main/java/com/rethinkdb/net/Connection.java#L204-L205) while the connection is shutting down. Then the scheduler suspends `main` thread on [**Line 205**](https://github.com/rethinkdb/rethinkdb/blob/next/drivers/java/src/main/java/com/rethinkdb/net/Connection.java#L205). Once `main` thread is suspended, `pool-1-thread-1` (response pump) thread moves in to signal the awaiters in [L165](https://github.com/rethinkdb/rethinkdb/blob/next/drivers/java/src/main/java/com/rethinkdb/net/Connection.java#L165), but `main` thread's awaiter [**has not been added yet**](https://github.com/rethinkdb/rethinkdb/blob/next/drivers/java/src/main/java/com/rethinkdb/net/Connection.java#L206); so `main` thread would miss the [`completeExceptionally` signal](https://github.com/rethinkdb/rethinkdb/blob/next/drivers/java/src/main/java/com/rethinkdb/net/Connection.java#L168) that the response pump is currently sending. The  `pool-1-thread-1` (response pump) thread finishes clean up; and `main` is allowed to resume. Except, this time, it `.put`s the awaiter in the concurrent map, and then attempts to [`write` to a broken network socket](https://github.com/rethinkdb/rethinkdb/blob/next/drivers/java/src/main/java/com/rethinkdb/net/Connection.java#L210) and [***the `write` magically (or silently) succeeds***](https://github.com/rethinkdb/rethinkdb/blob/next/drivers/java/src/main/java/com/rethinkdb/net/SocketWrapper.java#L95-L102) without throwing an exception. I think that's the only way you can get around by calling [Line 211](https://github.com/rethinkdb/rethinkdb/blob/next/drivers/java/src/main/java/com/rethinkdb/net/Connection.java#L211) to return an awaiter that will never complete.\r\n\r\n--------\r\n\r\nSince I can't reproduce the error, here's what you could do...\r\n\r\n1. Checkout the rethinkdb source.\r\n2. Build the Java driver.\r\n3. Write a test with an exact copy/paste of your program in [RethinkDBTest.java](https://github.com/rethinkdb/rethinkdb/blob/next/drivers/java/src/test/java/com/rethinkdb/RethinkDBTest.java#L414)\r\n4. Go crazy and add logging statements throughout [this section of code](https://github.com/rethinkdb/rethinkdb/blob/next/drivers/java/src/main/java/com/rethinkdb/net/Connection.java#L105-L128) and in this section of the [`close()`](https://github.com/rethinkdb/rethinkdb/blob/next/drivers/java/src/main/java/com/rethinkdb/net/Connection.java#L165-L172) method.\r\n5. I'd add a bunch of logging [statements here too](https://github.com/rethinkdb/rethinkdb/blob/next/drivers/java/src/main/java/com/rethinkdb/net/Connection.java#L204-L215).\r\n\r\nor...\r\n\r\n1. Load up a debugger and step through everything keeping an eye on both threads.\r\n\r\nThen you should be getting a clearer idea of what's happening and if that [`SocketWrapper.write()`](https://github.com/rethinkdb/rethinkdb/blob/next/drivers/java/src/main/java/com/rethinkdb/net/SocketWrapper.java#L95-L102) is succeeding when it should not be over a broken socket.\r\n\r\nWith that, I'm out of ideas.\r\n\r\n :shell: :leopard: [**SHELLS - Jagwar**](https://www.youtube.com/watch?v=WVfjotINxsk)"
  , issueCommentId = 247909985
  }