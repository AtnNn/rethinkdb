IssueComment
  { issueCommentUpdatedAt = 2013 (-05) (-23) 07 : 42 : 46 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/18327635"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/885#issuecomment-18327635"
  , issueCommentCreatedAt = 2013 (-05) (-23) 07 : 31 : 03 UTC
  , issueCommentBody =
      "I think `tbl.has_fields()` is perfectly clear -- it returns all the rows that have a set of fields. (It is a bit confusing early on, but hey, humans learn, that's ok).\r\n\r\n~~I feel strongly about having an `including_nulls` flag~~ (though the name we should debate) and using this flag across all relevant commands (such as `has_fields`, `with_fields`, and `default`).\r\n\r\nI feel extremely strongly that by default we should treat `null` as non-existence in these commands. We can debate things in the abstract, but in literally 100% of the cases I've encountered with MG, myself, Alex, and many many users on IRC I've helped, people naturally expected `null` to be treated as non-existence, because that's what you want every single time (and this is no exaggeration). I think that if we removed the `including_nulls` flag all-together from these commands and treated `null` as non-existence, nobody would miss the absence of this flag because it would almost never come up.\r\n\r\nEDIT:  `obj.keys.contains(...)` to get the same behavior as `obj.has_fields(..., :including_nulls => true)` is clearly better to me."
  , issueCommentId = 18327635
  }