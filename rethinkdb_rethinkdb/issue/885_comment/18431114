IssueComment
  { issueCommentUpdatedAt = 2013 (-05) (-24) 21 : 30 : 30 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/18431114"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/885#issuecomment-18431114"
  , issueCommentCreatedAt = 2013 (-05) (-24) 21 : 30 : 30 UTC
  , issueCommentBody =
      "It seems like there's broad general agreement on the API here.  I plan to implement the following, polymorphic on streams with respect to filter:\r\n```ruby\r\n> r({:a => 1, :b => NULL}).has_fields(:a)\r\ntrue\r\n> r({:a => 1, :b => NULL}).keys.contains(:a)\r\ntrue\r\n> r({:a => 1, :b => NULL}).has_fields(:b)\r\nfalse\r\n> r({:a => 1, :b => NULL}).keys.contains(:b)\r\ntrue\r\n> r({:a => 1, :b => NULL}).has_fields(:c)\r\nfalse\r\n> r({:a => 1, :b => NULL}).keys.contains(:c)\r\nfalse\r\n```"
  , issueCommentId = 18431114
  }