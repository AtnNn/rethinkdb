IssueComment
  { issueCommentUpdatedAt = 2015 (-02) (-26) 03 : 39 : 06 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/76117056"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3831#issuecomment-76117056"
  , issueCommentCreatedAt = 2015 (-02) (-26) 03 : 39 : 06 UTC
  , issueCommentBody =
      "Thank you for the proposal @elifarley !\r\nI can definitely see this being useful.\r\n\r\nOne note about your current query\r\n```js\r\nmap(r.row('id')).reduce(function(a,b){\r\n  return a.coerceTo('string').add(':').add(b.coerceTo('string'));\r\n})\r\n```\r\nThis isn't actually correct, since `reduce` makes no guarantees about the order in which it is applied. So you could end up with any permutation of the strings.\r\n\r\nYou would need something like the `scan` term proposed here https://github.com/rethinkdb/rethinkdb/issues/3736 to make this work correctly.\r\nIn practice if you apply your query to an array rather than a stream (put a `coerceTo('ARRAY')` between the `map` and the `reduce`) it should work fine. But I don't think we're actually guaranteeing this either."
  , issueCommentId = 76117056
  }