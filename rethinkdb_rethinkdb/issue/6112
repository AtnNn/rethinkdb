Issue
  { issueClosedAt = Just 2016 (-09) (-24) 18 : 19 : 36 UTC
  , issueUpdatedAt = 2016 (-09) (-24) 18 : 19 : 36 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/6112/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/6112"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "fef2c0"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/Java"
          , labelName = "Java"
          }
      ]
  , issueNumber = 6112
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 16073282
        , simpleUserLogin = N "jlove-nz"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/16073282?v=3"
        , simpleUserUrl = "https://api.github.com/users/jlove-nz"
        , simpleUserType = OwnerUser
        }
  , issueTitle =
      "RethinkDB's Java driver blocks forever if the RethinkDB database connection dies."
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/6112"
  , issueCreatedAt = 2016 (-09) (-15) 21 : 07 : 17 UTC
  , issueBody =
      Just
        "RethinkDB's Java driver blocks forever (or at least that is the symptom) if the RethinkDB database connection dies - e.g. because the database is shut down, or because an intermediate firewall or load balancer (e.g. AWS's load balancer) kills the TCP connection.\n\nIf I run the following code with a local rethink DB database, then shut the rethinkDB database down, the application will block indefinitely when it runs the next rethinkDB command (either insert or query).\n\n```\npackage rethink_connectivity_test;\n\nimport com.rethinkdb.RethinkDB;\nimport com.rethinkdb.net.Connection;\n\npublic class ConnectivityTest {\n\n    public static void main(String [] args) throws Exception {\n\n        RethinkDB r = RethinkDB.r;\n        Connection c = r.connection()\n                .hostname(\"localhost\")\n                .port(28015)\n                .connect();\n        r.db(\"test\").tableCreate(\"bucket\").run(c);\n\n        int counter = 0;\n        while(true) { \n            r.db(\"test\").table(\"bucket\").insert(r.hashMap(\"counter\", counter)).run(c);\n            long total = r.db(\"test\").table(\"bucket\").count().run(c);\n\n            System.out.println(\"Document count is \" + total);\n\n            Thread.sleep(1000);\n        }\n    }\n}\n```\n\nI would anticipate that the application code could in some way be informed and handle this scenario.\n"
  , issueState = "closed"
  , issueId = Id 177290236
  , issueComments = 6
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 706854
                , simpleUserLogin = N "AtnNn"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/706854?v=3"
                , simpleUserUrl = "https://api.github.com/users/AtnNn"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 0
          , milestoneNumber = 64
          , milestoneClosedIssues = 228
          , milestoneDescription =
              Just
                "These issues are no longer relevant to the current version of RethinkDB"
          , milestoneTitle = "outdated"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/64"
          , milestoneCreatedAt = 2014 (-03) (-28) 00 : 17 : 40 UTC
          , milestoneState = "closed"
          }
  }