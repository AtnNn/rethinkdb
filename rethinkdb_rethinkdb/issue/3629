Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2015 (-10) (-29) 17 : 59 : 15 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/3629/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/3629"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "007575"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:API_settled"
          , labelName = "tp:API_settled"
          }
      , IssueLabel
          { labelColor = "0052cc"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:ReQL_proposal"
          , labelName = "tp:ReQL_proposal"
          }
      ]
  , issueNumber = 3629
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 1366
        , simpleUserLogin = N "deontologician"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1366?v=3"
        , simpleUserUrl = "https://api.github.com/users/deontologician"
        , simpleUserType = OwnerUser
        }
  , issueTitle =
      "Consider an `identifierFormat: \"both\"` option for reql_admin tables"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/3629"
  , issueCreatedAt = 2015 (-01) (-21) 03 : 55 : 03 UTC
  , issueBody =
      Just
        "Currently, this is the query I use to get both ids and names for the issues table\n\n``` javascript\nr.db(\"rethinkdb\").table(\"current_issues\").merge(function(var_2) {\n  return {\n    info: r.branch(var_2(\"type\").eq(\"server_disconnected\"), {\n      disconnected_server_id: r.db(\"rethinkdb\").table(\"current_issues\", {\n        identifierFormat: \"uuid\"\n      }).get(var_2(\"id\"))(\"info\")(\"disconnected_server\"),\n      reporting_servers: var_2(\"info\")(\"reporting_servers\").map(r.db(\"rethinkdb\").table(\"current_issues\", {\n        identifierFormat: \"uuid\"\n      }).get(var_2(\"id\"))(\"info\")(\"reporting_servers\"), function(var_3, var_4) {\n        return {\n          server: var_3,\n          server_id: var_4\n        };\n      })\n    }, r.branch(var_2(\"type\").eq(\"log_write_error\"), {\n      servers: var_2(\"info\")(\"servers\").map(r.db(\"rethinkdb\").table(\"current_issues\", {\n        identifierFormat: \"uuid\"\n      }).get(var_2(\"id\"))(\"info\")(\"servers\"), function(var_5, var_6) {\n        return {\n          server: var_5,\n          server_id: var_6\n        };\n      })\n    }, r.branch(var_2(\"type\").eq(\"outdated_index\"), {\n      tables: var_2(\"info\")(\"tables\").map(r.db(\"rethinkdb\").table(\"current_issues\", {\n        identifierFormat: \"uuid\"\n      }).get(var_2(\"id\"))(\"info\")(\"tables\"), function(var_7, var_8) {\n        return {\n          db_id: var_8(\"db\"),\n          table_id: var_8(\"table\")\n        };\n      })\n    }, r.branch(var_2(\"type\").eq(\"table_needs_primary\"), {\n      table_id: r.db(\"rethinkdb\").table(\"current_issues\", {\n        identifierFormat: \"uuid\"\n      }).get(var_2(\"id\"))(\"info\")(\"table\"),\n      db_id: r.db(\"rethinkdb\").table(\"current_issues\", {\n        identifierFormat: \"uuid\"\n      }).get(var_2(\"id\"))(\"info\")(\"db\")\n    }, r.branch(var_2(\"type\").eq(\"data_lost\"), {\n      table_id: r.db(\"rethinkdb\").table(\"current_issues\", {\n        identifierFormat: \"uuid\"\n      }).get(var_2(\"id\"))(\"info\")(\"table\"),\n      db_id: r.db(\"rethinkdb\").table(\"current_issues\", {\n        identifierFormat: \"uuid\"\n      }).get(var_2(\"id\"))(\"info\")(\"db\")\n    }, r.branch(var_2(\"type\").eq(\"write_acks\"), {\n      table_id: r.db(\"rethinkdb\").table(\"current_issues\", {\n        identifierFormat: \"uuid\"\n      }).get(var_2(\"id\"))(\"info\")(\"table\"),\n      db_id: r.db(\"rethinkdb\").table(\"current_issues\", {\n        identifierFormat: \"uuid\"\n      }).get(var_2(\"id\"))(\"info\")(\"db\")\n    }, r.branch(var_2(\"type\").eq(var_2(\"type\")), var_2(\"info\"), r.error(\"nothing matched var_2(\"\n      type \")\"))))))))\n  };\n}).coerceTo(\"array\")\n```\n\nNow, granted, I wrote it like this:\n\n``` coffeescript\n            issues_id = r.db(system_db).table(\n                'current_issues', identifierFormat: 'uuid')\n            issues_query = r.db(system_db).table('current_issues')\n                .merge((issue) ->\n                    issue_id = issues_id.get(issue('id'))\n                    server_disconnected =\n                        disconnected_server_id:\n                            issue_id('info')('disconnected_server')\n                        reporting_servers:\n                            issue('info')('reporting_servers')\n                                .map(issue_id('info')('reporting_servers'),\n                                    (server, server_id) ->\n                                        server: server,\n                                        server_id: server_id\n                                    )\n                    log_write_error =\n                        servers: issue('info')('servers').map(\n                            issue_id('info')('servers'),\n                            (server, server_id) ->\n                                server: server\n                                server_id: server_id\n                        )\n                    outdated_index =\n                        tables: issue('info')('tables').map(\n                            issue_id('info')('tables'),\n                            (table, table_id) ->\n                                db_id: table_id('db')\n                                table_id: table_id('table')\n                        )\n                    invalid_config =\n                        table_id: issue_id('info')('table')\n                        db_id: issue_id('info')('db')\n                    # this is a reql macro I wrote to nest branches...\n                    info: driver.helpers.match(issue('type'),\n                        ['server_disconnected', server_disconnected],\n                        ['log_write_error', log_write_error],\n                        ['outdated_index', outdated_index],\n                        ['table_needs_primary', invalid_config],\n                        ['data_lost', invalid_config],\n                        ['write_acks', invalid_config],\n                        [issue('type'), issue('info')], # default\n                    )\n                ).coerceTo('array')\n```\n\nBut, honestly, it seems like a bit much. I realize that being able to write an invalid config to an id/name at the same time is a problem for the writable tables in reql_admin, but the issues table isn't writeable and so maybe `identifierFormat: \"both\"` would be ok.\n"
  , issueState = "open"
  , issueId = Id 54974723
  , issueComments = 9
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 268
          , milestoneNumber = 41
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone will be revisited after each major release during the planning stage for the major release after it. They will be moved to a specific release milestone if chosen for that release."
          , milestoneTitle = "subsequent"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/41"
          , milestoneCreatedAt = 2013 (-06) (-30) 07 : 32 : 52 UTC
          , milestoneState = "open"
          }
  }