IssueComment
  { issueCommentUpdatedAt = 2013 (-10) (-30) 19 : 27 : 17 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/27430664"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1010#issuecomment-27430664"
  , issueCommentCreatedAt = 2013 (-10) (-30) 19 : 27 : 17 UTC
  , issueCommentBody =
      "I really think that we will have to decide backwards-compatiblity on a case by case basis.\r\n\r\nFor example the code for the LBA change could easily have been backwards-compatible. Literally one single if would have been enough in that code to make it able to read older databases. The reason it is not backwards-compatible is mostly because a) this was not a priority at this time and b) we have some other places which check the versions of the database files and currently can only handle a single valid version string, rejecting all others.\r\n\r\nIf this change had been post-LTS, I'm sure we would have made it backwards compatible. The new version would have been able to read db files from the previous release. As soon as it would have written to the DB once, older versions of RethinkDB would not have been able to access them anymore.\r\n\r\nFor other changes however it is extremely difficult to maintain that kind of compatibility, as @coffeemug pointed out.\r\nSo what this means is that while we can not easily give guarantees such as \"data migration is never necessary when switching from one LTS release to another\", we might still be able to provide a pretty high level of backwards-compatibility in practice."
  , issueCommentId = 27430664
  }