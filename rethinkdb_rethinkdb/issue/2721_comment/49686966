IssueComment
  { issueCommentUpdatedAt = 2014 (-07) (-22) 01 : 14 : 06 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1777134
        , simpleUserLogin = N "mlucy"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1777134?v=3"
        , simpleUserUrl = "https://api.github.com/users/mlucy"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/49686966"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/2721#issuecomment-49686966"
  , issueCommentCreatedAt = 2014 (-07) (-22) 01 : 14 : 06 UTC
  , issueCommentBody =
      "> At this point I've seen dozens of examples of user code where they're forced to coerce to an array, and in every single case the user was doing something sensible (meaning, they were storing a resultset that was guaranteed to be small in an array). I haven't seen a single example where the user is doing something unreasonable (like coercing a potentially large table to an array).\r\n\r\nThat argument seems wrong to me.  Your observation is that when you see code where people turn streams into arrays, they're usually doing so for a good reason.  One interpretation of that is \"99% of the time streams can be safely turned into arrays\", but another interpretation is \"the current system is successfully preventing people from turning streams into arrays unless they have a good reason\".\r\n\r\nThe availability heuristic doesn't work very well for determining whether or not you're successfully preventing something bad from happening.\r\n"
  , issueCommentId = 49686966
  }