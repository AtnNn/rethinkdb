IssueComment
  { issueCommentUpdatedAt = 2014 (-10) (-21) 23 : 05 : 27 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 17789
        , simpleUserLogin = N "gchpaco"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/17789?v=3"
        , simpleUserUrl = "https://api.github.com/users/gchpaco"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/60013243"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3208#issuecomment-60013243"
  , issueCommentCreatedAt = 2014 (-10) (-21) 23 : 05 : 27 UTC
  , issueCommentBody =
      "@srh: that's not a version of `boost::shared_ptr` without atomic operations\8212`boost::shared_ptr` and `std::shared_ptr` support weak pointers (which `counted_t` doesn't), deleters (which `counted_t` doesn't in next and will after this), and this `owner_before` stuff for putting it in `std::map`s (perhaps of debatable utility, but lacking in counted_t).  I want to get us out of the business of maintaining our own half-implemented smart pointer, because it's very subtle and tricky.\r\n\r\nAs far as atomicity goes, it should bes sufficient to override these functions http://en.cppreference.com/w/cpp/memory/shared_ptr/atomic to get nonatomic compares working with the standard pointer.  I will have to dig rather some more to determine if that is possible with boost's shared_ptr."
  , issueCommentId = 60013243
  }