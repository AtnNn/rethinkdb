IssueComment
  { issueCommentUpdatedAt = 2014 (-10) (-21) 23 : 40 : 20 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 316661
        , simpleUserLogin = N "timmaxw"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/316661?v=3"
        , simpleUserUrl = "https://api.github.com/users/timmaxw"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/60016509"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/3208#issuecomment-60016509"
  , issueCommentCreatedAt = 2014 (-10) (-21) 23 : 40 : 00 UTC
  , issueCommentBody =
      "I'm imagining something like this: The `data_buffer_t` has a member of type `std::weak_ptr<my_allocation_tracker_t>`. The constructor initializes the `weak_ptr` and calls `weak_ptr->credit(sizeof(data_buffer_t))`. The destructor calls `weak_ptr->debit(sizeof(data_buffer_t))`. So `counted_t` is never directly involved, but the memory overhead for the `data_buffer_t` still gets tracked. Obviously this is kind of ugly because we have to do it manually for every type that we want to store in a `counted_t` and track allocations for, but I think it would be practical. For types that are not stored in `counted_t` we can use `std`-compliant allocators.\r\n\r\nEdit: I'm not saying this is the best idea, just that it is possible."
  , issueCommentId = 60016509
  }