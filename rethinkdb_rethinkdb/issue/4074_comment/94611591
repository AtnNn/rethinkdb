IssueComment
  { issueCommentUpdatedAt = 2015 (-04) (-21) 02 : 04 : 51 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1461947
        , simpleUserLogin = N "neumino"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1461947?v=3"
        , simpleUserUrl = "https://api.github.com/users/neumino"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/94611591"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/4074#issuecomment-94611591"
  , issueCommentCreatedAt = 2015 (-04) (-21) 02 : 04 : 51 UTC
  , issueCommentBody =
      "I got the pull request https://github.com/neumino/rethinkdbdash/pull/69#issuecomment-94568676, which is similar than https://github.com/rethinkdb/rethinkdb/pull/4080 and the two others.\r\n\r\nIt feels wrong to me to have the driver connect to something that is not a RethinkDB server for a few reasons:\r\n- If someone just look at the signature of `connect`, they will think that RethinkDB natively support SSL and they will hit an error when they will try to connect\r\n- The proxy is one more thing in the network chain that may fail and result in undefined behaviors. I've seen pretty weird thing when I was connecting to RethinkDB via a SSH tunnel (though it's not exactly the same as using the `tls` module).\r\n\r\n\r\nI haven't looked at the Python and Ruby pull request, but for the JS one, the proposed implementation uses `readFileSync`, which is pretty bad since it will block your whole node.js server the time to load the certificate. The current implementation also load the certificate for every connection making the connection not light anymore. I believe that's overall a pretty big hit in term of performance (though it's possible to fix it by caching the certificate).\r\n\r\nShouldn't the server support encryption before updating the driver?"
  , issueCommentId = 94611591
  }