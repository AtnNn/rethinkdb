Issue
  { issueClosedAt = Just 2014 (-10) (-31) 17 : 33 : 08 UTC
  , issueUpdatedAt = 2015 (-01) (-02) 21 : 16 : 50 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/2864/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/2864"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "207de5"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/cp:clustering"
          , labelName = "cp:clustering"
          }
      , IssueLabel
          { labelColor = "0052cc"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:ReQL_proposal"
          , labelName = "tp:ReQL_proposal"
          }
      ]
  , issueNumber = 2864
  , issueAssignee =
      Just
        SimpleUser
          { simpleUserId = Id 1366
          , simpleUserLogin = N "deontologician"
          , simpleUserAvatarUrl =
              "https://avatars.githubusercontent.com/u/1366?v=3"
          , simpleUserUrl = "https://api.github.com/users/deontologician"
          , simpleUserType = OwnerUser
          }
  , issueUser =
      SimpleUser
        { simpleUserId = Id 316661
        , simpleUserLogin = N "timmaxw"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/316661?v=3"
        , simpleUserUrl = "https://api.github.com/users/timmaxw"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Make issues accessible through ReQL admin API"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/2864"
  , issueCreatedAt = 2014 (-08) (-11) 21 : 42 : 55 UTC
  , issueBody =
      Just
        "We should give users a way to see a list of current issues through the ReQL admin API.\n\nHere's a proposal to get the ball rolling: Give the user a function `r.get_cluster_issues()`. It returns an array of documents in the following format:\n\n``` python\n{\n    \"description\": \"<human-readable description, including advice for resolving it>\",\n    \"type\": \"<short identifier>\",\n    ...  # additional type-specific fields\n}\n```\n\nThe `type` field and the additional type-specific fields should provide enough information to reconstruct the `description`. The idea is that if people want to resolve issues manually, they'll read the description; but if they want to write a tool to resolve issues, it will use the `type` field and the additional fields. We'll document what the possible values of the `type` field can be and what the corresponding fields are.\n\nFor example: Suppose that a server is inaccessible. Then `description` is `\"The server `foobar` is inaccessible. Here's how we suggest fixing it...\"`. `type` is `\"server_inaccessible\"`. There is a `server_name` field with value `\"foobar\"`, and a `server_uuid` field with `foobar`'s server UUID.\n"
  , issueState = "closed"
  , issueId = Id 40003935
  , issueComments = 29
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Just 2015 (-01) (-23) 08 : 00 : 00 UTC
          , milestoneOpenIssues = 0
          , milestoneNumber = 81
          , milestoneClosedIssues = 321
          , milestoneDescription = Just ""
          , milestoneTitle = "1.16"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/81"
          , milestoneCreatedAt = 2014 (-09) (-04) 04 : 49 : 30 UTC
          , milestoneState = "closed"
          }
  }