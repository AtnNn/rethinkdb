IssueComment
  { issueCommentUpdatedAt = 2013 (-06) (-17) 13 : 00 : 20 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 43867
        , simpleUserLogin = N "jdoliner"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/43867?v=3"
        , simpleUserUrl = "https://api.github.com/users/jdoliner"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/19543001"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/889#issuecomment-19543001"
  , issueCommentCreatedAt = 2013 (-06) (-17) 13 : 00 : 20 UTC
  , issueCommentBody =
      "> We'd have to do this here and that doesn't have a bad smell at all, since this is a special syntax we're defining in the context of static value sugar. This seems ok.\r\n\r\nFor some reason I thought @mlucy's original proposal specifically mentioned promiscuous truthiness but I was wrong about that so I suppose we're turning it off either way.\r\n\r\n> That's true for pluck, but unfortunately we can't use that so easily for things like without and groupBy. I think we need a well defined way to refer to inner attributes across commands or the language will always feel clunky in this respect.\r\n\r\nI completely agree we need a well defined way. Mentioning that for most of these the dict syntax wasn't a ton shorter than the other syntax wasn't to say we shouldn't have a very concise way to say this that works everywhere it makes sense.\r\n\r\n> It's a superset of underscore's pluck.\r\nTrue but that doesn't mean that when you find some example code online that says:\r\n\r\n```ruby\r\nobjs.pluck({:a => True, :b => {:c => true}, :d => obj[:d].lt(5)}\r\n```\r\nYou're not going to be confused about what exactly this function has to do with the `pluck` you're acquainted with.\r\n\r\n---\r\n\r\nThe crux of my argument is that if we allow people to shorten and unshorten the syntax freely then you get a situation where the best case is each person chooses their own consistent style and the process of reading a `pluck` that you come upon in example code gets pretty difficult. The worst case is people don't have a consistent style they just use the dict syntax until the line gets too long and then they lob off enough `True`s to get things under their line length. Either way I think we're making the language a lot worse by introducing a syntax that is going to be very widely used and has exponentially many ways of expressing the same idea. On the other hand having this syntax be unified and the same across all the different call sites would be a very powerful thing. I think I'd be okay with either syntax at this point I just really think it creates weakens it a lot to allow ad-hoc shortening."
  , issueCommentId = 19543001
  }