IssueComment
  { issueCommentUpdatedAt = 2013 (-06) (-17) 06 : 52 : 09 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 43867
        , simpleUserLogin = N "jdoliner"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/43867?v=3"
        , simpleUserUrl = "https://api.github.com/users/jdoliner"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/19528757"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/889#issuecomment-19528757"
  , issueCommentCreatedAt = 2013 (-06) (-17) 06 : 52 : 09 UTC
  , issueCommentBody =
      "Having thought about this a bit more I really dislike the idea of accepting both syntaxes in the same function as well as any combination of the syntaxes a user cares to come up with. The main argument in favor of the dict syntax seems to be that it's less confusing because the form of the argument matches the form of the document. I can grant that this is true but I think if you give people a full spectrum of syntaxes and let them have everything in between then things are going to wind up way more confusing than either syntax would be when used consistently. There's just so many ways to express the same thing that you'll really need to think about what's going on. In practice I imagine people would use the dict syntax until it gets too long for them and then shorten things and when they do so they'd probably do so in an inconsistent way. This is going to lead to very confusing code very quickly. There's also a fact we've glossed ever here which is that we've now gotten ourselves in to a big pickle with our promiscuous truthiness. Consider:\r\n\r\n```python\r\nobj.pluck({\"foo\" : {\"bar\" : True} })\r\n# is equivalent by shorthand rules to:\r\nobj.pluck({\"foo\" : \"bar\"})\r\n# is equivalent by promiscuous truthiness to:\r\nobj.pluck({\"foo\" : True})\r\n# is equivalent by shorthand rules to:\r\nobj.pluck(\"foo\")\r\n```\r\n\r\nYou see hopefully how this gets messy, we'd probably just have to turn off promiscuous truthiness here altogether which has a funny smell to me.\r\n\r\n---\r\n\r\nHere's one thing that's kind of strange to me. We already have a pretty good syntax that allows you to do exactly this and write your code in such a way that mirrors the output. You can use `map` (or `do`) like so:\r\n\r\n```ruby\r\nobjs.map{|x| \r\n{:a =>\r\n  {:b =>\r\n    {:c => x[:a][:b][:c],\r\n     :d => x[:a][:b][:c]},\r\n  {:e => x[:a][:e]},\r\n  {:f => x[:a][:f]}\r\n}\r\n```\r\n\r\nAnd while shortening that to:\r\n\r\n```ruby\r\nobjs.map{|x| \r\n{:a =>\r\n  {:b =>\r\n    {:c => true,\r\n     :d => true},\r\n  {:e => true},\r\n  {:f => true}\r\n}\r\n```\r\n\r\nis a step in the right direction is it really enough shorter to make it worthwhile? We all seem to be in agreement that it really doesn't get short enough to be useful until you start adding in the features of the other proposal which has the problems that I discussed above. I also agree with @mlucy that it's very strange to allow the shorthand syntax at the top level but not at lower levels. It also doesn't actually solve the problem very well. Consider the very reasonable case where a user wants to perform a `pluck` from a table of objects. The syntax works fine until they decide to use the table in a join. Now this same `pluck` won't work because the objects are buried a layer deeper in join object and they have to add verbosity to their original `pluck`. It's then time to starting writing `true` as fast as your fingers possibly can.\r\n\r\nA final thing that I really dislike about the dict based interface for `pluck` is that it really doesn't look that similar to underscore's pluck anymore and I really think there's a lot of value in having them work in analogous ways if we're going to name them the same thing.\r\n\r\n---\r\n\r\nHere's what I'd propose:\r\n\r\nImplement shorthand `pluck` and only shorthand `pluck` no dicts mapping to `true`. The whole point of `pluck` is that it's a very concise way to say something more verbose (that we do already have a decent way to say) and it doesn't seem as if any of us feel the dict proposal is concise enough to work without introducing most (if not all) of the shorthand proposal anyways. Letting people use both proposals and everything in between is just a recipe for confusion.\r\n\r\nIf people feel that the dict syntax is sufficiently useful. And I get the sense that some people do. Then we introduce that as a separate function called `mask` this would be pure dicts all the way down no sliding between different syntaxes so it would have a very consistent and understandable syntax. It also removes an expectation a user might have of understand its meaning because s/he understands underscore's `pluck`. My gut reaction on this is that this syntax isn't useful enough to include on its own (and I suspect @mlucy hates the idea of adding another function) but I've also been it's primary opponent for this entire thread so I never truly understood its worth."
  , issueCommentId = 19528757
  }