IssueComment
  { issueCommentUpdatedAt = 2014 (-01) (-14) 18 : 37 : 52 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/32293035"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1863#issuecomment-32293035"
  , issueCommentCreatedAt = 2014 (-01) (-14) 18 : 37 : 38 UTC
  , issueCommentBody =
      "@atnnn, I think @nviennot's idea was that the 2PC protocol can be implemented independently of the application logic. So you can pass in arbitrary sequences of operations.\r\n\r\nThis would still be possible without `r.eval()`. You could store the ReQL query object in the client. Instead of having a ReQL field in the transaction, the transaction would have some kind of \"query type\" field together with an \"arguments\" object. When committing a transaction, the 2PC library would look up the ReQL query associated with the query type and execute it. This is less convenient to use than having `r.eval()`, because you have to manage a fixed set of \"transactionable\" queries in your application.\r\n\r\nAn infrastructure to store and execute queries directly in a table would probably be useful for https://github.com/rethinkdb/rethinkdb/issues/997 as well."
  , issueCommentId = 32293035
  }