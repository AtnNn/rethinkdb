Issue
  { issueClosedAt = Just 2013 (-10) (-15) 19 : 54 : 58 UTC
  , issueUpdatedAt = 2014 (-02) (-27) 01 : 54 : 42 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/728/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/728"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "e102d8"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:bug"
          , labelName = "tp:bug"
          }
      ]
  , issueNumber = 728
  , issueAssignee =
      Just
        SimpleUser
          { simpleUserId = Id 505365
          , simpleUserLogin = N "danielmewes"
          , simpleUserAvatarUrl =
              "https://avatars.githubusercontent.com/u/505365?v=3"
          , simpleUserUrl = "https://api.github.com/users/danielmewes"
          , simpleUserType = OwnerUser
          }
  , issueUser =
      SimpleUser
        { simpleUserId = Id 43867
        , simpleUserLogin = N "jdoliner"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/43867?v=3"
        , simpleUserUrl = "https://api.github.com/users/jdoliner"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Crash during rapid resharding"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/728"
  , issueCreatedAt = 2013 (-04) (-26) 22 : 23 : 30 UTC
  , issueBody =
      Just
        "I uncovered the following crash while rapidly resharding:\n\n``` c\nerror: Error in ../src/buffer_cache/mirrored/mirrored.cc at line 657:\nerror: Assertion failed: [inner_buf->version_id <= version_to_access] \nerror: Backtrace:\nerror: Fri Apr 26 15:15:57 2013\n\n       1: lazy_backtrace_t::lazy_backtrace_t() at backtrace.cc:249\n       2: format_backtrace(bool) at backtrace.cc:196\n       3: report_fatal_error(char const*, int, char const*, ...) at errors.cc:71\n       4: mc_buf_lock_t::acquire_block(unsigned long) at mirrored.cc:657\n       5: mc_buf_lock_t::initialize(unsigned long, file_account_t*, lock_in_line_callback_t*) at mirrored.cc:577\n       6: mc_buf_lock_t::mc_buf_lock_t(mc_transaction_t*, unsigned int, access_t, buffer_cache_order_mode_t, lock_in_line_callback_t*) at mirrored.cc:517\n       7: scc_buf_lock_t<mc_cache_t>::scc_buf_lock_t(scc_transaction_t<mc_cache_t>*, unsigned int, access_t, buffer_cache_order_mode_t, lock_in_line_callback_t*) at semantic_checking.tcc:138\n       8: process_a_leaf_node(traversal_state_t*, scoped_ptr_t<scc_buf_lock_t<mc_cache_t> >*, int, btree_key_t const*, btree_key_t const*) at parallel_traversal.cc:469\n       9: do_a_subtree_traversal_fsm_t::on_node_ready(scoped_ptr_t<scc_buf_lock_t<mc_cache_t> >*) at parallel_traversal.cc:400\n       10: acquire_a_node_fsm_t::you_may_acquire() at parallel_traversal.cc:262\n       11: boost::_mfi::mf0<void, acquisition_waiter_callback_t>::operator()(acquisition_waiter_callback_t*) const at mem_fn_template.hpp:50\n       12: void boost::_bi::list1<boost::_bi::value<acquisition_waiter_callback_t*> >::operator()<boost::_mfi::mf0<void, acquisition_waiter_callback_t>, boost::_bi::list0>(boost::_bi::type<void>, boost::_mfi::mf0<void, acquisition_waiter_callback_t>&, boost::_bi::list0&, int) at bind.hpp:254\n       13: boost::_bi::bind_t<void, boost::_mfi::mf0<void, acquisition_waiter_callback_t>, boost::_bi::list1<boost::_bi::value<acquisition_waiter_callback_t*> > >::operator()() at bind_template.hpp:21\n       14: callable_action_instance_t<boost::_bi::bind_t<void, boost::_mfi::mf0<void, acquisition_waiter_callback_t>, boost::_bi::list1<boost::_bi::value<acquisition_waiter_callback_t*> > > >::run_action() at runtime_utils.hpp:58\n       15: callable_action_wrapper_t::run() at runtime_utils.cc:67\n       16: coro_t::run() at coroutines.cc:178\n```\n\nTo reproduce:\n- Insert about 1M documents (I have no idea how important this number is.)\n- Rapidly change the number of shards in the UI (don't wait for the resharding process to finish before changing the number.)\n\nThis issue is post secondary indexes so they're a likely candidate. I currently have no hypothesis for how they could be involved though. I had no secondary indexes created at the time I got this and thus I can't think of a reason they'd be spawning parallel traversals. It seems more likely that it's the backfill parallel traversal that's erroring. But who knows.\n"
  , issueState = "closed"
  , issueId = Id 13710938
  , issueComments = 26
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 706854
                , simpleUserLogin = N "AtnNn"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/706854?v=3"
                , simpleUserUrl = "https://api.github.com/users/AtnNn"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 0
          , milestoneNumber = 51
          , milestoneClosedIssues = 14
          , milestoneDescription = Nothing
          , milestoneTitle = "1.10.1"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/51"
          , milestoneCreatedAt = 2013 (-10) (-22) 20 : 34 : 54 UTC
          , milestoneState = "closed"
          }
  }