Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2016 (-07) (-08) 03 : 39 : 01 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5879/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/5879"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "0052cc"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:ReQL_proposal"
          , labelName = "tp:ReQL_proposal"
          }
      ]
  , issueNumber = 5879
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 877936
        , simpleUserLogin = N "marshall007"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/877936?v=3"
        , simpleUserUrl = "https://api.github.com/users/marshall007"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Proposal: schema primitives in ReQL"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/5879"
  , issueCreatedAt = 2016 (-06) (-22) 19 : 34 : 37 UTC
  , issueBody =
      Just
        "I'd like to propose a set of utility functions for creating schema validators that I think would be useful in a variety of contexts.\n#### Goals\n1. Provide rich ReQL API for defining and executing object schemas.\n2. Meet needs of Horizon validation functions so they can be run in ReQL.\n3. Identify and support common validation operators.\n   - Long term I think we should err on the side of being feature-rich.\n4. Use as secondary index functions? (i.e. `indexCreate(..., r.schema(...))`)\n#### Possible Future Goals\n1. Assign schema to a table and enforce on all write operations.\n2. Explicit `schema` optarg to `insert`, `update`, etc.\n3. Use as document expiration functions from #5823 (i.e. expire when document becomes invalid).\n#### Questions\n- Should we instead rely on or at least support parsing some standard format like JSON Schema?\n- Do or will we ever need to worry about validating document relationships?\n#### Usage\n\n``` js\nr.schema(<schema>)(<data>, <options>)\n```\n\n`r.schema(...)` returns a function that accepts two arguments, the context to evaluate the schema in and any options we might support. Executing the function returns an object containing the validation status and either the valid data or any validation errors that occurred. Possible options might include:\n- `terminate`: when `true` stops when first validation error is encountered. Otherwise errors for all fields are returned.\n- `convert`: automatically attempt to coerce values to the required type (i.e. `string <-> number/boolean/date`).\n#### Examples\n\nRough outline of what this might look like in practice:\n\n``` js\nconst schema = r.schema({\n  code: r.string().min(3).max(9).upper(), // [A-Z\\W]{3,9}\n  date: r.date().min(r.time(2016, 6, 22, 'Z')).max(r.now()) // between 2016-06-22 and now\n  value: r.number()\n})\n\nschema(r.expr({ code: 'ABC', date: r.now(), value: 5 }))\n/* ->\n{\n  valid: true,\n  data: {\n    code: 'ABC',\n    date: Date('2016-06-22'),\n    value: 5\n  }\n}\n*/\n\nschema(r.expr({ code: 'AB', date: 'NOT_A_DATE', value: 5 }))\n/* ->\n{\n  valid: false,\n  data: {\n    value: 5\n  }\n  errors: {\n    code: { min: { required: 3, actual: 2 } },\n    date: { type: { required: 'DATE', actual: 'STRING' } }\n  }\n}\n*/\n```\n"
  , issueState = "open"
  , issueId = Id 161767026
  , issueComments = 2
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 268
          , milestoneNumber = 41
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone will be revisited after each major release during the planning stage for the major release after it. They will be moved to a specific release milestone if chosen for that release."
          , milestoneTitle = "subsequent"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/41"
          , milestoneCreatedAt = 2013 (-06) (-30) 07 : 32 : 52 UTC
          , milestoneState = "open"
          }
  }