Issue
  { issueClosedAt = Nothing
  , issueUpdatedAt = 2015 (-08) (-18) 18 : 23 : 00 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4692/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/rethinkdb/issues/4692"
  , issueClosedBy = Nothing
  , issueLabels =
      [ IssueLabel
          { labelColor = "0052cc"
          , labelUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/labels/tp:ReQL_proposal"
          , labelName = "tp:ReQL_proposal"
          }
      ]
  , issueNumber = 4692
  , issueAssignee = Nothing
  , issueUser =
      SimpleUser
        { simpleUserId = Id 7431361
        , simpleUserLogin = N "larkost"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/7431361?v=3"
        , simpleUserUrl = "https://api.github.com/users/larkost"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Allow for synchronous table config changes"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/4692"
  , issueCreatedAt = 2015 (-08) (-14) 23 : 35 : 42 UTC
  , issueBody =
      Just
        "Currently all of our methods to change the config on a table (e.g.: sharding or partitioning) are implemented in an asynchronous manner. When the command returns a new plan has been made, but the execution of that plan has not yet (necessarily) begun. In theory using `table.wait()` is a way around it (but not currently: #4691), but it would be better if we had a fully synchronous way for people to do this for use in things like automated db setups (config + data).\n\nI immediately see two approaches to this:\n1. Add an opt-arg to `reconfigure`. This works as far as it goes, but `reconfigure` is not convenient for a number of normal use-cases (e.g.: changing the primary from one computer to another without playing with tags). The new opt-arg approach is less attractive when applied to other methods like `table.config().update()` or using `rethinkdb.table_config`.\n1. A more generalized approach would be to re-use the `durability` opt-arg on any operations on `rethinkdb.table_config` and `table.config`. If we defaulted `durability` on these to `soft` then we would have the current behavior, while `hard` would make it wait until the reconfiguration is complete. It is not an exact match to the behavior for table data, but from the abstraction that `soft` means \"tell me when you have started this\" and `hard` meaning \"everything is done\" it at least looks right when you squint a little.\n\nThere are still holes in this idea, like what to do when a server is unreachable and so the new configuration would never be complete, or what to do if a second `reconfigure` were to be issued while we were waiting for the first to complete.\n"
  , issueState = "open"
  , issueId = Id 101122039
  , issueComments = 1
  , issueMilestone =
      Just
        Milestone
          { milestoneCreator =
              SimpleUser
                { simpleUserId = Id 48436
                , simpleUserLogin = N "coffeemug"
                , simpleUserAvatarUrl =
                    "https://avatars.githubusercontent.com/u/48436?v=3"
                , simpleUserUrl = "https://api.github.com/users/coffeemug"
                , simpleUserType = OwnerUser
                }
          , milestoneDueOn = Nothing
          , milestoneOpenIssues = 882
          , milestoneNumber = 2
          , milestoneClosedIssues = 0
          , milestoneDescription =
              Just
                "Issues in this milestone are not an immediate priority, and will be periodically revisited. When we decide to work on an issue in backlog, we'll move it to next."
          , milestoneTitle = "backlog"
          , milestoneUrl =
              "https://api.github.com/repos/rethinkdb/rethinkdb/milestones/2"
          , milestoneCreatedAt = 2012 (-11) (-11) 14 : 16 : 11 UTC
          , milestoneState = "open"
          }
  }