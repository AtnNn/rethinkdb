IssueComment
  { issueCommentUpdatedAt = 2015 (-09) (-08) 20 : 27 : 45 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1366
        , simpleUserLogin = N "deontologician"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1366?v=3"
        , simpleUserUrl = "https://api.github.com/users/deontologician"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/138689936"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/4802#issuecomment-138689936"
  , issueCommentCreatedAt = 2015 (-09) (-08) 20 : 27 : 45 UTC
  , issueCommentBody =
      "Netty looks really awesome from what I've read. Will have to do more digging.\r\n\r\nJava 7 ReQL will be necessarily verbose, with lambdas translating to anonymous classes like this:\r\n\r\n```java\r\n// Java 8\r\nfoo.reduce((a,b) -> a.add(b)).run(conn);\r\n\r\n// Java 7\r\nfoo.reduce(new ReqlFunction2(){\r\n    public ReqlExpr apply(ReqlExpr a, ReqlExpr b) {\r\n        return a.add(b);\r\n    }).run(conn);\r\n```\r\n\r\nSo a lack of lambda syntax isn't a show-stopper per-se. Internally, the driver uses the stream api (from Java 8) in a few places, but it's nothing complicated and could be replaced if necessary. In addition, while Java 7 isn't officially supported by Oracle, there are still a lot of people using it from what I have been able to tell, so official support isn't the final word (much as I wish it was since it would simplify things).\r\n\r\nThat being said, I would like to get the Java driver rock solid in Java 8 before spending time on backwards compatibility. "
  , issueCommentId = 138689936
  }