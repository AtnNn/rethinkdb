IssueComment
  { issueCommentUpdatedAt = 2013 (-11) (-19) 05 : 52 : 50 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/28767597"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/1663#issuecomment-28767597"
  , issueCommentCreatedAt = 2013 (-11) (-19) 05 : 50 : 25 UTC
  , issueCommentBody =
      "This is actually a really good question. The issue you bring up is one part perception, one part reality, and one part bookkeeping. Here is an (incomplete) list of reasons that contribute to this issue:\r\n\r\n* __The architecture is still in flux.__ RethinkDB hasn't been marked production ready. This is by design. We want to make sure the product is absolutely rock solid before it goes into production. This decision gives us the flexibility to address issues in a systematic way rather than via one-off fixes. For example, many of the issues you brought up stem from a somewhat poorly evolved caching component. We *could* just patch each individual issue, but instead we're rewriting the cache (#1642) to deal with them in one full sweep. We won't have this luxury once the product is marked production ready, but until then we're making sure the codebase is as rock solid as possible. We believe this will result in a better product long term, and don't want to compromise long term robustness for short term gains.\r\n* __Unreproducible issues.__ Some of the bugs you mention are almost certainly the result of user error or complex interaction on the host system. For example, we've done an extensive code audit and there is no plausible way by which RethinkDB can cause the data loss issue reported in #1339. We're keeping the issue open to improve logging on the server (to help diagnose the root cause in the future), but this isn't actually a high risk issue so it isn't scheduled to be addressed immediately. If there was a data loss issue in RethinkDB, we would have addressed it immediately.\r\n* __Low impact issues.__ Some of the reported performance issues have a fairly low probability of showing up or have easy workarounds. We prioritize over these issues because we have to be extremely careful about allocated development time. Unfortunately if you look at the issue tracker, you can't always tell low impact issues from high impact ones, so they might look the same to an outside observer.\r\n* __Internal bookkeeping.__ The GitHub issue tracker is a wonderful tool, but it has significant failings. It makes it very difficult to prioritize issues (as there is no actual priority feature) or to break them into components. As a result, we end up using labels that make sense to us internally, but don't necessarily make sense to external observers. This is something I (as a product manager) am actively working to rectify, but GitHub tracker doesn't make it easy, so the state of the tracker sometimes doesn't reflect reality in a way that makes sense to external observers.\r\n* __Resource allocation.__ There are some issues we're actively choosing not to fix. For example, RethinkDB is a platform for building real-time applications, so most of our performance efforts go into real-time performance issues. We're actively choosing not to focus on certain areas (for example, analytics), so some bugs remain open far longer than others. There is a debate about whether these bugs should be closed, but we prefer to keep them open in backlog as an information repository. We will fix them eventually.\r\n* __Actual difficulty.__ Some bugs are indeed difficult to fix and they take more time than we'd like. This is the reality of any systems project, and most systems projects that cross a certain degree of complexity have to deal with a certain irreducible number of bugs. For an example of this, I refer you to the (in)famous MySQL bug 20786 -- http://www.youtube.com/watch?v=oAiVsbXVP6k.\r\n\r\nTL;DR: I don't believe there is a systemic problem. If you have a specific bug you'd like to bring to our attention, please do comment on it! We'll happily discuss it and see if we can escalate if it's appropriate."
  , issueCommentId = 28767597
  }