IssueComment
  { issueCommentUpdatedAt = 2012 (-12) (-17) 19 : 18 : 00 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 646357
        , simpleUserLogin = N "wmrowan"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/646357?v=3"
        , simpleUserUrl = "https://api.github.com/users/wmrowan"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/rethinkdb/issues/comments/11456610"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/rethinkdb/issues/101#issuecomment-11456610"
  , issueCommentCreatedAt = 2012 (-12) (-17) 19 : 18 : 00 UTC
  , issueCommentBody =
      "This will be fixed given the new design for our js implementation following the new protobuf spec. JavaScript functions will become more important with the introduction of `do` as function expressions will become the standard way to pass variables to javascript code (allowing us to significantly reduce the complexity of the implementation too). All the following examples will work in the new `r.js`.\r\n\r\n```javascript\r\n// The 'do' syntax passes values to functions, conveniently replacing 'let'\r\n>>> r(1).do(function(a) { return a.add(a) }).runp()\r\n2\r\n// Using 'r.js' with a function expression produces a reference usable in a 'do'\r\n>>> r(1).do(r.js(\"function(a) { return a + a }\")).runp()\r\n2\r\n// In the JS driver it will also work to pass a naked function to 'r.js'\r\n// We'll use 'toSource' to get similar source code to the above example\r\n// while eliminating the need for quotes and the headache of multiline\r\n// strings in JavaScript\r\n>>> r(1).do(r.js(function(a) {\r\n...    return a + a;\r\n... })).runp();\r\n2\r\n\r\n// Note that this works even better in coffee script\r\n>>> r(1).do(r.js (a) -> a + a).runp()\r\n2\r\n```\r\n\r\nI'm assigning this to self and will close it when the new behavior is fully implemented."
  , issueCommentId = 11456610
  }